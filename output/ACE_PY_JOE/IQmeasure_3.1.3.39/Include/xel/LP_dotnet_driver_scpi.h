/*
  Litepoint Instrument Driver
  (C) Litepoint 2011, All rights reserved
*/
#pragma once

#include "LP_dotnet_driver_enums.h"

namespace LP {
    public ref class InstrumentDriver
    {
        public:

            static int Sys_Cls(int session);
            static int Sys_Emc_Set(int session, int Enable_Disable);
            static int Sys_Emc_Get(int session, int %Enable_disable);
            static int Sys_Ese_Set(int session, unsigned int Std_Event_Status_Enable_Register);
            static int Sys_Ese_Get(int session, unsigned int %Std_Event_Status_Enable_Register);
            static int Sys_Esr_Get(int session, unsigned int %Std_Event_Status_Register);
            static int Sys_Gmc_Get(int session, System::String^ Macro_label, System::String^% Macro_contents);
            static int Sys_Lmc_Get(int session, System::String^% Macro_labels);
            static int Sys_Opc_Set(int session);
            static int Sys_Opc_Get(int session, unsigned int %_1);
            static int Sys_Pmc(int session);
            static int Sys_Rcl(int session, unsigned int Register_Location);
            static int Sys_Rmc(int session, System::String^ Macro_label);
            static int Sys_Rst(int session);
            static int Sys_Sav(int session, unsigned int Register_Location);
            static int Sys_Sds(int session, unsigned int Register_Location);
            static int Sys_Sre_Set(int session, unsigned int Service_Request_Enable_Register);
            static int Sys_Sre_Get(int session, unsigned int %Service_Request_Enable_Register);
            static int Sys_Stb_Get(int session, unsigned int %Status_Byte);
            static int Sys_Wai(int session);
            static int Sys_Capture_Clear(int session);
            static int Sys_Capture_Load_Asegment(int session, System::String^ File_Name);
            static int Sys_Capture_Load(int session, System::String^ File_Name);
            static int Sys_Capture_Data_Get(int session, unsigned int segment, unsigned int signal, array<System::Single>^ IQ_Data);
            static int Sys_Capture_Data_Scount_Get(int session, unsigned int segment, unsigned int signal, unsigned int %Capture_Sample_Count);
            static int Sys_Capture_Data_Srate_Get(int session, unsigned int segment, unsigned int signal, unsigned int %Capture_Sample_Rate);
            static int Sys_Capture_Data_Tstamp_Get(int session, unsigned int segment, unsigned int signal, unsigned int %Capture_Time_Stamp);
            static int Sys_Capture_Signal_Count_Get(int session, unsigned int segment, unsigned int %Signal_Count);
            static int Sys_Capture_Store(int session, unsigned int segment, System::String^ File_Name, System::String^ Description_of_Capture);
            static int Sys_Capture_Segment_Count_Get(int session, unsigned int %Segment_Count);
            static int Sys_Channel(int session, unsigned int channel);
            static int Sys_Channel_Get(int session, Channel %Channel);
            static int Sys_Crcl(int session, unsigned int Register_Location);
            static int Sys_Crst(int session);
            static int Sys_Csav(int session, unsigned int Register_Location);
            static int Sys_Csds(int session, unsigned int Register_Location);
            static int Sys_Dclear_Hmodules(int session);
            static int Sys_Dclear_Lock(int session);
            static int Sys_Format_Readings_Border_Set(int session, Data_Byte_Order Byte_Order);
            static int Sys_Format_Readings_Border_Get(int session, Data_Byte_Order %Byte_Order);
            static int Sys_Format_Readings_Data_Set(int session, Data_Format Data_Format, unsigned int Length_or_Precision);
            static int Sys_Format_Readings_Data_Get(int session, Data_Format %Data_Format);
            static int Sys_Mmemory_Catalog_Get(int session, System::String^% mass_storage_contents_list);
            static int Sys_Mmemory_Cdirectory_Set(int session, System::String^ Dir_Name);
            static int Sys_Mmemory_Cdirectory_Get(int session, System::String^% Dir_Name);
            static int Sys_Mmemory_Crc_Get(int session, System::String^ File_Name, System::String^% CRC);
            static int Sys_Mmemory_Data_Get(int session, System::String^ File_Name, System::String^% Data);
            static int Sys_Mmemory_Delete(int session, System::String^ File_Name);
            static int Sys_Mmemory_Description_Get(int session, System::String^ File_Name, System::String^% Description);
            static int Sys_Mmemory_Fclose(int session);
            static int Sys_Mmemory_Fopen(int session, System::String^ File_Name, System::String^ File_open_mode);
            static int Sys_Mmemory_Fread_Get(int session, System::String^% Data);
            static int Sys_Mmemory_Mdirectory(int session, System::String^ Dir_Name);
            static int Sys_Mmemory_Rdirectory(int session, System::String^ Dir_Name);
            static int Sys_Amodules_Get(int session, unsigned int %Number_of_Modules, LP_Module_t[] Module);
            static int Sys_Cmodules_Get(int session, unsigned int %Number_of_Modules, LP_Module_t[] Module);
            static int Sys_Module_Get(int session, Module %Module);
            static int Sys_Mrcl(int session, unsigned int Register_Location);
            static int Sys_Mrst(int session);
            static int Sys_Msav(int session, unsigned int Register_Location);
            static int Sys_Msds(int session, unsigned int Register_Location);
            static int Sys_Sequence_Copy(int session, unsigned int sequence, unsigned int Location);
            static int Sys_Sequence_Record_Append(int session, unsigned int sequence);
            static int Sys_Sequence_Record_Cancel(int session, unsigned int sequence);
            static int Sys_Sequence_Record_Pause(int session, unsigned int sequence);
            static int Sys_Sequence_Record_Resume(int session, unsigned int sequence);
            static int Sys_Sequence_Record(int session, unsigned int sequence);
            static int Sys_Sequence_Record_Stop(int session, unsigned int sequence);
            static int Sys_Sequence_Define_Get(int session, unsigned int sequence, System::String^% Commands_listing);
            static int Sys_Sequence_Delete(int session, unsigned int sequence);
            static int Sys_Sequence_Abort_Herror_Set(int session, bool Sequence_abort_mode_on_hardware_error);
            static int Sys_Sequence_Abort_Herror_Get(int session, bool %Sequence_abort_mode_on_hardware_error);
            static int Sys_Sequence_Delete_All(int session);
            static int Sys_Sequence_List_Count_Get(int session, unsigned int %Number_of_sequences);
            static int Sys_Sequence_List_Get(int session, unsigned int %Number_of_sequence_IDs, array<System::UInt32>^ Sequence_ID_List);
            static int Sys_Sequence_Cmemory_Set(int session, Clear_capture_memory_mode Clear_capture_memory_mode);
            static int Sys_Sequence_Cmemory_Get(int session, Clear_capture_memory_mode %Clear_capture_memory_mode);
            static int Sys_Status_Channel_Condition_Get(int session, unsigned int %Channels_Condition_Register);
            static int Sys_Status_Channel_Enable_Set(int session, unsigned int Channels_Enable_Register);
            static int Sys_Status_Channel_Enable_Get(int session, unsigned int %Channels_Enable_Register);
            static int Sys_Status_Channel_Get(int session, unsigned int %Channels_Event_Register);
            static int Sys_Status_Channel_Ntransition_Set(int session, unsigned int Channels_Negative_Transition_Register);
            static int Sys_Status_Channel_Ntransition_Get(int session, unsigned int %Channels_Negative_Transition_Register);
            static int Sys_Status_Channel_Ptransition_Set(int session, unsigned int Channels_Positive_Transition_Register);
            static int Sys_Status_Channel_Ptransition_Get(int session, unsigned int %Channels_Positive_Transition_Register);
            static int Sys_Status_Condition_Get(int session, unsigned int %Active_Modules_Condition_Register);
            static int Sys_Status_Csummary_Condition_Get(int session, unsigned int %Channel_Summarys_Condition_Register);
            static int Sys_Status_Csummary_Enable_Set(int session, unsigned int Channel_Summarys_Enable_Register);
            static int Sys_Status_Csummary_Enable_Get(int session, unsigned int %Channel_Summarys_Enable_Register);
            static int Sys_Status_Csummary_Get(int session, unsigned int %Channel_Summarys_Event_Register);
            static int Sys_Status_Csummary_Ntransition_Set(int session, unsigned int Channel_Summarys_Negative_Transition_Register);
            static int Sys_Status_Csummary_Ntransition_Get(int session, unsigned int %Channel_Summarys_Negative_Transition_Register);
            static int Sys_Status_Csummary_Ptransition_Set(int session, unsigned int Channel_Summarys_Positive_Transition_Register);
            static int Sys_Status_Csummary_Ptransition_Get(int session, unsigned int %Channel_Summarys_Positive_Transition_Register);
            static int Sys_Status_Enable_Set(int session, unsigned int Active_Modules_Enable_Register);
            static int Sys_Status_Enable_Get(int session, unsigned int %Active_Modules_Enable_Register);
            static int Sys_Status_Get(int session, unsigned int %Active_Modules_Event_Register);
            static int Sys_Status_Ntransition_Set(int session, unsigned int Active_Modules_Negative_Transition_Register);
            static int Sys_Status_Ntransition_Get(int session, unsigned int %Active_Modules_Negative_Transition_Register);
            static int Sys_Status_Operation_Condition_Get(int session, unsigned int %Operations_Condition_Register);
            static int Sys_Status_Operation_Connection_Condition_Get(int session, unsigned int %Connections_Condition_Register);
            static int Sys_Status_Operation_Connection_Enable_Set(int session, unsigned int Connections_Enable_Register);
            static int Sys_Status_Operation_Connection_Enable_Get(int session, unsigned int %Connections_Enable_Register);
            static int Sys_Status_Operation_Connection_Get(int session, unsigned int %Connections_Event_Register);
            static int Sys_Status_Operation_Connection_Ntransition_Set(int session, unsigned int Connections_Negative_Transition_Register);
            static int Sys_Status_Operation_Connection_Ntransition_Get(int session, unsigned int %Connections_Negative_Transition_Register);
            static int Sys_Status_Operation_Connection_Ptransition_Set(int session, unsigned int Connections_Positive_Transition_Register);
            static int Sys_Status_Operation_Connection_Ptransition_Get(int session, unsigned int %Connections_Positive_Transition_Register);
            static int Sys_Status_Operation_Enable_Set(int session, unsigned int Operations_Enable_Register);
            static int Sys_Status_Operation_Enable_Get(int session, unsigned int %Operations_Enable_Register);
            static int Sys_Status_Operation_Get(int session, unsigned int %Operations_Event_Register);
            static int Sys_Status_Operation_Ntransition_Set(int session, unsigned int Operations_Negative_Transition_Register);
            static int Sys_Status_Operation_Ntransition_Get(int session, unsigned int %Operations_Negative_Transition_Register);
            static int Sys_Status_Operation_Ptransition_Set(int session, unsigned int Operations_Positive_Transition_Register);
            static int Sys_Status_Operation_Ptransition_Get(int session, unsigned int %Operations_Positive_Transition_Register);
            static int Sys_Status_Preset(int session);
            static int Sys_Status_Ptransition_Set(int session, unsigned int Active_Modules_Positive_Transition_Register);
            static int Sys_Status_Ptransition_Get(int session, unsigned int %Active_Modules_Positive_Transition_Register);
            static int Sys_Status_Questionable_Condition_Get(int session, unsigned int %Questionables_Condition_Register);
            static int Sys_Status_Questionable_Enable_Set(int session, unsigned int Questionables_Enable_Register);
            static int Sys_Status_Questionable_Enable_Get(int session, unsigned int %Questionables_Enable_Register);
            static int Sys_Status_Questionable_Get(int session, unsigned int %Questionables_Event_Register);
            static int Sys_Status_Questionable_Ntransition_Set(int session, unsigned int Questionables_Negative_Transition_Register);
            static int Sys_Status_Questionable_Ntransition_Get(int session, unsigned int %Questionables_Negative_Transition_Register);
            static int Sys_Status_Questionable_Ptransition_Set(int session, unsigned int Questionables_Positive_Transition_Register);
            static int Sys_Status_Questionable_Ptransition_Get(int session, unsigned int %Questionables_Positive_Transition_Register);
            static int Sys_Status_Sequence_Condition_Get(int session, unsigned int %Sequences_Condition_Register);
            static int Sys_Status_Sequence_Enable_Set(int session, unsigned int Sequences_Enable_Register);
            static int Sys_Status_Sequence_Enable_Get(int session, unsigned int %Sequences_Enable_Register);
            static int Sys_Status_Sequence_Get(int session, unsigned int %Sequences_Event_Register);
            static int Sys_Status_Sequence_Ntransition_Set(int session, unsigned int Sequences_Negative_Transition_Register);
            static int Sys_Status_Sequence_Ntransition_Get(int session, unsigned int %Sequences_Negative_Transition_Register);
            static int Sys_Status_Sequence_Ptransition_Set(int session, unsigned int Sequences_Positive_Transition_Register);
            static int Sys_Status_Sequence_Ptransition_Get(int session, unsigned int %Sequences_Positive_Transition_Register);
            static int Sys_Status_Srq_Get(int session, unsigned int %SRQ_Result);
            static int Sys_Status_Srq_Nblock_Get(int session, unsigned int %SRQ_Result);
            static int Sys_Status_Srq_Sname_Set(int session, System::String^ SRQ_Session);
            static int Sys_Status_Srq_Sname_Get(int session, System::String^% SRQ_Session);
            static int Sys_Status_Srq_Timeout_Set(int session, unsigned int SRQ_Timeout);
            static int Sys_Status_Srq_Timeout_Get(int session, unsigned int %SRQ_Timeout);
            static int Sys_Session_Count_Get(int session, int %Number_of_external_sessions);
            static int Sys_Session_Info_Get(int session, System::String^ Optional_Session_Name, System::String^% Session_information);
            static int Sys_Session_List_Get(int session, System::String^% Session_information);
            static int Sys_Lock_Add_Get(int session, System::String^ Session_Name, unsigned int %Session_Add_result);
            static int Sys_Lock_Owner_Info_Get(int session, System::String^% Lock_Owner_Session_Information);
            static int Sys_Lock_Owner_Get(int session, System::String^% Lock_Owner_Session_Name);
            static int Sys_Lock_Release(int session);
            static int Sys_Lock_Request_Timeout_Set(int session, unsigned int Lock_Request_Timeout_in_milliseconds);
            static int Sys_Lock_Request_Timeout_Get(int session, unsigned int %Lock_Request_Timeout_in_milliseconds);
            static int Sys_Lock_Request_Get(int session, unsigned int %Lock_result);
            static int Sys_Session_Name_Set(int session, System::String^ Session_Name);
            static int Sys_Session_Name_Get(int session, System::String^% Session_Name);
            static int Sys_Session_Remark_Set(int session, System::String^ Session_Remark);
            static int Sys_Session_Remark_Get(int session, System::String^% Session_Remark);
            static int Sys_Communicate_Socket_Kalive_Enable_Set(int session, bool Keep_Alive_Enable);
            static int Sys_Communicate_Socket_Kalive_Enable_Get(int session, bool %Keep_Alive_Enable);
            static int Sys_Communicate_Socket_Kalive_Interval_Set(int session, double Keep_Alive_Interval);
            static int Sys_Communicate_Socket_Kalive_Interval_Get(int session, double %TCP_Keep_Alive_Interval);
            static int Sys_Communicate_Socket_Kalive_Time_Set(int session, double Keep_Alive_Delay);
            static int Sys_Communicate_Socket_Kalive_Time_Get(int session, double %Keep_Alive_Delay);
            static int Sys_Communicate_Socket_Mac_Get(int session, System::String^% MAC_Address);
            static int Sys_Ctimeout_Set(int session, double Timeout);
            static int Sys_Ctimeout_Get(int session, double %Timeout);
            static int Sys_Error_All_Get(int session, System::String^% Error_Number);
            static int Sys_Error_Code_All_Get(int session, array<System::Int32>^ Error_Numbers);
            static int Sys_Error_Code_Get(int session, int %Error_Number);
            static int Sys_Error_Count_Get(int session, int %Error_Count);
            static int Sys_Error_Get(int session, int %Error_Number, System::String^% Error_Information);
            static int Sys_Help_Documentation_Dependency_Get(int session, System::String^ Command_Name, System::String^% Documentation_String);
            static int Sys_Help_Documentation_Range_Get(int session, System::String^ Command_Name, System::String^% Range_Information);
            static int Sys_Help_Documentation_Related_Get(int session, System::String^ Command_Name, System::String^% Documentation_String);
            static int Sys_Help_Documentation_Response_Get(int session, System::String^ Command_Name, System::String^% Response_Information);
            static int Sys_Help_Documentation_Get(int session, System::String^ Command_Name, System::String^% Documentation_String);
            static int Sys_Help_Errors_Description_Get(int session, System::String^% Error_Format);
            static int Sys_Help_Errors_Get(int session, System::String^% Error_Code_List);
            static int Sys_Help_Execution_Get(int session, System::String^ Command_Name, System::String^% Execution_Type);
            static int Sys_Help_Fcodes_Get(int session, System::String^% fcode_list);
            static int Sys_Help_Headers_Get(int session, System::String^% Command_List);
            static int Sys_Help_Lock_Get(int session, System::String^ Command_Name, System::String^% Lock_info);
            static int Sys_Help_Range_Bands_Get(int session, System::String^ Command_Name, System::String^% Range_Information);
            static int Sys_Help_Range_Get(int session, System::String^ Command_Name, System::String^% Range_Information);
            static int Sys_Help_Response_Get(int session, System::String^ Command_Name, System::String^% Response_Information);
            static int Sys_Help_Sequence_Get(int session, System::String^ Command_Name, System::String^% Sequence_info);
            static int Sys_Help_Status_Registers_Get(int session, System::String^% Register_sets);
            static int Sys_Help_Syntax_Get(int session, System::String^ Command_Name, System::String^% Syntax_information);
            static int Sys_Help_Units_Get(int session, System::String^% Error_Code_List);
            static int Sys_Help_Get(int session, System::String^% HelpText);
            static int Sys_Local_Lock_Release(int session);
            static int Sys_Local_Lock_Request_Get(int session, unsigned int %Lock_result);
            static int Sys_Preset(int session);



            static int VSG_Frequency_Bb_Set(int session, int instance, double Frequency);
            static int VSG_Frequency_Bb_Get(int session, int instance, double %Frequency);
            static int VSG_Frequency_Set(int session, int instance, double Frequency);
            static int VSG_Frequency_Get(int session, int instance, double %Frequency);
            static int VSG_Frequency_Lo_Set(int session, int instance, double Frequency);
            static int VSG_Frequency_Lo_Get(int session, int instance, double %Frequency);
            static int VSG_Frequency_Looffset_Set(int session, int instance, double Frequency);
            static int VSG_Frequency_Looffset_Get(int session, int instance, double %Frequency);
            static int VSG_Frequency_Step_Set(int session, int instance, double Frequency_step_size);
            static int VSG_Frequency_Step_Get(int session, int instance, double %Frequency_step_size);
            static int VSG_Hsequence_Wait(int session, int instance, Trigger_Source Trigger_Source, unsigned int SW_event_mask, double Delay_time, double Timeout);
            static int VSG_Mdelay(int session, int instance, double Delay_time);
            static int VSG_Modulation_State_Set(int session, int instance, bool Modulation_ON_OFF);
            static int VSG_Modulation_State_Get(int session, int instance, bool %Modulation_ON_OFF);
            static int VSG_Mrcl(int session, int instance, unsigned int Register_Location);
            static int VSG_Mrst(int session, int instance);
            static int VSG_Msav(int session, int instance, unsigned int Register_Location);
            static int VSG_Msds(int session, int instance, unsigned int Register_Location);
            static int VSG_Power_Alc_Correction_Set(int session, int instance, double ALC_correction);
            static int VSG_Power_Alc_Correction_Get(int session, int instance, double %ALC_correction);
            static int VSG_Power_Alc_Source_Set(int session, int instance, ALC_Source ALC_source);
            static int VSG_Power_Alc_Source_Get(int session, int instance, ALC_Source %ALC_source);
            static int VSG_Power_Alc_Set(int session, int instance, ALC_State ALC_state);
            static int VSG_Power_Alc_Get(int session, int instance, ALC_State %ALC_state);
            static int VSG_Power_Set(int session, int instance, double Power_Level);
            static int VSG_Power_Get(int session, int instance, double %Power_Level);
            static int VSG_Power_State_Set(int session, int instance, bool Power_state);
            static int VSG_Power_State_Get(int session, int instance, bool %Power_state);
            static int VSG_Power_Step_Set(int session, int instance, double Power_Step_Level);
            static int VSG_Power_Step_Get(int session, int instance, double %Power_Step_Level);
            static int VSG_Qwait_Arm(int session, int instance);
            static int VSG_Qwait_Slope_Set(int session, int instance, Trigger_Slope Timer_Slope);
            static int VSG_Qwait_Slope_Get(int session, int instance, Trigger_Slope %Timer_slope);
            static int VSG_Qwait_Smask_Set(int session, int instance, unsigned int Software_event_mask);
            static int VSG_Qwait_Smask_Get(int session, int instance, unsigned int %Software_event_mask);
            static int VSG_Qwait_Source_Set(int session, int instance, Timer_Source Timer_source);
            static int VSG_Qwait_Source_Get(int session, int instance, Timer_Source %Timer_source);
            static int VSG_Qwait_Timeout_Set(int session, int instance, double Timeout);
            static int VSG_Qwait_Timeout_Get(int session, int instance, double %Timeout);
            static int VSG_Qwait_Type_Set(int session, int instance, Trigger_Type Trigger_type);
            static int VSG_Qwait_Type_Get(int session, int instance, Trigger_Type %Trigger_type);
            static int VSG_Srate_Set(int session, int instance, unsigned int Sampling_rate);
            static int VSG_Srate_Get(int session, int instance, unsigned int %Sampling_rate);
            static int VSG_Timer_Arm(int session, int instance);
            static int VSG_Timer_Slope_Set(int session, int instance, Trigger_Slope Timer_Slope);
            static int VSG_Timer_Slope_Get(int session, int instance, Trigger_Slope %Timer_slope);
            static int VSG_Timer_Source_Set(int session, int instance, Timer_Source Timer_source);
            static int VSG_Timer_Source_Get(int session, int instance, Timer_Source %Timer_source);
            static int VSG_Timer_Synchronize(int session, int instance);
            static int VSG_Timer_Set(int session, int instance, double Periodic_timer_value);
            static int VSG_Timer_Get(int session, int instance, double %Periodic_timer_value);
            static int VSG_Trigger_Mode_Set(int session, int instance, Trigger_Mode Trigger_mode);
            static int VSG_Trigger_Mode_Get(int session, int instance, Trigger_Mode %Trigger_mode);
            static int VSG_Trigger_Slope_Set(int session, int instance, Trigger_Slope Trigger_Slope);
            static int VSG_Trigger_Slope_Get(int session, int instance, Trigger_Slope %Trigger_slope);
            static int VSG_Trigger_Source_Set(int session, int instance, Trigger_Source Trigger_source);
            static int VSG_Trigger_Source_Get(int session, int instance, Trigger_Source %Trigger_source);
            static int VSG_Trigger_Type_Set(int session, int instance, Trigger_Type Trigger_type);
            static int VSG_Trigger_Type_Get(int session, int instance, Trigger_Type %Trigger_type);
            static int VSG_Wave_Delete(int session, int instance, System::String^ Waveform_Name);
            static int VSG_Wave_Delete_All(int session, int instance);
            static int VSG_Wave_Execute_Set(int session, int instance, bool Wave_Play_ON_OFF, System::String^ WSEG_Index);
            static int VSG_Wave_Execute_Get(int session, int instance, bool %Wave_Play_ON_OFF);
            static int VSG_Wave_Generate_Cwave(int session, int instance, double Wave_frequency, float IQ_phase_offset);
            static int VSG_Wave_Length_Get(int session, int instance, System::String^ Waveform_Name, unsigned int %Length_Samples);
            static int VSG_Wave_Load_Set(int session, int instance, System::String^ Waveform_Name);
            static int VSG_Wave_Load_Add(int session, int instance, System::String^ Waveform_Name);
            static int VSG_Wave_Load_Get(int session, int instance, System::String^% Waveform_Name);
            static int VSG_Wlist_Catalog_Delete_All(int session, int instance);
            static int VSG_Wlist_Catalog_List_Count_Get(int session, int instance, unsigned int %Number_of_saved_segments);
            static int VSG_Wlist_Catalog_List_Get(int session, int instance, System::String^% List_of_saved_wave_segments);
            static int VSG_Wlist_Count_Set(int session, int instance, unsigned int Count);
            static int VSG_Wlist_Count_Disable(int session, int instance, System::String^ WSEG_Index);
            static int VSG_Wlist_Count_Enable_Set(int session, int instance, System::String^ WSEG_Index);
            static int VSG_Wlist_Count_Enable_Get(int session, int instance, System::String^% List_of_wave_segments);
            static int VSG_Wlist_Count_Get(int session, int instance, unsigned int %WList_count);
            static int VSG_Wlist_Wsegment_Data_Set(int session, int instance, unsigned int wsegment, System::String^ Waveform_Name);
            static int VSG_Wlist_Wsegment_Data_Get(int session, int instance, unsigned int wsegment, System::String^% Waveform_Name);
            static int VSG_Wlist_Wsegment_Delete(int session, int instance, unsigned int wsegment);
            static int VSG_Wlist_Wsegment_Length_Set(int session, int instance, unsigned int wsegment, unsigned int Length_Samples);
            static int VSG_Wlist_Wsegment_Length_Get(int session, int instance, unsigned int wsegment, unsigned int %Length_Samples);
            static int VSG_Wlist_Wsegment_Marker_Set(int session, int instance, unsigned int wsegment, unsigned int marker, unsigned int High_index, unsigned int Low_index);
            static int VSG_Wlist_Wsegment_Marker_Get(int session, int instance, unsigned int wsegment, unsigned int marker, unsigned int %High_index, unsigned int %Low_index);
            static int VSG_Wlist_Wsegment_Next_Set(int session, int instance, unsigned int wsegment, unsigned int Wave_Segment);
            static int VSG_Wlist_Wsegment_Next_Get(int session, int instance, unsigned int wsegment, unsigned int %Wave_Segment);
            static int VSG_Wlist_Wsegment_Repeat_Set(int session, int instance, unsigned int wsegment, unsigned int Repeat_count);
            static int VSG_Wlist_Wsegment_Repeat_Get(int session, int instance, unsigned int wsegment, unsigned int %Repeat_count);
            static int VSG_Wlist_Wsegment_Save(int session, int instance, unsigned int wsegment);
            static int VSG_Wlist_Wsegment_Srate_Set(int session, int instance, unsigned int wsegment, unsigned int Sampling_rate);
            static int VSG_Wlist_Wsegment_Srate_Get(int session, int instance, unsigned int wsegment, unsigned int %Sampling_rate);
            static int VSG_Wlist_Wsegment_Start_Set(int session, int instance, unsigned int wsegment, unsigned int Starting_point_Samples);
            static int VSG_Wlist_Wsegment_Start_Get(int session, int instance, unsigned int wsegment, unsigned int %Starting_point_Samples);



            static int VSA_Capture_Time_Set(int session, int instance, double Capture_length);
            static int VSA_Capture_Time_Get(int session, int instance, double %Capture_length);
            static int VSA_Frequency_Bb_Set(int session, int instance, double Frequency);
            static int VSA_Frequency_Bb_Get(int session, int instance, double %Frequency);
            static int VSA_Frequency_Set(int session, int instance, double Frequency);
            static int VSA_Frequency_Get(int session, int instance, double %Frequency);
            static int VSA_Frequency_Lo_Set(int session, int instance, double Frequency);
            static int VSA_Frequency_Lo_Get(int session, int instance, double %Frequency);
            static int VSA_Frequency_Looffset_Set(int session, int instance, double Frequency);
            static int VSA_Frequency_Looffset_Get(int session, int instance, double %Frequency);
            static int VSA_Frequency_Step_Set(int session, int instance, double Frequency_step_size);
            static int VSA_Frequency_Step_Get(int session, int instance, double %Frequency_step_size);
            static int VSA_Hsequence_Wait(int session, int instance, Trigger_Source Trigger_Source, unsigned int SW_event_mask, double Delay_time, double Timeout);
            static int VSA_Initiate_Asegment(int session, int instance);
            static int VSA_Initiate_Asegment_Nblocked(int session, int instance);
            static int VSA_Initiate(int session, int instance);
            static int VSA_Initiate_Nblocked(int session, int instance);
            static int VSA_Mdelay(int session, int instance, double Delay_time);
            static int VSA_Measure_Coupling_Bw_Set(int session, int instance, double Filter_bandwidth_for_coupling);
            static int VSA_Measure_Coupling_Bw_Get(int session, int instance, double %Filter_bandwidth);
            static int VSA_Measure_Coupling_Set(int session, int instance, Coupling_Mode Couplings_mode);
            static int VSA_Measure_Coupling_Get(int session, int instance, Coupling_Mode %Couplings_mode);
            static int VSA_Mrcl(int session, int instance, unsigned int Register_Location);
            static int VSA_Mrst(int session, int instance);
            static int VSA_Msav(int session, int instance, unsigned int Register_Location);
            static int VSA_Msds(int session, int instance, unsigned int Register_Location);
            static int VSA_Qwait_Arm(int session, int instance);
            static int VSA_Qwait_Slope_Set(int session, int instance, Trigger_Slope Timer_Slope);
            static int VSA_Qwait_Slope_Get(int session, int instance, Trigger_Slope %Timer_slope);
            static int VSA_Qwait_Smask_Set(int session, int instance, unsigned int Software_event_mask);
            static int VSA_Qwait_Smask_Get(int session, int instance, unsigned int %Software_event_mask);
            static int VSA_Qwait_Source_Set(int session, int instance, Timer_Source Timer_source);
            static int VSA_Qwait_Source_Get(int session, int instance, Timer_Source %Timer_source);
            static int VSA_Qwait_Timeout_Set(int session, int instance, double Timeout);
            static int VSA_Qwait_Timeout_Get(int session, int instance, double %Timeout);
            static int VSA_Qwait_Type_Set(int session, int instance, Trigger_Type Trigger_type);
            static int VSA_Qwait_Type_Get(int session, int instance, Trigger_Type %Trigger_type);
            static int VSA_Rlevel_Set(int session, int instance, double Reference_Level);
            static int VSA_Rlevel_Auto(int session, int instance);
            static int VSA_Rlevel_Step_Set(int session, int instance, double Reference_Level_Step);
            static int VSA_Rlevel_Step_Get(int session, int instance, double %Reference_Level_Step);
            static int VSA_Rlevel_Get(int session, int instance, double %Reference_Level);
            static int VSA_Srate_Set(int session, int instance, unsigned int Sampling_rate);
            static int VSA_Srate_Get(int session, int instance, unsigned int %Sampling_rate);
            static int VSA_Timer_Arm(int session, int instance);
            static int VSA_Timer_Slope_Set(int session, int instance, Trigger_Slope Timer_Slope);
            static int VSA_Timer_Slope_Get(int session, int instance, Trigger_Slope %Timer_slope);
            static int VSA_Timer_Source_Set(int session, int instance, Timer_Source Timer_source);
            static int VSA_Timer_Source_Get(int session, int instance, Timer_Source %Timer_source);
            static int VSA_Timer_Synchronize(int session, int instance);
            static int VSA_Timer_Set(int session, int instance, double Periodic_timer_value);
            static int VSA_Timer_Get(int session, int instance, double %Periodic_timer_value);
            static int VSA_Trigger_Gap_Set(int session, int instance, double Gap_Time);
            static int VSA_Trigger_Gap_Get(int session, int instance, double %Gap_Time);
            static int VSA_Trigger_Level_Set(int session, int instance, double Trigger_Threshold);
            static int VSA_Trigger_Level_Get(int session, int instance, double %Trigger_threshold);
            static int VSA_Trigger_Mode_Set(int session, int instance, Trigger_Mode Trigger_mode);
            static int VSA_Trigger_Mode_Get(int session, int instance, Trigger_Mode %Trigger_mode);
            static int VSA_Trigger_Offset_Set(int session, int instance, double Trigger_offset_time);
            static int VSA_Trigger_Offset_Get(int session, int instance, double %Trigger_offset_time);
            static int VSA_Trigger_Slope_Set(int session, int instance, Trigger_Slope Trigger_Slope);
            static int VSA_Trigger_Slope_Get(int session, int instance, Trigger_Slope %Trigger_slope);
            static int VSA_Trigger_Source_Set(int session, int instance, Trigger_Source Trigger_source);
            static int VSA_Trigger_Source_Get(int session, int instance, Trigger_Source %Trigger_source);
            static int VSA_Trigger_Timeout_Set(int session, int instance, double Timeout);
            static int VSA_Trigger_Timeout_Get(int session, int instance, double %Timeout);
            static int VSA_Trigger_Type_Set(int session, int instance, Trigger_Type Trigger_type);
            static int VSA_Trigger_Type_Get(int session, int instance, Trigger_Type %Trigger_type);



            static int Rout_Mrcl(int session, int instance, unsigned int Register_Location);
            static int Rout_Mrst(int session, int instance);
            static int Rout_Msav(int session, int instance, unsigned int Register_Location);
            static int Rout_Msds(int session, int instance, unsigned int Register_Location);
            static int Rout_Port_Correction(int session, int instance, unsigned int correction, double Frequency, double Correction);
            static int Rout_Port_Correction_Clear(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Clear_All(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Clear_Frequency(int session, int instance, unsigned int correction, double Frequency);
            static int Rout_Port_Correction_Data_Get(int session, int instance, unsigned int correction, array<System::Single>^ Correction_table);
            static int Rout_Port_Correction_Delete(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Delete_All(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Restore(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Restore_All(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Save(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Save_All(int session, int instance, unsigned int correction);
            static int Rout_Port_Correction_Use(int session, int instance, unsigned int correction, Port_Name Port_name, Port Resource1);
            static int Rout_Port_Correction_State_Set(int session, int instance, Port_Name Port_name, Port Resource1, bool Correction_state);
            static int Rout_Port_Correction_State_Get(int session, int instance, Port_Name Port_name, Port Resource1, bool %Correction_state);
            static int Rout_Port_Resource_Set(int session, int instance, Port_Name Port_name, Port Resource1, Port Resource2);
            static int Rout_Port_Map_Get(int session, int instance, Port HW_Module, LP_Port_Name_t[] Port_map);
            static int Rout_Port_Resource_Get(int session, int instance, Port_Name Port_name, LP_Port_t[] Resource1);



            static int BP_Marker_External_Set(int session, unsigned int external, Port HW_Module, Marker_Type Marker_source);
            static int BP_Marker_External_Get(int session, unsigned int external, Marker_Type %Marker_source, Port %HW_Module);
            static int BP_Mrcl(int session, unsigned int Register_Location);
            static int BP_Mrst(int session);
            static int BP_Msav(int session, unsigned int Register_Location);
            static int BP_Msds(int session, unsigned int Register_Location);
            static int BP_Roscillator_Set(int session, Reference_Oscillator Reference_Oscillator);
            static int BP_Roscillator_Get(int session, Reference_Oscillator %Reference_Oscillator);



            static int GSM_Calculate_Power(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Smodulation(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Sswitching(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Txquality(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Segment_Smodulation(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Segment_Sswitching(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
            static int GSM_Clear_All(int session);
            static int GSM_Clear_Power(int session);
            static int GSM_Clear_Smodulation(int session);
            static int GSM_Clear_Sswitching(int session);
            static int GSM_Clear_Txquality(int session);
            static int GSM_Configure_Arfcn_Dl_Set(int session, unsigned int Downlink_ARFCN);
            static int GSM_Configure_Arfcn_Dl_Get(int session, unsigned int %Downlink_ARFCN);
            static int GSM_Configure_Arfcn_Ul_Set(int session, unsigned int Uplink_ARFCN);
            static int GSM_Configure_Arfcn_Ul_Get(int session, unsigned int %Uplink_ARFCN);
            static int GSM_Configure_Band_Set(int session, unsigned int Band);
            static int GSM_Configure_Band_Get(int session, unsigned int %Band);
            static int GSM_Configure_Btype_Set(int session, GSM_Slot_Burst_Type Burst_Type);
            static int GSM_Configure_Btype_Get(int session, GSM_Slot_Burst_Type %Burst_Type);
            static int GSM_Configure_Pcl_Set(int session, unsigned int Power_Control_Level);
            static int GSM_Configure_Pcl_Get(int session, unsigned int %Power_Control_Level);
            static int GSM_Configure_Power_Class_8Psk_Set(int session, unsigned int Power_Class);
            static int GSM_Configure_Power_Class_8Psk_Get(int session, unsigned int %Power_Class);
            static int GSM_Configure_Power_Class_Gmsk_Set(int session, unsigned int Power_Class);
            static int GSM_Configure_Power_Class_Gmsk_Get(int session, unsigned int %Power_Class);
            static int GSM_Configure_Power_Filter_Set(int session, GSM_Filter_Type Power_Filter_Type);
            static int GSM_Configure_Power_Filter_Get(int session, GSM_Filter_Type %Power_Filter_Type);
            static int GSM_Configure_Pvtime_Subset_Snumber_Get(int session, array<System::Double>^ Symbol_Numbers);
            static int GSM_Configure_Pvtime_Subset_State_Set(int session, bool Subset_State);
            static int GSM_Configure_Pvtime_Subset_State_Get(int session, bool %Subset_State);
            static int GSM_Configure_Pvtime_Subset_Time_Get(int session, array<System::Double>^ Time_Instants);
            static int GSM_Configure_Smodulation_Srange_Length_Set(int session, unsigned int srange, unsigned int Symbol_Count);
            static int GSM_Configure_Smodulation_Srange_Length_Get(int session, unsigned int srange, unsigned int %Symbol_Count);
            static int GSM_Configure_Smodulation_Srange_Start_Set(int session, unsigned int srange, unsigned int Start_Symbol);
            static int GSM_Configure_Smodulation_Srange_Start_Get(int session, unsigned int srange, unsigned int %Start_Symbol);
            static int GSM_Configure_Smodulation_Subset_Ofrequency_Get(int session, array<System::Double>^ Offset_Frequencies);
            static int GSM_Configure_Smodulation_Subset_State_Set(int session, bool Subset_State);
            static int GSM_Configure_Smodulation_Subset_State_Get(int session, bool %Subset_State);
            static int GSM_Configure_Sswitching_Subset_Ofrequency_Get(int session, array<System::Double>^ Offset_Frequencies);
            static int GSM_Configure_Sswitching_Subset_State_Set(int session, bool Subset_State);
            static int GSM_Configure_Sswitching_Subset_State_Get(int session, bool %Subset_State);
            static int GSM_Configure_Tsequence_Set(int session, GSM_Training_Seq_Type Training_Sequence);
            static int GSM_Configure_Tsequence_Get(int session, GSM_Training_Seq_Type %Training_Sequence);
            static int GSM_Configure_Wave_Bcc_Set(int session, unsigned int Base_station_Color_Code);
            static int GSM_Configure_Wave_Bcc_Get(int session, unsigned int %Base_station_Color_Code);
            static int GSM_Configure_Wave_Btype_Set(int session, unsigned int Slot_Number, GSM_Slot_Burst_Type Burst_Type);
            static int GSM_Configure_Wave_Btype_Get(int session, unsigned int Slot_Number, GSM_Slot_Burst_Type %Burst_Type);
            static int GSM_Configure_Wave_Data_Set(int session, unsigned int Slot_Number, Bit_Pattern_Type Payload_Data_Type);
            static int GSM_Configure_Wave_Data_Get(int session, unsigned int Slot_Number, Bit_Pattern_Type %Payload_Data_Type);
            static int GSM_Configure_Wave_Fn_Set(int session, unsigned int First_Frame_Number);
            static int GSM_Configure_Wave_Fn_Get(int session, unsigned int %First_Frame_Number);
            static int GSM_Configure_Wave_Ncc_Set(int session, unsigned int Network_Color_Code);
            static int GSM_Configure_Wave_Ncc_Get(int session, unsigned int %Network_Color_Code);
            static int GSM_Configure_Wave_Nframes_Set(int session, unsigned int Number_of_Frames);
            static int GSM_Configure_Wave_Nframes_Get(int session, unsigned int %Number_of_Frames);
            static int GSM_Configure_Wave_Rpower_Set(int session, unsigned int Slot_Number, double Relative_Power_Level);
            static int GSM_Configure_Wave_Rpower_Get(int session, unsigned int Slot_Number, double %Relative_Power_Level);
            static int GSM_Configure_Wave_Tsequence_Set(int session, unsigned int Slot_Number, GSM_Training_Seq_Type Training_Sequence);
            static int GSM_Configure_Wave_Tsequence_Get(int session, unsigned int Slot_Number, GSM_Training_Seq_Type %Training_Sequence);
            static int GSM_Fetch_Power_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Power_Check);
            static int GSM_Fetch_Power_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Power_Margin);
            static int GSM_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Power);
            static int GSM_Fetch_Power_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Power_Check);
            static int GSM_Fetch_Power_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_High_Limit);
            static int GSM_Fetch_Power_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_Low_Limit);
            static int GSM_Fetch_Power_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_Margin);
            static int GSM_Fetch_Power_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Power_Check);
            static int GSM_Fetch_Power_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Power_Margin);
            static int GSM_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Power);
            static int GSM_Fetch_Power_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Minimum_Power_Check);
            static int GSM_Fetch_Power_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Power_Margin);
            static int GSM_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Power);
            static int GSM_Fetch_Power_Peak_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Power);
            static int GSM_Fetch_Power_Peak_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Power);
            static int GSM_Fetch_Power_Peak_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Peak_Power);
            static int GSM_Fetch_Power_Peak_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Peak_Power);
            static int GSM_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Power);
            static int GSM_Fetch_Pvtime_Absolute_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Absolute_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Absolute_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Absolute_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Absolute_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Absolute_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Absolute_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Absolute_Hlimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Power_Versus_Time_High_Limits_Corner);
            static int GSM_Fetch_Pvtime_Absolute_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Power_Versus_Time_High_Limits);
            static int GSM_Fetch_Pvtime_Absolute_Llimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Power_Versus_Time_Low_Limits_Corner);
            static int GSM_Fetch_Pvtime_Absolute_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Power_Versus_Time_Low_Limits);
            static int GSM_Fetch_Pvtime_Absolute_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Absolute_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Absolute_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Absolute_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Absolute_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Absolute_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Absolute_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Combined_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Combined_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Combined_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Combined_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Combined_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Combined_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Combined_Hlimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Combined_Power_Versus_Time_High_Limits_Corner);
            static int GSM_Fetch_Pvtime_Combined_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Combined_Power_Versus_Time_High_Limits);
            static int GSM_Fetch_Pvtime_Combined_Llimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Combined_Power_Versus_Time_Low_Limits_Corner);
            static int GSM_Fetch_Pvtime_Combined_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Combined_Power_Versus_Time_Low_Limits);
            static int GSM_Fetch_Pvtime_Combined_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Combined_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Combined_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Combined_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Combined_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Combined_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Combined_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Minimum_Combined_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Combined_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Combined_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Relative_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Relative_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Relative_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Relative_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Relative_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Relative_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Relative_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Relative_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Relative_Hlimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Power_Versus_Time_High_Limits_Corner);
            static int GSM_Fetch_Pvtime_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Power_Versus_Time_High_Limits);
            static int GSM_Fetch_Pvtime_Relative_Llimit_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Power_Versus_Time_Low_Limits_Corner);
            static int GSM_Fetch_Pvtime_Relative_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Power_Versus_Time_Low_Limits);
            static int GSM_Fetch_Pvtime_Relative_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Relative_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Relative_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Relative_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Relative_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Relative_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Relative_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Relative_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Relative_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Minimum_Relative_Power_Versus_Time_Check);
            static int GSM_Fetch_Pvtime_Relative_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Relative_Power_Versus_Time_Margin);
            static int GSM_Fetch_Pvtime_Relative_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Minimum_Relative_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Relative(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Power_Versus_Time);
            static int GSM_Fetch_Pvtime_Snumber_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Symbol_Numbers_Corner);
            static int GSM_Fetch_Pvtime_Snumber(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Symbol_Numbers);
            static int GSM_Fetch_Pvtime_Time_Corner(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Time_Instants_Corner);
            static int GSM_Fetch_Pvtime_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Time_Instants);
            static int GSM_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GSM_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Power);
            static int GSM_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int GSM_Fetch_Smodulation_Absolute_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Absolute_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Absolute_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Absolute_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Absolute_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Absolute_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Absolute_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Absolute_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Spectrum_due_to_Modulation_High_Limits);
            static int GSM_Fetch_Smodulation_Absolute_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Absolute_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Absolute_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Absolute_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Absolute_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Absolute_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Absolute_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Combined_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Combined_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Combined_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Combined_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Combined_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Combined_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Combined_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Combined_Spectrum_due_to_Modulation_High_Limits);
            static int GSM_Fetch_Smodulation_Combined_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Combined_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Combined_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Combined_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Combined_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Combined_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_due_to_Modulation_Offset_Frequencies);
            static int GSM_Fetch_Smodulation_Relative_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Relative_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Relative_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Relative_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Relative_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Relative_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Relative_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Relative_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Spectrum_due_to_Modulation_High_Limits);
            static int GSM_Fetch_Smodulation_Relative_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Relative_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Relative_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Relative_Spectrum_due_to_Modulation_Check);
            static int GSM_Fetch_Smodulation_Relative_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Relative_Spectrum_due_to_Modulation_Margin);
            static int GSM_Fetch_Smodulation_Relative_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Relative_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Relative(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_Spectrum_due_to_Modulation);
            static int GSM_Fetch_Smodulation_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GSM_Fetch_Sswitching_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Spectrum_due_to_Switching_Check);
            static int GSM_Fetch_Sswitching_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Spectrum_due_to_Switching_Margin);
            static int GSM_Fetch_Sswitching_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Spectrum_due_to_Switching);
            static int GSM_Fetch_Sswitching_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Spectrum_due_to_Switching_Check);
            static int GSM_Fetch_Sswitching_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_due_to_Switching_High_Limits);
            static int GSM_Fetch_Sswitching_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Spectrum_due_to_Switching_Margin);
            static int GSM_Fetch_Sswitching_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Spectrum_due_to_Switching_Check);
            static int GSM_Fetch_Sswitching_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Spectrum_due_to_Switching_Margin);
            static int GSM_Fetch_Sswitching_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Spectrum_due_to_Switching);
            static int GSM_Fetch_Sswitching_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_due_to_Switching_Offset_Frequencies);
            static int GSM_Fetch_Sswitching_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GSM_Fetch_Sswitching(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_due_to_Switching);
            static int GSM_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Software_Trigger_Point);
            static int GSM_Fetch_Txquality_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Burst_Type_Check, array<System::Single>^ Average_RMS_Error_Vector_Magnitude_Check, array<System::Single>^ Average_Peak_Error_Vector_Magnitude_Check, array<System::Single>^ Average_95th_Pctl_Error_Vector_Magnitude_Check, array<System::Single>^ Average_RMS_Magnitude_Error_Check, array<System::Single>^ Average_Peak_Magnitude_Error_Check, array<System::Single>^ Average_95th_Pctl_Magnitude_Error_Check, array<System::Single>^ Average_RMS_Phase_Error_Check, array<System::Single>^ Average_Peak_Phase_Error_Check, array<System::Single>^ Average_95th_Pctl_Phase_Error_Check, array<System::Single>^ Average_Frequency_Error_Check, array<System::Single>^ Average_IQ_Offset_Check, array<System::Single>^ Average_IQ_Imbalance_Check, array<System::Single>^ Average_Amplitude_Imbalance_Check, array<System::Single>^ Average_Phase_Imbalance_Check);
            static int GSM_Fetch_Txquality_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Burst_Type_Margin, array<System::Single>^ Average_RMS_Error_Vector_Magnitude_Margin, array<System::Single>^ Average_Peak_Error_Vector_Magnitude_Margin, array<System::Single>^ Average_95th_Pctl_Error_Vector_Magnitude_Margin, array<System::Single>^ Average_RMS_Magnitude_Error_Margin, array<System::Single>^ Average_Peak_Magnitude_Error_Margin, array<System::Single>^ Average_95th_Pctl_Magnitude_Error_Margin, array<System::Single>^ Average_RMS_Phase_Error_Margin, array<System::Single>^ Average_Peak_Phase_Error_Margin, array<System::Single>^ Average_95th_Pctl_Phase_Error_Margin, array<System::Single>^ Average_Frequency_Error_Margin, array<System::Single>^ Average_IQ_Offset_Margin, array<System::Single>^ Average_IQ_Imbalance_Margin, array<System::Single>^ Average_Amplitude_Imbalance_Margin, array<System::Single>^ Average_Phase_Imbalance_Margin);
            static int GSM_Fetch_Txquality_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Burst_Type, array<System::Single>^ Average_RMS_Error_Vector_Magnitude, array<System::Single>^ Average_Peak_Error_Vector_Magnitude, array<System::Single>^ Average_95th_Pctl_Error_Vector_Magnitude, array<System::Single>^ Average_RMS_Magnitude_Error, array<System::Single>^ Average_Peak_Magnitude_Error, array<System::Single>^ Average_95th_Pctl_Magnitude_Error, array<System::Single>^ Average_RMS_Phase_Error, array<System::Single>^ Average_Peak_Phase_Error, array<System::Single>^ Average_95th_Pctl_Phase_Error, array<System::Single>^ Average_Frequency_Error, array<System::Single>^ Average_IQ_Offset, array<System::Single>^ Average_IQ_Imbalance, array<System::Single>^ Average_Amplitude_Imbalance, array<System::Single>^ Average_Phase_Imbalance);
            static int GSM_Fetch_Txquality_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Burst_Type_Check, array<System::Single>^ RMS_Error_Vector_Magnitude_Check, array<System::Single>^ Peak_Error_Vector_Magnitude_Check, array<System::Single>^ _95th_Pctl_Error_Vector_Magnitude_Check, array<System::Single>^ RMS_Magnitude_Error_Check, array<System::Single>^ Peak_Magnitude_Error_Check, array<System::Single>^ _95th_Pctl_Magnitude_Error_Check, array<System::Single>^ RMS_Phase_Error_Check, array<System::Single>^ Peak_Phase_Error_Check, array<System::Single>^ _95th_Pctl_Phase_Error_Check, array<System::Single>^ Frequency_Error_Check, array<System::Single>^ IQ_Offset_Check, array<System::Single>^ IQ_Imbalance_Check, array<System::Single>^ Amplitude_Imbalance_Check, array<System::Single>^ Phase_Imbalance_Check);
            static int GSM_Fetch_Constellation_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Imaginary_Part);
            static int GSM_Fetch_Constellation_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Real_Part);
            static int GSM_Fetch_Txquality_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Burst_Type_High_Limit, array<System::Single>^ RMS_Error_Vector_Magnitude_High_Limit, array<System::Single>^ Peak_Error_Vector_Magnitude_High_Limit, array<System::Single>^ _95th_Pctl_Error_Vector_Magnitude_High_Limit, array<System::Single>^ RMS_Magnitude_Error_High_Limit, array<System::Single>^ Peak_Magnitude_Error_High_Limit, array<System::Single>^ _95th_Pctl_Magnitude_Error_High_Limit, array<System::Single>^ RMS_Phase_Error_High_Limit, array<System::Single>^ Peak_Phase_Error_High_Limit, array<System::Single>^ _95th_Pctl_Phase_Error_High_Limit, array<System::Single>^ Frequency_Error_High_Limit, array<System::Single>^ IQ_Offset_High_Limit, array<System::Single>^ IQ_Imbalance_High_Limit, array<System::Single>^ Amplitude_Imbalance_High_Limit, array<System::Single>^ Phase_Imbalance_High_Limit);
            static int GSM_Fetch_Txquality_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Burst_Type_Low_Limit, array<System::Single>^ RMS_Error_Vector_Magnitude_Low_Limit, array<System::Single>^ Peak_Error_Vector_Magnitude_Low_Limit, array<System::Single>^ _95th_Pctl_Error_Vector_Magnitude_Low_Limit, array<System::Single>^ RMS_Magnitude_Error_Low_Limit, array<System::Single>^ Peak_Magnitude_Error_Low_Limit, array<System::Single>^ _95th_Pctl_Magnitude_Error_Low_Limit, array<System::Single>^ RMS_Phase_Error_Low_Limit, array<System::Single>^ Peak_Phase_Error_Low_Limit, array<System::Single>^ _95th_Pctl_Phase_Error_Low_Limit, array<System::Single>^ Frequency_Error_Low_Limit, array<System::Single>^ IQ_Offset_Low_Limit, array<System::Single>^ IQ_Imbalance_Low_Limit, array<System::Single>^ Amplitude_Imbalance_Low_Limit, array<System::Single>^ Phase_Imbalance_Low_Limit);
            static int GSM_Fetch_Txquality_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Burst_Type_Margin, array<System::Single>^ RMS_Error_Vector_Magnitude_Margin, array<System::Single>^ Peak_Error_Vector_Magnitude_Margin, array<System::Single>^ _95th_Pctl_Error_Vector_Magnitude_Margin, array<System::Single>^ RMS_Magnitude_Error_Margin, array<System::Single>^ Peak_Magnitude_Error_Margin, array<System::Single>^ _95th_Pctl_Magnitude_Error_Margin, array<System::Single>^ RMS_Phase_Error_Margin, array<System::Single>^ Peak_Phase_Error_Margin, array<System::Single>^ _95th_Pctl_Phase_Error_Margin, array<System::Single>^ Frequency_Error_Margin, array<System::Single>^ IQ_Offset_Margin, array<System::Single>^ IQ_Imbalance_Margin, array<System::Single>^ Amplitude_Imbalance_Margin, array<System::Single>^ Phase_Imbalance_Margin);
            static int GSM_Fetch_Txquality_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Burst_Type_Check, array<System::Single>^ Maximum_RMS_Error_Vector_Magnitude_Check, array<System::Single>^ Maximum_Peak_Error_Vector_Magnitude_Check, array<System::Single>^ Maximum_95th_Pctl_Error_Vector_Magnitude_Check, array<System::Single>^ Maximum_RMS_Magnitude_Error_Check, array<System::Single>^ Maximum_Peak_Magnitude_Error_Check, array<System::Single>^ Maximum_95th_Pctl_Magnitude_Error_Check, array<System::Single>^ Maximum_RMS_Phase_Error_Check, array<System::Single>^ Maximum_Peak_Phase_Error_Check, array<System::Single>^ Maximum_95th_Pctl_Phase_Error_Check, array<System::Single>^ Maximum_Frequency_Error_Check, array<System::Single>^ Maximum_IQ_Offset_Check, array<System::Single>^ Maximum_IQ_Imbalance_Check, array<System::Single>^ Maximum_Amplitude_Imbalance_Check, array<System::Single>^ Maximum_Phase_Imbalance_Check);
            static int GSM_Fetch_Txquality_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Burst_Type_Margin, array<System::Single>^ Maximum_RMS_Error_Vector_Magnitude_Margin, array<System::Single>^ Maximum_Peak_Error_Vector_Magnitude_Margin, array<System::Single>^ Maximum_95th_Pctl_Error_Vector_Magnitude_Margin, array<System::Single>^ Maximum_RMS_Magnitude_Error_Margin, array<System::Single>^ Maximum_Peak_Magnitude_Error_Margin, array<System::Single>^ Maximum_95th_Pctl_Magnitude_Error_Margin, array<System::Single>^ Maximum_RMS_Phase_Error_Margin, array<System::Single>^ Maximum_Peak_Phase_Error_Margin, array<System::Single>^ Maximum_95th_Pctl_Phase_Error_Margin, array<System::Single>^ Maximum_Frequency_Error_Margin, array<System::Single>^ Maximum_IQ_Offset_Margin, array<System::Single>^ Maximum_IQ_Imbalance_Margin, array<System::Single>^ Maximum_Amplitude_Imbalance_Margin, array<System::Single>^ Maximum_Phase_Imbalance_Margin);
            static int GSM_Fetch_Txquality_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Burst_Type, array<System::Single>^ Maximum_RMS_Error_Vector_Magnitude, array<System::Single>^ Maximum_Peak_Error_Vector_Magnitude, array<System::Single>^ Maximum_95th_Pctl_Error_Vector_Magnitude, array<System::Single>^ Maximum_RMS_Magnitude_Error, array<System::Single>^ Maximum_Peak_Magnitude_Error, array<System::Single>^ Maximum_95th_Pctl_Magnitude_Error, array<System::Single>^ Maximum_RMS_Phase_Error, array<System::Single>^ Maximum_Peak_Phase_Error, array<System::Single>^ Maximum_95th_Pctl_Phase_Error, array<System::Single>^ Maximum_Frequency_Error, array<System::Single>^ Maximum_IQ_Offset, array<System::Single>^ Maximum_IQ_Imbalance, array<System::Single>^ Maximum_Amplitude_Imbalance, array<System::Single>^ Maximum_Phase_Imbalance);
            static int GSM_Fetch_Pesymbol(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase_Error_versus_Symbol);
            static int GSM_Fetch_Txquality_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GSM_Fetch_Txquality_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Std_of_Burst_Type, array<System::Single>^ Std_of_RMS_Error_Vector_Magnitude, array<System::Single>^ Std_of_Peak_Error_Vector_Magnitude, array<System::Single>^ Std_of_95th_Pctl_Error_Vector_Magnitude, array<System::Single>^ Std_of_RMS_Magnitude_Error, array<System::Single>^ Std_of_Peak_Magnitude_Error, array<System::Single>^ Std_of_95th_Pctl_Magnitude_Error, array<System::Single>^ Std_of_RMS_Phase_Error, array<System::Single>^ Std_of_Peak_Phase_Error, array<System::Single>^ Std_of_95th_Pctl_Phase_Error, array<System::Single>^ Std_of_Frequency_Error, array<System::Single>^ Std_of_IQ_Offset, array<System::Single>^ Std_of_IQ_Imbalance, array<System::Single>^ Std_of_Amplitude_Imbalance, array<System::Single>^ Std_of_Phase_Imbalance);
            static int GSM_Fetch_Txquality(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Burst_Type, array<System::Single>^ RMS_Error_Vector_Magnitude, array<System::Single>^ Peak_Error_Vector_Magnitude, array<System::Single>^ _95th_Pctl_Error_Vector_Magnitude, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ _95th_Pctl_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ _95th_Pctl_Phase_Error, array<System::Single>^ Frequency_Error, array<System::Single>^ IQ_Offset, array<System::Single>^ IQ_Imbalance, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int GSM_Hset_All(int session, Port HW_Module);
            static int GSM_Hset_Frequency_Set(int session, Port HW_Module);
            static int GSM_Hset_Frequency_Get(int session, Port HW_Module, double %Frequency);
            static int GSM_Hset_Rlevel_Set(int session, Port HW_Module);
            static int GSM_Hset_Rlevel_Get(int session, Port HW_Module, double %Reference_Level);
            static int GSM_Mrcl(int session, unsigned int Register_Location);
            static int GSM_Mrst(int session);
            static int GSM_Msav(int session, unsigned int Register_Location);
            static int GSM_Msds(int session, unsigned int Register_Location);
            static int GSM_Strigger_Gap_Set(int session, double Software_Trigger_Gap_Time);
            static int GSM_Strigger_Gap_Get(int session, double %Software_Trigger_Gap_Time);
            static int GSM_Strigger_Level_Set(int session, double Software_Trigger_Level);
            static int GSM_Strigger_Level_Get(int session, double %Software_Trigger_Level);
            static int GSM_Strigger_Offset_Time_Set(int session, double Software_Trigger_Offset_Time);
            static int GSM_Strigger_Offset_Time_Get(int session, double %Software_Trigger_Offset_Time);
            static int GSM_Strigger_Rlevel_Set(int session, double Software_Trigger_Reference_Level);
            static int GSM_Strigger_Rlevel_Auto_Set(int session, bool Software_Trigger_Reference_Level_Mode);
            static int GSM_Strigger_Rlevel_Auto_Get(int session, bool %Software_Trigger_Reference_Level_Mode);
            static int GSM_Strigger_Rlevel_Get(int session, double %Software_Trigger_Reference_Level);
            static int GSM_Strigger_Start_Time_Set(int session, double Software_Trigger_Start_Time);
            static int GSM_Strigger_Start_Time_Get(int session, double %Software_Trigger_Start_Time);
            static int GSM_Strigger_State_Set(int session, bool Software_Trigger_State);
            static int GSM_Strigger_State_Get(int session, bool %Software_Trigger_State);
            static int GSM_Strigger_Timeout_Set(int session, double Software_Trigger_Timeout);
            static int GSM_Strigger_Timeout_Get(int session, double %Software_Trigger_Timeout);
            static int GSM_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



            static int WCDMA_Calculate_Aclr(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Ilpc(int session, unsigned int Slot_offset, unsigned int Slot_count);
            static int WCDMA_Calculate_Power(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Spectrum(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Txquality(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Segment_Aclr(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Segment_Ilpc(int session, unsigned int segment, unsigned int Slot_offset, unsigned int Slot_count);
            static int WCDMA_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int WCDMA_Clear_Aclr(int session);
            static int WCDMA_Clear_All(int session);
            static int WCDMA_Clear_Ilpc(int session);
            static int WCDMA_Clear_Power(int session);
            static int WCDMA_Clear_Spectrum(int session);
            static int WCDMA_Clear_Synchronize(int session);
            static int WCDMA_Clear_Txquality(int session);
            static int WCDMA_Configure_Band_Set(int session, unsigned int Band_number);
            static int WCDMA_Configure_Band_Get(int session, unsigned int %Band_number);
            static int WCDMA_Configure_Dpdch_Set(int session, bool DPDCH_state);
            static int WCDMA_Configure_Dpdch_Get(int session, bool %DPDCH_state);
            static int WCDMA_Configure_Funcertainty_Set(int session, double CFO_uncertainty);
            static int WCDMA_Configure_Funcertainty_Get(int session, double %CFO_uncertainty);
            static int WCDMA_Configure_Ilpc_Algorithm_Set(int session, WCDMA_TPC_mode_Type TPC_algorithm_power_step);
            static int WCDMA_Configure_Ilpc_Algorithm_Get(int session, WCDMA_TPC_mode_Type %TPC_algorithm_power_step);
            static int WCDMA_Configure_Ilpc_Nsegments_Set(int session, unsigned int Number_segment_ILPC);
            static int WCDMA_Configure_Ilpc_Nsegments_Get(int session, unsigned int %Number_segment_ILPC);
            static int WCDMA_Configure_Power_Filter_Set(int session, WCDMA_Filter_Type Power_measurement_filter_type);
            static int WCDMA_Configure_Power_Filter_Get(int session, WCDMA_Filter_Type %Power_measurement_filter_type);
            static int WCDMA_Configure_Power_Moffset_Set(int session, double Power_measurement_offset);
            static int WCDMA_Configure_Power_Moffset_Get(int session, double %Power_measurement_offset);
            static int WCDMA_Configure_Power_Mperiod_Set(int session, double Power_measurement_period);
            static int WCDMA_Configure_Power_Mperiod_Get(int session, double %Power_Measurement_Period);
            static int WCDMA_Configure_Scode_Set(int session, unsigned int Uplink_scrambling_code);
            static int WCDMA_Configure_Scode_Get(int session, unsigned int %Uplink_scrambling_code);
            static int WCDMA_Configure_Sformat_Set(int session, int DPCCH_slot_format);
            static int WCDMA_Configure_Sformat_Get(int session, int %DPCCH_slot_format);
            static int WCDMA_Configure_Standard_Set(int session, Uplink_Type Uplink_configuration);
            static int WCDMA_Configure_Standard_Get(int session, Uplink_Type %Uplink_configuration);
            static int WCDMA_Configure_Synchronize_Offset_Set(int session, double Time_Offset);
            static int WCDMA_Configure_Synchronize_Offset_Get(int session, double %Time_Offset);
            static int WCDMA_Configure_Synchronize_Slot_Set(int session, WCDMA_Slot_Number Slot_number);
            static int WCDMA_Configure_Synchronize_Slot_Get(int session, WCDMA_Slot_Number %Slot_number);
            static int WCDMA_Configure_Txquality_Edmodulation_Set(int session, WCDMA_EDPDCH_Modulation_Type E_DPDCH_modulation_type);
            static int WCDMA_Configure_Txquality_Edmodulation_Get(int session, WCDMA_EDPDCH_Modulation_Type %E_DPDCH_modulation_type);
            static int WCDMA_Configure_Txquality_Mperiod_Set(int session, Meas_Period Modulation_quality_measurement_period);
            static int WCDMA_Configure_Txquality_Mperiod_Get(int session, Meas_Period %Modulation_quality_measurement_period);
            static int WCDMA_Configure_Txquality_Sf_Set(int session, int PCDE_SF);
            static int WCDMA_Configure_Txquality_Sf_Get(int session, int %PCDE_SF);
            static int WCDMA_Configure_Uarfcn_Dl_Set(int session, unsigned int Downlink_UARFCN);
            static int WCDMA_Configure_Uarfcn_Dl_Get(int session, unsigned int %Downlink_UARFCN);
            static int WCDMA_Configure_Uarfcn_Ul_Set(int session, unsigned int Uplink_UARFCN);
            static int WCDMA_Configure_Uarfcn_Ul_Get(int session, unsigned int %Uplink_UARFCN);
            static int WCDMA_Configure_Wave_Buffer_Allocation_Set(int session, unsigned int cell, WCDMA_Buffer_All_Type UE_IR_buffer_allocation_type);
            static int WCDMA_Configure_Wave_Buffer_Allocation_Get(int session, unsigned int cell, WCDMA_Buffer_All_Type %UE_IR_buffer_allocation_type);
            static int WCDMA_Configure_Wave_Dch_Data_Set(int session, unsigned int cell, Bit_Pattern_Type DTCH_data_pattern);
            static int WCDMA_Configure_Wave_Dch_Data_Get(int session, unsigned int cell, Bit_Pattern_Type %DTCH_data_pattern);
            static int WCDMA_Configure_Wave_Dch_Rmchannel_Set(int session, unsigned int cell, Transport_Type RMC_type);
            static int WCDMA_Configure_Wave_Dch_Rmchannel_Get(int session, unsigned int cell, Transport_Type %RMC_type);
            static int WCDMA_Configure_Wave_Dpch_Ccode_Set(int session, unsigned int cell, int DPCH_channel_code);
            static int WCDMA_Configure_Wave_Dpch_Ccode_Get(int session, unsigned int cell, int %DPCH_channel_code);
            static int WCDMA_Configure_Wave_Dpch_Rpower_Set(int session, unsigned int cell, double DPCH_level);
            static int WCDMA_Configure_Wave_Dpch_Rpower_Get(int session, unsigned int cell, double %DPCH_level);
            static int WCDMA_Configure_Wave_Dpch_Set(int session, unsigned int cell, bool DPCH_state);
            static int WCDMA_Configure_Wave_Dpch_Get(int session, unsigned int cell, bool %DPCH_state);
            static int WCDMA_Configure_Wave_Hspdsch_Ccode_Set(int session, unsigned int cell, int Channel_Code_HS_PDSCH);
            static int WCDMA_Configure_Wave_Hspdsch_Ccode_Get(int session, unsigned int cell, int %Channel_Code_HS_PDSCH);
            static int WCDMA_Configure_Wave_Hspdsch_Data_Set(int session, unsigned int cell, Bit_Pattern_Type HS_PDSCH_data_pattern);
            static int WCDMA_Configure_Wave_Hspdsch_Data_Get(int session, unsigned int cell, Bit_Pattern_Type %HS_PDSCH_data_pattern);
            static int WCDMA_Configure_Wave_Hspdsch_Frchannel_Set(int session, unsigned int cell, WCDMA_FRC_Type FRC_type);
            static int WCDMA_Configure_Wave_Hspdsch_Frchannel_Get(int session, unsigned int cell, WCDMA_FRC_Type %FRC_type);
            static int WCDMA_Configure_Wave_Hspdsch_Ntransmission_Set(int session, unsigned int cell, unsigned int Number_transimission);
            static int WCDMA_Configure_Wave_Hspdsch_Ntransmission_Get(int session, unsigned int cell, unsigned int %Number_transimission);
            static int WCDMA_Configure_Wave_Hspdsch_Rpower_Set(int session, unsigned int cell, double HS_PDSCH_level);
            static int WCDMA_Configure_Wave_Hspdsch_Rpower_Get(int session, unsigned int cell, double %HS_PDSCH_level);
            static int WCDMA_Configure_Wave_Hspdsch_Rversion_Get(int session, unsigned int cell, System::String^% RV_sequence);
            static int WCDMA_Configure_Wave_Hspdsch_Set(int session, unsigned int cell, bool HS_PDSCH_state);
            static int WCDMA_Configure_Wave_Hspdsch_Get(int session, unsigned int cell, bool %HS_PDSCH_state);
            static int WCDMA_Configure_Wave_Hspdsch_Usubframe_Set(int session, unsigned int cell, Unscheduled_subframe Unscheduled_subframe);
            static int WCDMA_Configure_Wave_Hspdsch_Usubframe_Get(int session, unsigned int cell, Unscheduled_subframe %Unscheduled_subframe);
            static int WCDMA_Configure_Wave_Hsscch_Ccode_Set(int session, unsigned int cell, unsigned int hsscch, int Channel_Code_HS_SCCH);
            static int WCDMA_Configure_Wave_Hsscch_Ccode_Get(int session, unsigned int cell, unsigned int hsscch, int %Channel_code_HS_SCCH);
            static int WCDMA_Configure_Wave_Hsscch_Dueid_Set(int session, unsigned int cell, unsigned int hsscch, unsigned int Dummy_UE_ID_HS_SCCH);
            static int WCDMA_Configure_Wave_Hsscch_Dueid_Get(int session, unsigned int cell, unsigned int hsscch, unsigned int %Dummy_UE_ID_HS_SCCH);
            static int WCDMA_Configure_Wave_Hsscch_Rpower_Set(int session, unsigned int cell, unsigned int hsscch, double HS_SCCH_level);
            static int WCDMA_Configure_Wave_Hsscch_Rpower_Get(int session, unsigned int cell, unsigned int hsscch, double %HS_SCCH);
            static int WCDMA_Configure_Wave_Hsscch_Set(int session, unsigned int cell, unsigned int hsscch, bool HS_SCCH_state);
            static int WCDMA_Configure_Wave_Hsscch_Get(int session, unsigned int cell, unsigned int hsscch, bool %HS_SCCH_state);
            static int WCDMA_Configure_Wave_Hsscch_Selection_Set(int session, unsigned int cell, int HS_SCCH_carring_UE_ID);
            static int WCDMA_Configure_Wave_Hsscch_Selection_Get(int session, unsigned int cell, int %HS_SCCH_carring_UE_ID);
            static int WCDMA_Configure_Wave_Ocns_Set(int session, unsigned int cell, OCNS_type OCNS_type);
            static int WCDMA_Configure_Wave_Ocns_Get(int session, unsigned int cell, OCNS_type %OCNS_type);
            static int WCDMA_Configure_Wave_Pccpch_Ccode_Get(int session, unsigned int cell, int %P_CCPCH_channel_code);
            static int WCDMA_Configure_Wave_Pccpch_Rpower_Set(int session, unsigned int cell, double P_CCPCH_level);
            static int WCDMA_Configure_Wave_Pccpch_Rpower_Get(int session, unsigned int cell, double %P_CCPCH_level);
            static int WCDMA_Configure_Wave_Pccpch_Set(int session, unsigned int cell, bool P_CCPCH_state);
            static int WCDMA_Configure_Wave_Pccpch_Get(int session, unsigned int cell, bool %P_CCPCH_state);
            static int WCDMA_Configure_Wave_Pcpich_Ccode_Get(int session, unsigned int cell, int %P_CPICH_channel_code);
            static int WCDMA_Configure_Wave_Pcpich_Rpower_Set(int session, unsigned int cell, double P_CPICH_level);
            static int WCDMA_Configure_Wave_Pcpich_Rpower_Get(int session, unsigned int cell, double %P_CPICH_level);
            static int WCDMA_Configure_Wave_Pcpich_Set(int session, unsigned int cell, bool P_CPICH_state);
            static int WCDMA_Configure_Wave_Pcpich_Get(int session, unsigned int cell, bool %P_CPICH_state);
            static int WCDMA_Configure_Wave_Pich_Ccode_Set(int session, unsigned int cell, int PICH_channel_code);
            static int WCDMA_Configure_Wave_Pich_Ccode_Get(int session, unsigned int cell, int %PICH_channel_code);
            static int WCDMA_Configure_Wave_Pich_Rpower_Set(int session, unsigned int cell, double PICH_level);
            static int WCDMA_Configure_Wave_Pich_Rpower_Get(int session, unsigned int cell, double %PICH_level);
            static int WCDMA_Configure_Wave_Pich_Set(int session, unsigned int cell, bool PICH_state);
            static int WCDMA_Configure_Wave_Pich_Get(int session, unsigned int cell, bool %PICH_state);
            static int WCDMA_Configure_Wave_Psch_Rpower_Set(int session, unsigned int cell, double P_SCH_level);
            static int WCDMA_Configure_Wave_Psch_Rpower_Get(int session, unsigned int cell, double %P_SCH_level);
            static int WCDMA_Configure_Wave_Psch_Set(int session, unsigned int cell, bool P_SCH_state);
            static int WCDMA_Configure_Wave_Psch_Get(int session, unsigned int cell, bool %P_SCH_state);
            static int WCDMA_Configure_Wave_Sccpch_Ccode_Set(int session, unsigned int cell, int S_CCPCH_channel_code);
            static int WCDMA_Configure_Wave_Sccpch_Ccode_Get(int session, unsigned int cell, int %S_CCPCH_channel_code);
            static int WCDMA_Configure_Wave_Sccpch_Rpower_Set(int session, unsigned int cell, double S_CCPCH_level);
            static int WCDMA_Configure_Wave_Sccpch_Rpower_Get(int session, unsigned int cell, double %S_CCPCH_level);
            static int WCDMA_Configure_Wave_Sccpch_Sformat_Set(int session, unsigned int cell, int S_CCPCH_slot_format);
            static int WCDMA_Configure_Wave_Sccpch_Sformat_Get(int session, unsigned int cell, int %S_CCPCH_slot_format);
            static int WCDMA_Configure_Wave_Sccpch_Set(int session, unsigned int cell, bool S_CCPCH_state);
            static int WCDMA_Configure_Wave_Sccpch_Get(int session, unsigned int cell, bool %S_CCPCH_state);
            static int WCDMA_Configure_Wave_Scode_Primary_Set(int session, unsigned int cell, int Downlink_primary_scrambling_code);
            static int WCDMA_Configure_Wave_Scode_Primary_Get(int session, unsigned int cell, int %Downlink_primary_scrambling_code);
            static int WCDMA_Configure_Wave_Scode_Secondary_Set(int session, unsigned int cell, int Downlink_secondary_scrambling_code);
            static int WCDMA_Configure_Wave_Scode_Secondary_Get(int session, unsigned int cell, int %Downlink_secondary_scrambling_code);
            static int WCDMA_Configure_Wave_Scpich_Ccode_Set(int session, unsigned int cell, int S_CPICH_channel_code);
            static int WCDMA_Configure_Wave_Scpich_Ccode_Get(int session, unsigned int cell, int %S_CPICH_channel_code);
            static int WCDMA_Configure_Wave_Scpich_Rpower_Set(int session, unsigned int cell, double S_CPICH_level);
            static int WCDMA_Configure_Wave_Scpich_Rpower_Get(int session, unsigned int cell, double %S_CPICH_level);
            static int WCDMA_Configure_Wave_Scpich_Set(int session, unsigned int cell, bool S_CPICH_state);
            static int WCDMA_Configure_Wave_Scpich_Get(int session, unsigned int cell, bool %S_CPICH_state);
            static int WCDMA_Configure_Wave_Ssch_Rpower_Set(int session, unsigned int cell, double S_SCH_level);
            static int WCDMA_Configure_Wave_Ssch_Rpower_Get(int session, unsigned int cell, double %S_SCH_level);
            static int WCDMA_Configure_Wave_Ssch_Set(int session, unsigned int cell, bool S_SCH_state);
            static int WCDMA_Configure_Wave_Ssch_Get(int session, unsigned int cell, bool %S_SCH_state);
            static int WCDMA_Configure_Wave_Tpc_Command_Set(int session, unsigned int cell, TPC_Pattern_Type TPC_command);
            static int WCDMA_Configure_Wave_Tpc_Command_Get(int session, unsigned int cell, TPC_Pattern_Type %TPC_command);
            static int WCDMA_Configure_Wave_Tpc_Pattern_Get(int session, unsigned int cell, System::String^% User_specified_TPC_pattern);
            static int WCDMA_Configure_Wave_Tpower_Set(int session, unsigned int cell, int UE_target_power);
            static int WCDMA_Configure_Wave_Tpower_Get(int session, unsigned int cell, int %UE_target_power);
            static int WCDMA_Configure_Wave_Ueid_Set(int session, unsigned int cell, unsigned int UE_ID);
            static int WCDMA_Configure_Wave_Ueid_Get(int session, unsigned int cell, unsigned int %UE_ID);
            static int WCDMA_Configure_Wave_Nframes_Set(int session, int Waveform_length);
            static int WCDMA_Configure_Wave_Nframes_Get(int session, int %Waveform_length);
            static int WCDMA_Configure_Wave_Standard_Set(int session, Downlink_Type Downlink_configuration);
            static int WCDMA_Configure_Wave_Standard_Get(int session, Downlink_Type %Downlink_configuration);
            static int WCDMA_Fetch_Aclr_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_ACLR_absolute);
            static int WCDMA_Fetch_Aclr_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Maximum_ACLR_absolute);
            static int WCDMA_Fetch_Aclr_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ ACLR_absolute);
            static int WCDMA_Fetch_Aclr_Relative_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Average_relative_ACLR_check);
            static int WCDMA_Fetch_Aclr_Relative_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_relative_ACLR_margin);
            static int WCDMA_Fetch_Aclr_Relative_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_ACLR_relative);
            static int WCDMA_Fetch_Aclr_Relative_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Relative_ACLR_check);
            static int WCDMA_Fetch_Aclr_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Relative_ACLR_high_limit);
            static int WCDMA_Fetch_Aclr_Relative_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Relative_ACLR_margin);
            static int WCDMA_Fetch_Aclr_Relative_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Maximum_relative_ACLR_check);
            static int WCDMA_Fetch_Aclr_Relative_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Margin_maximum_relative_ACLR);
            static int WCDMA_Fetch_Aclr_Relative_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Maximum_ACLR_relative);
            static int WCDMA_Fetch_Aclr_Relative(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ ACLR_Relative);
            static int WCDMA_Fetch_Aclr_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int WCDMA_Fetch_Ilpc_Absolute_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ ILPC_absolute_upper_Limit);
            static int WCDMA_Fetch_Ilpc_Absolute_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ ILPC_absolute_lower_Limit);
            static int WCDMA_Fetch_Ilpc_Power_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ ILPC_check);
            static int WCDMA_Fetch_Ilpc_Power(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ ILPC_power);
            static int WCDMA_Fetch_Ilpc_Psts_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Power_step_ten_consecutive_slot_check);
            static int WCDMA_Fetch_Ilpc_Psts_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Margin_power_step_ten_consecutive_slot);
            static int WCDMA_Fetch_Ilpc_Psts(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Power_step_ten_consecutive_slot);
            static int WCDMA_Fetch_Ilpc_Pstep_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Power_step_adjacent_slot_check);
            static int WCDMA_Fetch_Ilpc_Pstep_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Margin_power_step_adjacent_slot);
            static int WCDMA_Fetch_Ilpc_Pstep(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Power_step_adjacent_slot);
            static int WCDMA_Fetch_Ilpc_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ ILPC_relative_upper_limit);
            static int WCDMA_Fetch_Ilpc_Relative_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ ILPC_relative_lower_limit);
            static int WCDMA_Fetch_Power_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Average_power_check);
            static int WCDMA_Fetch_Power_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power_margin);
            static int WCDMA_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power);
            static int WCDMA_Fetch_Power_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Average_power_check);
            static int WCDMA_Fetch_Power_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power_high_limit);
            static int WCDMA_Fetch_Power_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power_low_limit);
            static int WCDMA_Fetch_Power_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power_margin);
            static int WCDMA_Fetch_Power_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Maximum_power_check);
            static int WCDMA_Fetch_Power_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Maximum_power_margin);
            static int WCDMA_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Maximum_Power);
            static int WCDMA_Fetch_Power_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Minimum_power_check);
            static int WCDMA_Fetch_Power_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Minimum_power_margin);
            static int WCDMA_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Minimum_power);
            static int WCDMA_Fetch_Power_Peak_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Peak_average_power);
            static int WCDMA_Fetch_Power_Peak_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Peak_maximum_power);
            static int WCDMA_Fetch_Power_Peak_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Peak_minimum_power);
            static int WCDMA_Fetch_Power_Peak_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Standard_deviation_peak_power);
            static int WCDMA_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Peak_power);
            static int WCDMA_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int WCDMA_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Standard_deviation_power);
            static int WCDMA_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_power_per_measurement_period);
            static int WCDMA_Fetch_Spectrum_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_spectrum);
            static int WCDMA_Fetch_Spectrum_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Maximum_spectrum);
            static int WCDMA_Fetch_Obw_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Average_OBW_check);
            static int WCDMA_Fetch_Obw_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Average_OBW_margin);
            static int WCDMA_Fetch_Obw_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ OBW, array<System::Single>^ Percentage_total_power);
            static int WCDMA_Fetch_Obw_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ OBW_check);
            static int WCDMA_Fetch_Obw_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ OBW_high_limit);
            static int WCDMA_Fetch_Obw_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ OBW_margin);
            static int WCDMA_Fetch_Obw_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ Maximum_OBW_check);
            static int WCDMA_Fetch_Obw_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Maximum_OBW_margin);
            static int WCDMA_Fetch_Obw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ OBW, array<System::Single>^ Percentage_total_power);
            static int WCDMA_Fetch_Obw(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ OBW, array<System::Single>^ Percentage_total_power);
            static int WCDMA_Fetch_Spectrum_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Offset_frequencies);
            static int WCDMA_Fetch_Spectrum_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int WCDMA_Fetch_Sem_Absolute_Llimit_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Frequency_offset_SEM_absolute_lower_limits);
            static int WCDMA_Fetch_Sem_Absolute_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ SEM_absolute_lower_limits);
            static int WCDMA_Fetch_Sem_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Average_SEM_check);
            static int WCDMA_Fetch_Sem_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_SEM_margin);
            static int WCDMA_Fetch_Sem_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Average_SEM);
            static int WCDMA_Fetch_Sem_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ SEM_check);
            static int WCDMA_Fetch_Sem_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ SEM_margin);
            static int WCDMA_Fetch_Sem_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Int32>^ >^ Maximum_SEM_check);
            static int WCDMA_Fetch_Sem_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Maximum_SEM_margin);
            static int WCDMA_Fetch_Sem_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Maximum_SEM);
            static int WCDMA_Fetch_Sem_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int WCDMA_Fetch_Sem_Relative_Hlimit_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Frequency_offset_SEM_relative_upper_limit);
            static int WCDMA_Fetch_Sem_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ SEM_relative_upper_limit);
            static int WCDMA_Fetch_Sem(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ SEM_spectrum);
            static int WCDMA_Fetch_Spectrum(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Spectrum);
            static int WCDMA_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Time_Offset, array<System::Int32>^ Synchronized_Slot);
            static int WCDMA_Fetch_Txquality_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ RMS_EVM_Verdict, array<System::Int32>^ Peak_EVM_Verdict, array<System::Int32>^ RMS_Magnitude_Error_Verdict, array<System::Int32>^ Peak_Magnitude_Error__Verdict, array<System::Int32>^ RMS_Phase_Error_Verdict, array<System::Int32>^ Peak_Phase_Error_Verdict, array<System::Int32>^ Carrier_Frequency_Offset_Verdict, array<System::Int32>^ rho_Verdict, array<System::Int32>^ I_Q_Offset_Verdict, array<System::Int32>^ I_Q_Imbalance_Verdict, array<System::Int32>^ Phase_Discontinuity_Verdict, array<System::Int32>^ Peak_Code_Domain_Error_Verdict);
            static int WCDMA_Fetch_Txquality_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ RMS_EVM_Margin, array<System::Single>^ Peak_EVM_Margin, array<System::Single>^ RMS_Magnitude_Error_Margin, array<System::Single>^ Peak_Magnitude_Error__Margin, array<System::Single>^ RMS_Phase_Error_Margin, array<System::Single>^ Peak_Phase_Error_Margin, array<System::Single>^ Carrier_Frequency_Offset_Margin, array<System::Single>^ rho_Margin, array<System::Single>^ I_Q_Offset_Margin, array<System::Single>^ I_Q_Imbalance_Margin, array<System::Single>^ Phase_Discontinuity_Margin, array<System::Single>^ Peak_Code_Domain_Error_Margin);
            static int WCDMA_Fetch_Txquality_Average(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM, array<System::Single>^ Peak_EVM, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ Carrier_Frequency_Offset, array<System::Single>^ rho, array<System::Single>^ I_Q_Offset, array<System::Single>^ I_Q_Imbalance, array<System::Single>^ Phase_Discontinuity, array<System::Single>^ Peak_Code_Domain_Error);
            static int WCDMA_Fetch_Txquality_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ RMS_EVM_Verdict, array<System::Int32>^ Peak_EVM_Verdict, array<System::Int32>^ RMS_Magnitude_Error_Verdict, array<System::Int32>^ Peak_Magnitude_Error__Verdict, array<System::Int32>^ RMS_Phase_Error_Verdict, array<System::Int32>^ Peak_Phase_Error_Verdict, array<System::Int32>^ Carrier_Frequency_Offset_Verdict, array<System::Int32>^ rho_Verdict, array<System::Int32>^ I_Q_Offset_Verdict, array<System::Int32>^ I_Q_Imbalance_Verdict, array<System::Int32>^ Phase_Discontinuity_Verdict, array<System::Int32>^ Peak_Code_Domain_Error_Verdict);
            static int WCDMA_Fetch_Data_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Constellation_Rx_imaginary);
            static int WCDMA_Fetch_Data_Real(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Constellation_Rx_real);
            static int WCDMA_Fetch_Evm(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM_trace);
            static int WCDMA_Fetch_Evmchip(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ EVM_vs_chip_trace);
            static int WCDMA_Fetch_Ferror(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Freq_error_trace);
            static int WCDMA_Fetch_Txquality_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM_High_Limit, array<System::Single>^ Peak_EVM_High_Limit, array<System::Single>^ RMS_Magnitude_Error_High_Limit, array<System::Single>^ Peak_Magnitude_Error__High_Limit, array<System::Single>^ RMS_Phase_Error_High_Limit, array<System::Single>^ Peak_Phase_Error_High_Limit, array<System::Single>^ Carrier_Frequency_Offset_High_Limit, array<System::Single>^ rho_High_Limit, array<System::Single>^ I_Q_Offset_High_Limit, array<System::Single>^ I_Q_Imbalance_High_Limit, array<System::Single>^ Phase_Discontinuity_High_Limit, array<System::Single>^ Peak_Code_Domain_Error_High_Limit);
            static int WCDMA_Fetch_Txquality_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM_Low_Limit, array<System::Single>^ Peak_EVM_Low_Limit, array<System::Single>^ RMS_Magnitude_Error_Low_Limit, array<System::Single>^ Peak_Magnitude_Error__Low_Limit, array<System::Single>^ RMS_Phase_Error_Low_Limit, array<System::Single>^ Peak_Phase_Error_Low_Limit, array<System::Single>^ Carrier_Frequency_Offset_Low_Limit, array<System::Single>^ rho_Low_Limit, array<System::Single>^ I_Q_Offset_Low_Limit, array<System::Single>^ I_Q_Imbalance_Low_Limit, array<System::Single>^ Phase_Discontinuity_Low_Limit, array<System::Single>^ Peak_Code_Domain_Error_Low_Limit);
            static int WCDMA_Fetch_Txquality_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM_Margin, array<System::Single>^ Peak_EVM_Margin, array<System::Single>^ RMS_Magnitude_Error_Margin, array<System::Single>^ Peak_Magnitude_Error__Margin, array<System::Single>^ RMS_Phase_Error_Margin, array<System::Single>^ Peak_Phase_Error_Margin, array<System::Single>^ Carrier_Frequency_Offset_Margin, array<System::Single>^ rho_Margin, array<System::Single>^ I_Q_Offset_Margin, array<System::Single>^ I_Q_Imbalance_Margin, array<System::Single>^ Phase_Discontinuity_Margin, array<System::Single>^ Peak_Code_Domain_Error_Margin);
            static int WCDMA_Fetch_Txquality_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Int32>^ RMS_EVM_Verdict, array<System::Int32>^ Peak_EVM_Verdict, array<System::Int32>^ RMS_Magnitude_Error_Verdict, array<System::Int32>^ Peak_Magnitude_Error__Verdict, array<System::Int32>^ RMS_Phase_Error_Verdict, array<System::Int32>^ Peak_Phase_Error_Verdict, array<System::Int32>^ Carrier_Frequency_Offset_Verdict, array<System::Int32>^ rho_Verdict, array<System::Int32>^ I_Q_Offset_Verdict, array<System::Int32>^ I_Q_Imbalance_Verdict, array<System::Int32>^ Phase_Discontinuity_Verdict, array<System::Int32>^ Peak_Code_Domain_Error_Verdict);
            static int WCDMA_Fetch_Txquality_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM_Margin, array<System::Single>^ Peak_EVM_Margin, array<System::Single>^ RMS_Magnitude_Error_Margin, array<System::Single>^ Peak_Magnitude_Error__Margin, array<System::Single>^ RMS_Phase_Error_Margin, array<System::Single>^ Peak_Phase_Error_Margin, array<System::Single>^ Carrier_Frequency_Offset_Margin, array<System::Single>^ rho_Margin, array<System::Single>^ I_Q_Offset_Margin, array<System::Single>^ I_Q_Imbalance_Margin, array<System::Single>^ Phase_Discontinuity_Margin, array<System::Single>^ Peak_Code_Domain_Error_Margin);
            static int WCDMA_Fetch_Txquality_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM, array<System::Single>^ Peak_EVM, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ Carrier_Frequency_Offset, array<System::Single>^ rho, array<System::Single>^ I_Q_Offset, array<System::Single>^ I_Q_Imbalance, array<System::Single>^ Phase_Discontinuity, array<System::Single>^ Peak_Code_Domain_Error);
            static int WCDMA_Fetch_Mechip(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Magnitude_error_vs_chip_trace);
            static int WCDMA_Fetch_Merror(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Magnitude_error_trace);
            static int WCDMA_Fetch_Pdiscont(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Phase_discontinuity_trace);
            static int WCDMA_Fetch_Pechip(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Phase_error_vs_chip_trace);
            static int WCDMA_Fetch_Perror(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ Phase_error_trace);
            static int WCDMA_Fetch_Rs_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Constellation_reference_imaginary);
            static int WCDMA_Fetch_Rs_Real(int session, unsigned int segment, array<System::Int32>^ Status_code, array< array<System::Single>^ >^ Constellation_reference_real);
            static int WCDMA_Fetch_Txquality_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int WCDMA_Fetch_Txquality_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM, array<System::Single>^ Peak_EVM, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ Carrier_Frequency_Offset, array<System::Single>^ rho, array<System::Single>^ I_Q_Offset, array<System::Single>^ I_Q_Imbalance, array<System::Single>^ Phase_Discontinuity, array<System::Single>^ Peak_Code_Domain_Error);
            static int WCDMA_Fetch_Txquality(int session, unsigned int segment, array<System::Int32>^ Status_code, array<System::Single>^ RMS_EVM, array<System::Single>^ Peak_EVM, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ Carrier_Frequency_Offset, array<System::Single>^ rho, array<System::Single>^ I_Q_Offset, array<System::Single>^ I_Q_Imbalance, array<System::Single>^ Phase_Discontinuity, array<System::Single>^ Peak_Code_Domain_Error);
            static int WCDMA_Hset_All(int session, Port HW_Module);
            static int WCDMA_Hset_Frequency_Set(int session, Port HW_Module);
            static int WCDMA_Hset_Frequency_Get(int session, Port HW_Module, double %Frequency);
            static int WCDMA_Mrcl(int session, unsigned int Register_Location);
            static int WCDMA_Mrst(int session);
            static int WCDMA_Msav(int session, unsigned int Register_Location);
            static int WCDMA_Msds(int session, unsigned int Register_Location);
            static int WCDMA_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



            static int CDMA2K_Calculate_Power(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Calculate_Spectrum(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Calculate_Txquality(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int CDMA2K_Clear_All(int session);
            static int CDMA2K_Clear_Power(int session);
            static int CDMA2K_Clear_Spectrum(int session);
            static int CDMA2K_Clear_Synchronize(int session);
            static int CDMA2K_Clear_Txquality(int session);
            static int CDMA2K_Configure_Ackch_Set(int session, bool Set_ACKCH_on_or_off);
            static int CDMA2K_Configure_Ackch_Get(int session, bool %Status_of_ACKCH_on_or_off);
            static int CDMA2K_Configure_Apch_Set(int session, bool Set_Auxiliary_Pilot_CH_on_or_off);
            static int CDMA2K_Configure_Apch_Get(int session, bool %Status_of_Auxiliary_Pilot_CH_on_or_off);
            static int CDMA2K_Configure_Appratio_Set(int session, double Aux_Pilot_to_Pilot_power_Ratio);
            static int CDMA2K_Configure_Appratio_Get(int session, double %Aux_Pilot_to_Pilot_power_Ratio);
            static int CDMA2K_Configure_Band_Set(int session, unsigned int Band_Number);
            static int CDMA2K_Configure_Band_Get(int session, unsigned int %Band_Number);
            static int CDMA2K_Configure_Ccch_Set(int session, bool Set_CCCH_on_or_off);
            static int CDMA2K_Configure_Ccch_Get(int session, bool %Status_of_CCCH_on_or_off);
            static int CDMA2K_Configure_Ccdtype_Set(int session, CDMA2K_CCD_Type Code_Channel_Detection_Type);
            static int CDMA2K_Configure_Ccdtype_Get(int session, CDMA2K_CCD_Type %Code_Channel_Detection_Type);
            static int CDMA2K_Configure_Ccpthreshold_Set(int session, double Auto_Detection_Threshold_in_dBc);
            static int CDMA2K_Configure_Ccpthreshold_Get(int session, double %Auto_Detection_Threshold_in_dBc);
            static int CDMA2K_Configure_Channel_Set(int session, unsigned int Channel_Number);
            static int CDMA2K_Configure_Channel_Get(int session, unsigned int %Channel_Number);
            static int CDMA2K_Configure_Cqich_Set(int session, bool Set_CQICH_on_or_off);
            static int CDMA2K_Configure_Cqich_Get(int session, bool %Status_of_CQICH_on_or_off);
            static int CDMA2K_Configure_Cstreference_Set(int session, double CDMA_System_Time_Reference);
            static int CDMA2K_Configure_Cstreference_Htmode_Set(int session, CDMA2K_Time_HW_Timemode CSTR_Hardware_Time_Mode);
            static int CDMA2K_Configure_Cstreference_Htmode_Get(int session, CDMA2K_Time_HW_Timemode %CSTR_Hardware_Time_Mode);
            static int CDMA2K_Configure_Cstreference_Get(int session, double %CDMA_System_Time_Reference);
            static int CDMA2K_Configure_Ctxspurious_Foffset_Get(int session, array<System::Double>^ Freq_Offset_Hz);
            static int CDMA2K_Configure_Dcch_Set(int session, bool Set_DCCH_on_or_off);
            static int CDMA2K_Configure_Dcch_Get(int session, bool %Status_of_DCCH_on_or_off);
            static int CDMA2K_Configure_Dchannel_Set(int session, bool Set_DATACH_on_or_off);
            static int CDMA2K_Configure_Dchannel_Get(int session, bool %Status_of_DATACH_on_or_off);
            static int CDMA2K_Configure_Drcch_Set(int session, bool Set_DRCCH_on_or_off);
            static int CDMA2K_Configure_Drcch_Get(int session, bool %Status_of_DRCCH_on_or_off);
            static int CDMA2K_Configure_Fch_Set(int session, bool Set_FCH_on_or_off);
            static int CDMA2K_Configure_Fch_Get(int session, bool %Status_of_FCH_on_or_off);
            static int CDMA2K_Configure_Funcertainty_Set(int session, double Freq_Offset_Search_Range_in_Hz);
            static int CDMA2K_Configure_Funcertainty_Get(int session, double %Freq_Offset_Search_Range_in_Hz);
            static int CDMA2K_Configure_Iqswap_Set(int session, bool Set_IQ_Swap_on_or_off);
            static int CDMA2K_Configure_Iqswap_Get(int session, bool %Status_of_IQ_Swap_on_or_off);
            static int CDMA2K_Configure_Lcmask_I_Set(int session, unsigned long long LCM_I_CH);
            static int CDMA2K_Configure_Lcmask_I_Get(int session, unsigned long long %LCM_I_CH);
            static int CDMA2K_Configure_Lcmask_Q_Set(int session, unsigned long long LCM_Q_CH);
            static int CDMA2K_Configure_Lcmask_Q_Get(int session, unsigned long long %LCM_Q_CH);
            static int CDMA2K_Configure_Mcachannel_Set(int session, unsigned int Multi_Carrier_Active_Channel_number);
            static int CDMA2K_Configure_Mcachannel_Get(int session, unsigned int %Multi_Carrier_Active_Channel_number);
            static int CDMA2K_Configure_Mcmode_Mcfseparation_Set(int session, double MCMode_Minimum_Carrier_Frequency_Separation_Hz);
            static int CDMA2K_Configure_Mcmode_Mcfseparation_Get(int session, double %MCMode_Minimum_Carrier_Frequency_Separation_Hz);
            static int CDMA2K_Configure_Mcmode_Set(int session, bool Set_multicarrier_mode_on_or_off);
            static int CDMA2K_Configure_Mcmode_Get(int session, bool %Status_of_multicarrier_mode_on_or_off);
            static int CDMA2K_Configure_Pich_Set(int session, bool Set_PICH_on_or_off);
            static int CDMA2K_Configure_Pich_Get(int session, bool %Status_of_PICH_on_or_off);
            static int CDMA2K_Configure_Power_Filter_Set(int session, CDMA2K_Filter_Type CDMA2K_Power_measurement_filter_type);
            static int CDMA2K_Configure_Power_Filter_Get(int session, CDMA2K_Filter_Type %CDMA2K_Power_measurement_filter_type);
            static int CDMA2K_Configure_Power_Mperiod_Set(int session, SLOT2 Power_Measurement_Period);
            static int CDMA2K_Configure_Power_Mperiod_Get(int session, SLOT2 %Power_Measurement_Period);
            static int CDMA2K_Configure_Power_Sbdlength_Set(int session, double Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Power_Sbdlength_Get(int session, double %Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Rrich_Set(int session, bool Set_RRICH_on_or_off);
            static int CDMA2K_Configure_Rrich_Get(int session, bool %Status_of_RRICH_on_or_off);
            static int CDMA2K_Configure_Sch1_Set(int session, bool Set_SCH1_on_or_off);
            static int CDMA2K_Configure_Sch1_Get(int session, bool %Status_of_SCH1_on_or_off);
            static int CDMA2K_Configure_Sch1_Wclength_Set(int session, int Walsh_length_used_in_SCH1);
            static int CDMA2K_Configure_Sch1_Wclength_Get(int session, int %Walsh_length_used_in_SCH1);
            static int CDMA2K_Configure_Sch2_Set(int session, bool Set_SCH2_on_or_off);
            static int CDMA2K_Configure_Sch2_Get(int session, bool %Status_of_SCH2_on_or_off);
            static int CDMA2K_Configure_Sch2_Wclength_Set(int session, int Walsh_length_used_in_SCH2);
            static int CDMA2K_Configure_Sch2_Wclength_Get(int session, int %Walsh_length_used_in_SCH2);
            static int CDMA2K_Configure_Spectrum_Mperiod_Set(int session, SLOT2 Spectrum_Measurement_Period);
            static int CDMA2K_Configure_Spectrum_Mperiod_Get(int session, SLOT2 %Spectrum_Measurement_Period);
            static int CDMA2K_Configure_Spectrum_Sbdlength_Set(int session, double Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Spectrum_Sbdlength_Get(int session, double %Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Standard_Set(int session, CDMA2K_Conf Standard_Type);
            static int CDMA2K_Configure_Standard_Get(int session, CDMA2K_Conf %Standard_Type);
            static int CDMA2K_Configure_Synchronize_Offset_Set(int session, double Time_Offset);
            static int CDMA2K_Configure_Synchronize_Offset_Get(int session, double %Time_Offset);
            static int CDMA2K_Configure_Synchronize_Srange_Set(int session, double Search_Range_in_Time);
            static int CDMA2K_Configure_Synchronize_Srange_Get(int session, double %Search_Range_in_Time);
            static int CDMA2K_Configure_Txquality_Mperiod_Set(int session, Meas_Period_C2K TX_Quality_Measurement_Period);
            static int CDMA2K_Configure_Txquality_Mperiod_Get(int session, Meas_Period_C2K %TX_Quality_Measurement_Period);
            static int CDMA2K_Configure_Txquality_Sbdlength_Set(int session, double Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Txquality_Sbdlength_Get(int session, double %Skip_Boundry_Data_Length_Sec);
            static int CDMA2K_Configure_Wave_Channel_Set(int session, unsigned int Channel_Number);
            static int CDMA2K_Configure_Wave_Channel_Get(int session, unsigned int %Channel_Number);
            static int CDMA2K_Configure_Wave_Data_Rate_Set(int session, CDMA2K_Data_Rate Data_Rate);
            static int CDMA2K_Configure_Wave_Data_Rate_Get(int session, CDMA2K_Data_Rate %Data_Rate);
            static int CDMA2K_Configure_Wave_Drc_Set(int session, int PN_Offset);
            static int CDMA2K_Configure_Wave_Drc_Get(int session, int %PN_Offset);
            static int CDMA2K_Configure_Wave_Fdcch_Set(int session, bool On_Off);
            static int CDMA2K_Configure_Wave_Fdcch_Get(int session, bool %On_Off);
            static int CDMA2K_Configure_Wave_Ffch_Set(int session, bool On_Off);
            static int CDMA2K_Configure_Wave_Ffch_Get(int session, bool %On_Off);
            static int CDMA2K_Configure_Wave_Fpich_Set(int session, bool On_Off);
            static int CDMA2K_Configure_Wave_Fpich_Get(int session, bool %On_Off);
            static int CDMA2K_Configure_Wave_Fsch_Set(int session, bool On_Off);
            static int CDMA2K_Configure_Wave_Fsch_Get(int session, bool %On_Off);
            static int CDMA2K_Configure_Wave_Fsync_Set(int session, bool On_Off);
            static int CDMA2K_Configure_Wave_Fsync_Get(int session, bool %On_Off);
            static int CDMA2K_Configure_Wave_Length_Get(int session, double %Simulation_time_in_sec);
            static int CDMA2K_Configure_Wave_Level_Fdcch_Set(int session, double Downlink_Level_FDCCH);
            static int CDMA2K_Configure_Wave_Level_Fdcch_Get(int session, double %Downlink_Level_FDCCH);
            static int CDMA2K_Configure_Wave_Level_Ffch_Set(int session, double Downlink_Level_FFCH);
            static int CDMA2K_Configure_Wave_Level_Ffch_Get(int session, double %Downlink_Level_FFCH);
            static int CDMA2K_Configure_Wave_Level_Fpich_Set(int session, double Downlink_Level_FPICH);
            static int CDMA2K_Configure_Wave_Level_Fpich_Get(int session, double %Downlink_Level_FPICH);
            static int CDMA2K_Configure_Wave_Level_Fsch_Set(int session, double Downlink_Level_FSCH);
            static int CDMA2K_Configure_Wave_Level_Fsch_Get(int session, double %Downlink_Level_FSCH);
            static int CDMA2K_Configure_Wave_Level_Fsync_Set(int session, double Downlink_Level_FSYNC);
            static int CDMA2K_Configure_Wave_Level_Fsync_Get(int session, double %Downlink_Level_FSYNC);
            static int CDMA2K_Configure_Wave_Macindex_Set(int session, int PN_Offset);
            static int CDMA2K_Configure_Wave_Macindex_Get(int session, int %PN_Offset);
            static int CDMA2K_Configure_Wave_Pnoffset_Set(int session, int PN_Offset);
            static int CDMA2K_Configure_Wave_Pnoffset_Get(int session, int %PN_Offset);
            static int CDMA2K_Configure_Wave_Rconfig_Set(int session, int Radio_Configuration);
            static int CDMA2K_Configure_Wave_Rconfig_Get(int session, int %Radio_Configuration);
            static int CDMA2K_Configure_Wave_Rpc_Set(int session, CDMA2K_RPC_Type AllUp_AllDown);
            static int CDMA2K_Configure_Wave_Rpc_Pattern_Get(int session, System::String^% User_specified_RPC_pattern);
            static int CDMA2K_Configure_Wave_Rpc_Get(int session, CDMA2K_RPC_Type %AllUp_AllDown);
            static int CDMA2K_Configure_Wave_Standard_Set(int session, CDMA2K_Conf Standard_Type);
            static int CDMA2K_Configure_Wave_Standard_Get(int session, CDMA2K_Conf %Standard_Type);
            static int CDMA2K_Fetch_Power_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Power_Check);
            static int CDMA2K_Fetch_Power_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Power_Margin);
            static int CDMA2K_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Power);
            static int CDMA2K_Fetch_Power_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Power_Check);
            static int CDMA2K_Fetch_Power_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ high_Power_Limit);
            static int CDMA2K_Fetch_Power_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Low_Power_Limit);
            static int CDMA2K_Fetch_Power_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_Margin);
            static int CDMA2K_Fetch_Power_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Power_Check);
            static int CDMA2K_Fetch_Power_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Power_Margin);
            static int CDMA2K_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Power);
            static int CDMA2K_Fetch_Power_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Minimum_Power_Check);
            static int CDMA2K_Fetch_Power_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Power_Margin);
            static int CDMA2K_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Power);
            static int CDMA2K_Fetch_Power_Peak_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Peak_Power_Check);
            static int CDMA2K_Fetch_Power_Peak_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Power_Margin);
            static int CDMA2K_Fetch_Power_Peak_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Power);
            static int CDMA2K_Fetch_Power_Peak_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Peak_Power_Check);
            static int CDMA2K_Fetch_Power_Peak_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ high_Peak_Power_Limit);
            static int CDMA2K_Fetch_Power_Peak_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Low_Peak_Power_Limit);
            static int CDMA2K_Fetch_Power_Peak_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Power_Margin);
            static int CDMA2K_Fetch_Power_Peak_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Peak_Power_Check);
            static int CDMA2K_Fetch_Power_Peak_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Power_Margin);
            static int CDMA2K_Fetch_Power_Peak_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Power);
            static int CDMA2K_Fetch_Power_Peak_Minimum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Minimum_Peak_Power_Check);
            static int CDMA2K_Fetch_Power_Peak_Minimum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Peak_Power_Margin);
            static int CDMA2K_Fetch_Power_Peak_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Peak_Power);
            static int CDMA2K_Fetch_Power_Peak_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Peak_Power);
            static int CDMA2K_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Power);
            static int CDMA2K_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int CDMA2K_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Power);
            static int CDMA2K_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int CDMA2K_Fetch_Aclr_Absolute_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Average_ACP_Check);
            static int CDMA2K_Fetch_Aclr_Absolute_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_ACP_Margin);
            static int CDMA2K_Fetch_Aclr_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_ACP);
            static int CDMA2K_Fetch_Aclr_Absolute_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACP_Check);
            static int CDMA2K_Fetch_Aclr_Absolute_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP_High_Limit);
            static int CDMA2K_Fetch_Aclr_Absolute_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP_Margin);
            static int CDMA2K_Fetch_Aclr_Absolute_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Maximum_ACP_Check);
            static int CDMA2K_Fetch_Aclr_Absolute_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_ACP_Margin);
            static int CDMA2K_Fetch_Aclr_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_ACP);
            static int CDMA2K_Fetch_Aclr_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP);
            static int CDMA2K_Fetch_Aclr_Coffset(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Channel_Offsets);
            static int CDMA2K_Fetch_Aclr_Relative_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Average_ACLR_check);
            static int CDMA2K_Fetch_Aclr_Relative_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_ACLR_Margin);
            static int CDMA2K_Fetch_Aclr_Relative_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_ACLR);
            static int CDMA2K_Fetch_Aclr_Relative_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACLR_check);
            static int CDMA2K_Fetch_Aclr_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACLR_High_Limit);
            static int CDMA2K_Fetch_Aclr_Relative_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACLR_Margin);
            static int CDMA2K_Fetch_Aclr_Relative_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Maximum_ACLR_check);
            static int CDMA2K_Fetch_Aclr_Relative_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_ACLR_Margin);
            static int CDMA2K_Fetch_Aclr_Relative_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_ACLR);
            static int CDMA2K_Fetch_Aclr_Relative(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACLR);
            static int CDMA2K_Fetch_Spectrum_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Average_Spectrum_Check);
            static int CDMA2K_Fetch_Spectrum_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Spectrum_Margin);
            static int CDMA2K_Fetch_Spectrum_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Spectrum);
            static int CDMA2K_Fetch_Spectrum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Spectrum_Check);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Average_CTXS_Absolute_check);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_CTXS_Absolute_margin);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_CTXS_Absolute);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ CTXS_Absolute_check);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Absolute_High_Limit);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Absolute_margin);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Maximum_CTXS_Absolute_check);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_CTXS_Absolute_margin);
            static int CDMA2K_Fetch_Ctxspurious_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_CTXS_Absolute);
            static int CDMA2K_Fetch_Ctxspurious_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Absolute);
            static int CDMA2K_Fetch_Ctxspurious_Coffset(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Channel_Offsets);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ CTXS_Relative_check);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_CTXS_Relative_margin);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_CTXS_Relative_dBc);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ CTXS_Relative_check);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Relative_High_Limit);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Relative_margin);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ CTXS_Relative_check);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_CTXS_Relative_margin);
            static int CDMA2K_Fetch_Ctxspurious_Relative_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_CTXS_Relative_dBc);
            static int CDMA2K_Fetch_Ctxspurious_Relative(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ CTXS_Relative_dBc);
            static int CDMA2K_Fetch_Spectrum_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_High_Limit);
            static int CDMA2K_Fetch_Spectrum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Margin);
            static int CDMA2K_Fetch_Mask_Frequency_Lower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Mask_Frequency_Lower);
            static int CDMA2K_Fetch_Mask_Frequency_Upper(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Mask_Frequency_Upper);
            static int CDMA2K_Fetch_Mask_Lower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Mask_Lower);
            static int CDMA2K_Fetch_Mask_Upper(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Mask_Upper);
            static int CDMA2K_Fetch_Spectrum_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Maximum_Spectrum_Check);
            static int CDMA2K_Fetch_Spectrum_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Spectrum_Margin);
            static int CDMA2K_Fetch_Spectrum_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Spectrum);
            static int CDMA2K_Fetch_Obw_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_OBW, array<System::Single>^ Average_Percentage_of_Total_Power);
            static int CDMA2K_Fetch_Obw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_OBW, array<System::Single>^ Maximum_Percentage_of_Total_Power);
            static int CDMA2K_Fetch_Obw(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ OBW, array<System::Single>^ Percentage_of_Total_Power);
            static int CDMA2K_Fetch_Spectrum_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int CDMA2K_Fetch_Spectrum_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int CDMA2K_Fetch_Sem_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int CDMA2K_Fetch_Sem(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Mask);
            static int CDMA2K_Fetch_Spectrum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int CDMA2K_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Time_Offset_relative_to_capture_start, array<System::Double>^ CDMA_system_timing_relative_to_even_second_mark, array<System::Int32>^ Number_of_slots_available_for_analysis);
            static int CDMA2K_Fetch_Acchannel_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Power_of_Active_Code_Channel);
            static int CDMA2K_Fetch_Acchannel(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Index_of_Active_Code_Channel);
            static int CDMA2K_Fetch_Txquality_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_RMS_EVM_check, array<System::Int32>^ Average_Peak_EVM_check, array<System::Int32>^ Average_RMS_Magnitude_Error_check, array<System::Int32>^ Average_Peak_Magnitude_Error_check, array<System::Int32>^ Average_RMS_Phase_Error_check, array<System::Int32>^ Average_Peak_Phase_Error_check, array<System::Int32>^ Average_Carrier_Frequency_Offset_check, array<System::Int32>^ Average_rho_check, array<System::Int32>^ Average_I_Q_Offset_check, array<System::Int32>^ Average_I_Q_Gain_Imbalance_check, array<System::Int32>^ Average_I_Q_Phase_Imbalance_check, array<System::Int32>^ Average_Number_of_Active_Channels_check);
            static int CDMA2K_Fetch_Txquality_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_RMS_EVM_margin, array<System::Single>^ Average_Peak_EVM_margin, array<System::Single>^ Average_RMS_Magnitude_Error_margin, array<System::Single>^ Average_Peak_Magnitude_Error_margin, array<System::Single>^ Average_RMS_Phase_Error_margin, array<System::Single>^ Average_Peak_Phase_Error_margin, array<System::Single>^ Average_Carrier_Frequency_Offset_margin, array<System::Single>^ Average_rho_margin, array<System::Single>^ Average_I_Q_Offset_margin, array<System::Single>^ Average_I_Q_Gain_Imbalance_margin, array<System::Single>^ Average_I_Q_Phase_Imbalance_margin, array<System::Single>^ Average_Number_of_Active_Channels_margin);
            static int CDMA2K_Fetch_Txquality_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_RMS_EVM, array<System::Single>^ Average_Peak_EVM, array<System::Single>^ Average_RMS_Magnitude_Error, array<System::Single>^ Average_Peak_Magnitude_Error, array<System::Single>^ Average_RMS_Phase_Error, array<System::Single>^ Average_Peak_Phase_Error, array<System::Single>^ Average_Carrier_Frequency_Offset, array<System::Single>^ Average_rho, array<System::Single>^ Average_I_Q_Offset, array<System::Single>^ Average_I_Q_Gain_Imbalance, array<System::Single>^ Average_I_Q_Phase_Imbalance, array<System::Single>^ Average_Number_of_Active_Channels);
            static int CDMA2K_Fetch_Cdquality_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_Peak_Code_Domain_Error_Check, array<System::Int32>^ Average_Peak_Inactive_Code_Domain_Power_Check);
            static int CDMA2K_Fetch_Cdquality_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Code_Domain_Error_Margin, array<System::Single>^ Average_Peak_Inactive_Code_Domain_Power_Margin);
            static int CDMA2K_Fetch_Cdquality_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Code_Domain_Error, array<System::Single>^ Average_Peak_Inactive_Code_Domain_Power);
            static int CDMA2K_Fetch_Cdquality_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Peak_Code_Domain_Error_Check, array<System::Int32>^ Peak_Inactive_Code_Domain_Power_Check);
            static int CDMA2K_Fetch_Cdquality_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Code_Domain_Error_High_Limit, array<System::Single>^ Peak_Inactive_Code_Domain_Power_High_Limit);
            static int CDMA2K_Fetch_Cdquality_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Code_Domain_Error_Margin, array<System::Single>^ Peak_Inactive_Code_Domain_Power_Margin);
            static int CDMA2K_Fetch_Cdquality_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_Peak_Code_Domain_Error_Check, array<System::Int32>^ Maximum_Peak_Inactive_Code_Domain_Power_Check);
            static int CDMA2K_Fetch_Cdquality_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Code_Domain_Error_Margin, array<System::Single>^ Maximum_Peak_Inactive_Code_Domain_Power_Margin);
            static int CDMA2K_Fetch_Cdquality_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Code_Domain_Error, array<System::Single>^ Maximum_Peak_Inactive_Code_Domain_Power);
            static int CDMA2K_Fetch_Cdquality_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Peak_Code_Domain_Error, array<System::Single>^ Std_of_Peak_Inactive_Code_Domain_Power);
            static int CDMA2K_Fetch_Cdquality(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Code_Domain_Error, array<System::Single>^ Peak_Inactive_Code_Domain_Power);
            static int CDMA2K_Fetch_Txquality_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ RMS_EVM_check, array<System::Int32>^ Peak_EVM_check, array<System::Int32>^ RMS_Magnitude_Error_check, array<System::Int32>^ Peak_Magnitude_Error_check, array<System::Int32>^ RMS_Phase_Error_check, array<System::Int32>^ Peak_Phase_Error_check, array<System::Int32>^ Carrier_Frequency_Offset_check, array<System::Int32>^ rho_check, array<System::Int32>^ I_Q_Offset_check, array<System::Int32>^ I_Q_Gain_Imbalance_check, array<System::Int32>^ I_Q_Phase_Imbalance_check, array<System::Int32>^ Number_of_Active_Channels_check);
            static int CDMA2K_Fetch_Cstime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Time_Offset_relative_to_capture_start, array<System::Double>^ CDMA_system_timing_relative_to_even_second_mark);
            static int CDMA2K_Fetch_Data_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Rx_Data_Imaginary);
            static int CDMA2K_Fetch_Data_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Rx_Data_Real);
            static int CDMA2K_Fetch_Evmchip(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ EVM_Vs_Chip);
            static int CDMA2K_Fetch_Txquality_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ RMS_EVM_high_limit, array<System::Single>^ Peak_EVM_high_limit, array<System::Single>^ RMS_Magnitude_Error_high_limit, array<System::Single>^ Peak_Magnitude_Error_high_limit, array<System::Single>^ RMS_Phase_Error_high_limit, array<System::Single>^ Peak_Phase_Error_high_limit, array<System::Single>^ Carrier_Frequency_Offset_high_limit, array<System::Single>^ rho_high_limit, array<System::Single>^ I_Q_Offset_high_limit, array<System::Single>^ I_Q_Gain_Imbalance_high_limit, array<System::Single>^ I_Q_Phase_Imbalance_high_limit, array<System::Single>^ Number_of_Active_Channels_high_limit);
            static int CDMA2K_Fetch_Iqimbalance_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Average_IQ_Imbalance_Composite_Check, array<System::Int32>^ Average_IQ_Gain_Imbalance_Check, array<System::Int32>^ Average_IQ_Phase_Imbalance_Check);
            static int CDMA2K_Fetch_Iqimbalance_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Imbalance_Composite_Margin, array<System::Single>^ Average_IQ_Gain_Imbalance_Margin, array<System::Single>^ Average_IQ_Phase_Imbalance_Margin);
            static int CDMA2K_Fetch_Iqimbalance_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Imbalance_Composite, array<System::Single>^ Average_IQ_Gain_Imbalance, array<System::Single>^ Average_IQ_Phase_Imbalance);
            static int CDMA2K_Fetch_Iqimbalance_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ IQ_Imbalance_Composite_Check, array<System::Int32>^ IQ_Gain_Imbalance_Check, array<System::Int32>^ IQ_Phase_Imbalance_Check);
            static int CDMA2K_Fetch_Iqimbalance_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Imbalance_Composite_High_Limit, array<System::Single>^ IQ_Gain_Imbalance_High_Limit, array<System::Single>^ IQ_Phase_Imbalance_High_Limit);
            static int CDMA2K_Fetch_Iqimbalance_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Imbalance_Composite_Low_Limit, array<System::Single>^ IQ_Gain_Imbalance_Low_Limit, array<System::Single>^ IQ_Phase_Imbalance_Low_Limit);
            static int CDMA2K_Fetch_Iqimbalance_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Imbalance_Composite_Margin, array<System::Single>^ IQ_Gain_Imbalance_Margin, array<System::Single>^ IQ_Phase_Imbalance_Margin);
            static int CDMA2K_Fetch_Iqimbalance_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_IQ_Imbalance_Composite_Check, array<System::Int32>^ Maximum_IQ_Gain_Imbalance_Check, array<System::Int32>^ Maximum_IQ_Phase_Imbalance_Check);
            static int CDMA2K_Fetch_Iqimbalance_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_IQ_Imbalance_Composite_Margin, array<System::Single>^ Maximum_IQ_Gain_Imbalance_Margin, array<System::Single>^ Maximum_IQ_Phase_Imbalance_Margin);
            static int CDMA2K_Fetch_Iqimbalance_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_IQ_Imbalance_Composite, array<System::Single>^ Maximum_IQ_Gain_Imbalance, array<System::Single>^ Maximum_IQ_Phase_Imbalance);
            static int CDMA2K_Fetch_Iqimbalance_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_IQ_Imbalance_Composite, array<System::Single>^ Std_of_IQ_Gain_Imbalance, array<System::Single>^ Std_of_IQ_Phase_Imbalance);
            static int CDMA2K_Fetch_Iqimbalance(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Imbalance_Composite, array<System::Single>^ IQ_Gain_Imbalance, array<System::Single>^ IQ_Phase_Imbalance);
            static int CDMA2K_Fetch_Txquality_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ RMS_EVM_low_limit, array<System::Single>^ Peak_EVM_low_limit, array<System::Single>^ RMS_Magnitude_Error_low_limit, array<System::Single>^ Peak_Magnitude_Error_low_limit, array<System::Single>^ RMS_Phase_Error_low_limit, array<System::Single>^ Peak_Phase_Error_low_limit, array<System::Single>^ Carrier_Frequency_Offset_low_limit, array<System::Single>^ rho_low_limit, array<System::Single>^ I_Q_Offset_low_limit, array<System::Single>^ I_Q_Gain_Imbalance_low_limit, array<System::Single>^ I_Q_Phase_Imbalance_low_limit, array<System::Single>^ Number_of_Active_Channels_low_limit);
            static int CDMA2K_Fetch_Txquality_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ RMS_EVM_margin, array<System::Single>^ Peak_EVM_margin, array<System::Single>^ RMS_Magnitude_Error_margin, array<System::Single>^ Peak_Magnitude_Error_margin, array<System::Single>^ RMS_Phase_Error_margin, array<System::Single>^ Peak_Phase_Error_margin, array<System::Single>^ Carrier_Frequency_Offset_margin, array<System::Single>^ rho_margin, array<System::Single>^ I_Q_Offset_margin, array<System::Single>^ I_Q_Gain_Imbalance_margin, array<System::Single>^ I_Q_Phase_Imbalance_margin, array<System::Single>^ Number_of_Active_Channels_margin);
            static int CDMA2K_Fetch_Txquality_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Maximum_RMS_EVM_check, array<System::Int32>^ Maximum_Peak_EVM_check, array<System::Int32>^ Maximum_RMS_Magnitude_Error_check, array<System::Int32>^ Maximum_Peak_Magnitude_Error_check, array<System::Int32>^ Maximum_RMS_Phase_Error_check, array<System::Int32>^ Maximum_Peak_Phase_Error_check, array<System::Int32>^ Maximum_Carrier_Frequency_Offset_check, array<System::Int32>^ Maximum_rho_check, array<System::Int32>^ Maximum_I_Q_Offset_check, array<System::Int32>^ Maximum_I_Q_Gain_Imbalance_check, array<System::Int32>^ Maximum_I_Q_Phase_Imbalance_check, array<System::Int32>^ Maximum_Number_of_Active_Channels_check);
            static int CDMA2K_Fetch_Txquality_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_RMS_EVM_margin, array<System::Single>^ Maximum_Peak_EVM_margin, array<System::Single>^ Maximum_RMS_Magnitude_Error_margin, array<System::Single>^ Maximum_Peak_Magnitude_Error_margin, array<System::Single>^ Maximum_RMS_Phase_Error_margin, array<System::Single>^ Maximum_Peak_Phase_Error_margin, array<System::Single>^ Maximum_Carrier_Frequency_Offset_margin, array<System::Single>^ Maximum_rho_margin, array<System::Single>^ Maximum_I_Q_Offset_margin, array<System::Single>^ Maximum_I_Q_Gain_Imbalance_margin, array<System::Single>^ Maximum_I_Q_Phase_Imbalance_margin, array<System::Single>^ Maximum_Number_of_Active_Channels_margin);
            static int CDMA2K_Fetch_Txquality_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_RMS_EVM, array<System::Single>^ Maximum_Peak_EVM, array<System::Single>^ Maximum_RMS_Magnitude_Error, array<System::Single>^ Maximum_Peak_Magnitude_Error, array<System::Single>^ Maximum_RMS_Phase_Error, array<System::Single>^ Maximum_Peak_Phase_Error, array<System::Single>^ Maximum_Carrier_Frequency_Offset, array<System::Single>^ Maximum_rho, array<System::Single>^ Maximum_I_Q_Offset, array<System::Single>^ Maximum_I_Q_Gain_Imbalance, array<System::Single>^ Maximum_I_Q_Phase_Imbalance, array<System::Single>^ Maximum_Number_of_Active_Channels);
            static int CDMA2K_Fetch_Mechip(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Magnitude_Error_Vs_Chip);
            static int CDMA2K_Fetch_Pechip(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase_Error_Vs_Chip);
            static int CDMA2K_Fetch_Rs_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Ref_Imaginary);
            static int CDMA2K_Fetch_Rs_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Ref_Real);
            static int CDMA2K_Fetch_Txquality_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int CDMA2K_Fetch_Txquality_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_RMS_EVM, array<System::Single>^ Std_of_Peak_EVM, array<System::Single>^ Std_of_RMS_Magnitude_Error, array<System::Single>^ Std_of_Peak_Magnitude_Error, array<System::Single>^ Std_of_RMS_Phase_Error, array<System::Single>^ Std_of_Peak_Phase_Error, array<System::Single>^ Std_of_Carrier_Frequency_Offset, array<System::Single>^ Std_of_rho, array<System::Single>^ Std_of_I_Q_Offset, array<System::Single>^ Std_of_I_Q_Gain_Imbalance, array<System::Single>^ Std_of_I_Q_Phase_Imbalance, array<System::Single>^ Std_of_Number_of_Active_Channels);
            static int CDMA2K_Fetch_Txquality(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ RMS_EVM, array<System::Single>^ Peak_EVM, array<System::Single>^ RMS_Magnitude_Error, array<System::Single>^ Peak_Magnitude_Error, array<System::Single>^ RMS_Phase_Error, array<System::Single>^ Peak_Phase_Error, array<System::Single>^ Carrier_Frequency_Offset, array<System::Single>^ rho, array<System::Single>^ I_Q_Offset, array<System::Single>^ I_Q_Gain_Imbalance, array<System::Single>^ I_Q_Phase_Imbalance, array<System::Single>^ Number_of_Active_Channels);
            static int CDMA2K_Hset_All(int session, Port HW_Module);
            static int CDMA2K_Hset_Frequency_Set(int session, Port HW_Module);
            static int CDMA2K_Hset_Frequency_Get(int session, Port HW_Module, double %Frequency);
            static int CDMA2K_Mrcl(int session, unsigned int Register_Location);
            static int CDMA2K_Mrst(int session);
            static int CDMA2K_Msav(int session, unsigned int Register_Location);
            static int CDMA2K_Msds(int session, unsigned int Register_Location);
            static int CDMA2K_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



            static int LTE_Calculate_Ccdf(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Power(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Spectrum(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Txquality(int session, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Segment_Ccdf(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Slot_Count);
            static int LTE_Clear_All(int session);
            static int LTE_Clear_Ccdf(int session);
            static int LTE_Clear_Power(int session);
            static int LTE_Clear_Spectrum(int session);
            static int LTE_Clear_Synchronize(int session);
            static int LTE_Clear_Txquality(int session);
            static int LTE_Configure_Advanced_Set(int session, bool LTE_Advanced_Mode_ON_OFF);
            static int LTE_Configure_Advanced_Get(int session, bool %LTE_Advanced_Mode_ON_OFF);
            static int LTE_Configure_Band_Set(int session, unsigned int Band_Number);
            static int LTE_Configure_Band_Get(int session, unsigned int %Band_Number);
            static int LTE_Configure_Cbw_Set(int session, unsigned int Signal_Bandwidth);
            static int LTE_Configure_Cbw_Get(int session, unsigned int %Signal_Bandwidth);
            static int LTE_Configure_Cch_Dshift_Set(int session, int Delta_Shift);
            static int LTE_Configure_Cch_Dshift_Get(int session, int %Delta_Shift);
            static int LTE_Configure_Cch_N1_Set(int session, int n_PUCCH_1);
            static int LTE_Configure_Cch_N1_Get(int session, int %n_PUCCH_1);
            static int LTE_Configure_Cch_N2_Set(int session, int n_PUCCH_2);
            static int LTE_Configure_Cch_N2_Get(int session, int %n_PUCCH_2);
            static int LTE_Configure_Cch_Ncs1_Set(int session, int N_CS_1);
            static int LTE_Configure_Cch_Ncs1_Get(int session, int %N_CS_1);
            static int LTE_Configure_Cch_Nrb2_Set(int session, int N_RB_2);
            static int LTE_Configure_Cch_Nrb2_Get(int session, int %N_RB_2);
            static int LTE_Configure_Cch_Rpower_Set(int session, double PUCCH_Power_Boost);
            static int LTE_Configure_Cch_Rpower_Get(int session, double %PUCCH_Power_Boost);
            static int LTE_Configure_Cid_Set(int session, int Cell_ID);
            static int LTE_Configure_Cid_Get(int session, int %Cell_ID);
            static int LTE_Configure_Earfcn_Dl_Set(int session, unsigned int Downlink_EARFCN);
            static int LTE_Configure_Earfcn_Dl_Get(int session, unsigned int %Downlink_EARFCN);
            static int LTE_Configure_Earfcn_Ul_Set(int session, unsigned int Uplink_EARFCN);
            static int LTE_Configure_Earfcn_Ul_Get(int session, unsigned int %Uplink_EARFCN);
            static int LTE_Configure_Etrigger_Set(int session, bool External_Trigger_ON_OFF);
            static int LTE_Configure_Etrigger_Get(int session, bool %External_Trigger_ON_OFF);
            static int LTE_Configure_Ewlength_Set(int session, int EVM_window_length_in_samples_2048_based);
            static int LTE_Configure_Ewlength_Get(int session, int %EVM_window_length_in_samples_2048_based);
            static int LTE_Configure_Fdequalizer_Set(int session, bool LTE_Full_Data_Equalizer_ON_or_OFF);
            static int LTE_Configure_Fdequalizer_Get(int session, bool %LTE_Full_Data_Equalizer_ON_or_OFF);
            static int LTE_Configure_Fssample_Set(int session, int Frame_Start_Sample);
            static int LTE_Configure_Fssample_Get(int session, int %Frame_Start_Sample);
            static int LTE_Configure_Fsync_Set(int session, bool Frame_Synchronization_ON_OFF);
            static int LTE_Configure_Fsync_Get(int session, bool %Frame_Synchronization_ON_OFF);
            static int LTE_Configure_Ftype_Set(int session, int LTE_Frame_Type);
            static int LTE_Configure_Ftype_Get(int session, int %LTE_Frame_Type);
            static int LTE_Configure_Ghopping_Set(int session, bool Group_Hopping_ON_OFF);
            static int LTE_Configure_Ghopping_Get(int session, bool %Group_Hopping_ON_OFF);
            static int LTE_Configure_Mtype_Set(int session, LTE_Modulation_Type LTE_Modulation_Type);
            static int LTE_Configure_Mtype_Get(int session, LTE_Modulation_Type %LTE_Modulation_Type);
            static int LTE_Configure_Petime_Set(int session, bool LTE_Filtered_Power_Measure_Exclusive_Time_ON_or_OFF);
            static int LTE_Configure_Petime_Get(int session, bool %LTE_Filtered_Power_Measure_Exclusive_Time_ON_or_OFF);
            static int LTE_Configure_Rbduration_Set(int session, unsigned int Subframe_Index, int RB_Duration_for_this_subframe);
            static int LTE_Configure_Rbduration_Get(int session, unsigned int Subframe_Index, int %RB_Duration);
            static int LTE_Configure_Rboffset_Set(int session, unsigned int Subframe_Index, int RB_Offset);
            static int LTE_Configure_Rboffset_Get(int session, unsigned int Subframe_Index, int %RB_Offset);
            static int LTE_Configure_Rnti_Set(int session, int RNTI);
            static int LTE_Configure_Rnti_Get(int session, int %RNTI);
            static int LTE_Configure_Salgorithm_Set(int session, LTE_Sync_Algorithm LTE_Synchronization_Algorithm_FAST_STD);
            static int LTE_Configure_Salgorithm_Get(int session, LTE_Sync_Algorithm %LTE_Synchronization_Algorithm_FAST_STD);
            static int LTE_Configure_Sch_Dsshift_Set(int session, int Delta_Ss);
            static int LTE_Configure_Sch_Dsshift_Get(int session, int %Delta_Ss);
            static int LTE_Configure_Sch_Ndmrs_Set(int session, unsigned int ndmrs, int n_DMRSx);
            static int LTE_Configure_Sch_Ndmrs_Get(int session, unsigned int ndmrs, int %n_DMRSx);
            static int LTE_Configure_Sch_Rpower_Set(int session, double PUSCH_Power_Boost);
            static int LTE_Configure_Sch_Rpower_Get(int session, double %PUSCH_Power_Boost);
            static int LTE_Configure_Shopping_Set(int session, bool Seq_Hopping_ON_OFF);
            static int LTE_Configure_Shopping_Get(int session, bool %Seq_Hopping_ON_OFF);
            static int LTE_Configure_Smethod_Set(int session, LTE_Synchronization_Method LTE_Synchronization_Method);
            static int LTE_Configure_Smethod_Get(int session, LTE_Synchronization_Method %LTE_Synchronization_Method);
            static int LTE_Configure_Soffset_Set(int session, int Slot_Offset);
            static int LTE_Configure_Soffset_Get(int session, int %Slot_Offset);
            static int LTE_Configure_Srs_Set(int session, bool SRS_channel_ON_OFF);
            static int LTE_Configure_Srs_Get(int session, bool %SRS_channel_ON_OFF);
            static int LTE_Configure_Synchronize_Offset_Set(int session, double Time_Offset);
            static int LTE_Configure_Synchronize_Offset_Get(int session, double %Time_Offset);
            static int LTE_Configure_Tdd_Ssconfig_Set(int session, int LTE_Special_Subframe_Configuration);
            static int LTE_Configure_Tdd_Ssconfig_Get(int session, int %LTE_Special_Subframe_Configuration);
            static int LTE_Configure_Tdd_Udconfig_Set(int session, int LTE_Uplink_Downlink_Configuration);
            static int LTE_Configure_Tdd_Udconfig_Get(int session, int %LTE_Uplink_Downlink_Configuration);
            static int LTE_Configure_Wave_Dbw_Set(int session, unsigned int LTE_Downlink_bandwidth);
            static int LTE_Configure_Wave_Dbw_Get(int session, unsigned int %LTE_Downlink_Bandwidth);
            static int LTE_Configure_Wave_Nframes_Set(int session, int Number_of_frames);
            static int LTE_Configure_Wave_Nframes_Get(int session, int %Number_of_frames);
            static int LTE_Configure_Wave_Pdtype_Set(int session, PHICH_duration_type_Normal_or_Extended PHICH_duration_type_Normal_or_Extended);
            static int LTE_Configure_Wave_Pdtype_Get(int session, PHICH_duration_type_Normal_or_Extended %PHICH_duration_type_Normal_or_Extended);
            static int LTE_Configure_Wave_Pnfactor_Set(int session, double LTE_PHICH_Ng_Factor);
            static int LTE_Configure_Wave_Pnfactor_Get(int session, double %LTE_PHICH_Ng_Factor);
            static int LTE_Configure_Wave_Psymbols_Get(int session, array<System::Double>^ Allocated_PDCCH_Symbols);
            static int LTE_Fetch_Ccdf_Gaussian_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_refence_Gaussian_CCDF_power_above_average_X_axis);
            static int LTE_Fetch_Ccdf_Gaussian_Probability(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_refence_Gaussian_CCDF_Probability_Y_axis);
            static int LTE_Fetch_Ccdf_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_CCDF_power_above_average_X_axis);
            static int LTE_Fetch_Ccdf_Probability(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_CCDF_Probability_Y_axis);
            static int LTE_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int LTE_Fetch_Power_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ high_Power_Limit);
            static int LTE_Fetch_Power_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_Limit);
            static int LTE_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int LTE_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int LTE_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int LTE_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int LTE_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int LTE_Fetch_Aclr_Absolute_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_ACLR_Measurement);
            static int LTE_Fetch_Aclr_Absolute_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_ACLR_Measurement);
            static int LTE_Fetch_Aclr_Absolute(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Absolute_ACLR_Measurement);
            static int LTE_Fetch_Aclr_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACLR_Check);
            static int LTE_Fetch_Aclr_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_ACLR_Measurement);
            static int LTE_Fetch_Aclr_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACLR_Check);
            static int LTE_Fetch_Aclr_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACLR_Low_Limit);
            static int LTE_Fetch_Aclr_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACLR_Check);
            static int LTE_Fetch_Aclr_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_ACLR_Measurement);
            static int LTE_Fetch_Aclr(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Relative_ACLR_Measurement);
            static int LTE_Fetch_Spectrum_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int LTE_Fetch_Fpower_Cbw_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Cbw_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_channel_BW);
            static int LTE_Fetch_Fpower_Cbw_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Cbw_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Cbw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_channel_BW);
            static int LTE_Fetch_Fpower_Cbw(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_channel_BW);
            static int LTE_Fetch_Fpower_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_measure_BW);
            static int LTE_Fetch_Fpower_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_measure_BW);
            static int LTE_Fetch_Fpower_Mbw_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Mbw_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_measure_BW);
            static int LTE_Fetch_Fpower_Mbw_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Mbw_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Filtered_Power_Check);
            static int LTE_Fetch_Fpower_Mbw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_measure_BW);
            static int LTE_Fetch_Fpower_Mbw(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ Filtered_Power_in_measure_BW);
            static int LTE_Fetch_Mask_Frequency_Lower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LTE_Mask_Frequency_Left_Part);
            static int LTE_Fetch_Mask_Frequency_Upper(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LTE_Mask_Frequency_Right_Part);
            static int LTE_Fetch_Mask_Lower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LTE_Mask_Left_Part);
            static int LTE_Fetch_Mask_Upper(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LTE_Mask_Right_Part);
            static int LTE_Fetch_Spectrum_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int LTE_Fetch_Obw_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ OBW, array<System::Double>^ Percentage_of_Total_Power);
            static int LTE_Fetch_Obw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ OBW, array<System::Double>^ Percentage_of_Total_Power);
            static int LTE_Fetch_Obw(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Double>^ OBW, array<System::Double>^ Percentage_of_Total_Power);
            static int LTE_Fetch_Spectrum_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int LTE_Fetch_Spectrum_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int LTE_Fetch_Sem_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Emission_Mask_Check);
            static int LTE_Fetch_Sem_Average_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask_Margin);
            static int LTE_Fetch_Sem_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask);
            static int LTE_Fetch_Sem_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Emission_Mask_Check);
            static int LTE_Fetch_Sem_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask_Margin);
            static int LTE_Fetch_Sem_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Emission_Mask_Check);
            static int LTE_Fetch_Sem_Maximum_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask_Margin);
            static int LTE_Fetch_Sem_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask);
            static int LTE_Fetch_Sem_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask_Freq);
            static int LTE_Fetch_Sem_Worst_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_worst_spectrum_mask_margin_values);
            static int LTE_Fetch_Sem_Worst_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_frequency_values);
            static int LTE_Fetch_Sem_Worst(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_worst_emission_values);
            static int LTE_Fetch_Sem(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Emission_Mask);
            static int LTE_Fetch_Spectrum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int LTE_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ sync_start);
            static int LTE_Fetch_Txquality_Average_Check(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Int32>^ Check_IQ_Offset, array<System::Int32>^ Check_Frequency_Offset, array<System::Int32>^ Check_Data_EVM, array<System::Int32>^ Check_Peak_Data_EVM, array<System::Int32>^ Check_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Peak_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Amplitude_Imbalance, array<System::Int32>^ Check_Phase_Imbalance);
            static int LTE_Fetch_Txquality_Average(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Offset, array<System::Single>^ Average_Frequency_Offset, array<System::Single>^ Average_Data_EVM, array<System::Single>^ Peak_Data_EVM, array<System::Single>^ Average_RS_Reference_Signal_EVM, array<System::Single>^ Peak_RS_Reference_Signal_EVM, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int LTE_Fetch_Txquality_Check(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Int32>^ Check_IQ_Offset, array<System::Int32>^ Check_Frequency_Offset, array<System::Int32>^ Check_Data_EVM, array<System::Int32>^ Check_Peak_Data_EVM, array<System::Int32>^ Check_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Peak_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Amplitude_Imbalance, array<System::Int32>^ Check_Phase_Imbalance);
            static int LTE_Fetch_Data_Imaginary(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_the_imaginary_constellation_data);
            static int LTE_Fetch_Data_Real(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_the_real_constellation_data);
            static int LTE_Fetch_Txquality_Hlimit(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Offset_high_limit, array<System::Single>^ Frequency_Offset_high_limit, array<System::Single>^ Data_EVM_high_limit, array<System::Single>^ Peak_Data_EVM_high_limit, array<System::Single>^ RS_Reference_Signal_EVM_high_limit, array<System::Single>^ Peak_RS_Reference_Signal_EVM_high_limit, array<System::Single>^ Amplitude_Imbalance_high_limit, array<System::Single>^ Phase_Imbalance_high_limit);
            static int LTE_Fetch_Txquality_Llimit(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ IQ_Offset_low_limit, array<System::Single>^ Frequency_Offset_low_limit, array<System::Single>^ Data_EVM_low_limit, array<System::Single>^ Peak_Data_EVM_low_limit, array<System::Single>^ RS_Reference_Signal_EVM_low_limit, array<System::Single>^ Peak_RS_Reference_Signal_EVM_low_limit, array<System::Single>^ Amplitude_Imbalance_low_limit, array<System::Single>^ Phase_Imbalance_low_limit);
            static int LTE_Fetch_Txquality_Maximum_Check(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Int32>^ Check_IQ_Offset, array<System::Int32>^ Check_Frequency_Offset, array<System::Int32>^ Check_Data_EVM, array<System::Int32>^ Check_Peak_Data_EVM, array<System::Int32>^ Check_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Peak_RS_Reference_Signal_EVM, array<System::Int32>^ Check_Amplitude_Imbalance, array<System::Int32>^ Check_Phase_Imbalance);
            static int LTE_Fetch_Txquality_Maximum(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Offset, array<System::Single>^ Average_Frequency_Offset, array<System::Single>^ Average_Data_EVM, array<System::Single>^ Peak_Data_EVM, array<System::Single>^ Average_RS_Reference_Signal_EVM, array<System::Single>^ Peak_RS_Reference_Signal_EVM, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int LTE_Fetch_Rs_Imaginary(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Imaginary_Constellation_Data);
            static int LTE_Fetch_Rs_Real(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Real_Constellation_Data);
            static int LTE_Fetch_Txquality_Sdeviation(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Offset, array<System::Single>^ Average_Frequency_Offset, array<System::Single>^ Average_Data_EVM, array<System::Single>^ Peak_Data_EVM, array<System::Single>^ Average_RS_Reference_Signal_EVM, array<System::Single>^ Peak_RS_Reference_Signal_EVM, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int LTE_Fetch_Txquality(int session, unsigned int segment, unsigned int cc, array<System::Int32>^ Status_Code, array<System::Single>^ Average_IQ_Offset, array<System::Single>^ Average_Frequency_Offset, array<System::Single>^ Average_Data_EVM, array<System::Single>^ Peak_Data_EVM, array<System::Single>^ Average_RS_Reference_Signal_EVM, array<System::Single>^ Peak_RS_Reference_Signal_EVM, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int LTE_Fetch_Cleakage(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_carrier_leakage_per_slot);
            static int LTE_Fetch_Evmsymbol(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_EVM_in_symbols);
            static int LTE_Fetch_Iqgeneral_Average_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Filtered_Power_Check);
            static int LTE_Fetch_Iqgeneral_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_general_per_slot);
            static int LTE_Fetch_Iqgeneral_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Filtered_Power_Check);
            static int LTE_Fetch_Iqgeneral_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_general_per_slot);
            static int LTE_Fetch_Iqgeneral_Maximum_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Filtered_Power_Check);
            static int LTE_Fetch_Iqgeneral_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_general_per_slot);
            static int LTE_Fetch_Iqgeneral_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_general_per_slot);
            static int LTE_Fetch_Iqgeneral(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_general_per_slot);
            static int LTE_Fetch_Iqimage_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_image_per_slot);
            static int LTE_Fetch_Iqimage_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_image_per_slot);
            static int LTE_Fetch_Iqimage(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Inband_Emission_image_per_slot);
            static int LTE_Fetch_Merror_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Magnitude_Error);
            static int LTE_Fetch_Merror_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Magnitude_Error);
            static int LTE_Fetch_Merror(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Magnitude_Error);
            static int LTE_Fetch_Mtype(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ modulation_type);
            static int LTE_Fetch_Perror_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Phase_Error);
            static int LTE_Fetch_Perror_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Phase_Error);
            static int LTE_Fetch_Perror(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Phase_Error);
            static int LTE_Fetch_Power_Lower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ LTE_Advanced_Power_CC0);
            static int LTE_Fetch_Power_Upper(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ LTE_Advanced_Power_CC1);
            static int LTE_Fetch_Txquality_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int LTE_Fetch_Sflatness_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_subcarrier);
            static int LTE_Fetch_Sflatness_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_subcarrier);
            static int LTE_Fetch_Sflatness_Ppripple_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Flatness);
            static int LTE_Fetch_Sflatness_Ppripple_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Flatness);
            static int LTE_Fetch_Sflatness_Ppripple_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Flatness);
            static int LTE_Fetch_Sflatness_Ppripple(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Flatness);
            static int LTE_Fetch_Sflatness_Rb_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_RB);
            static int LTE_Fetch_Sflatness_Rb_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_RB);
            static int LTE_Fetch_Sflatness_Rb(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_RB);
            static int LTE_Fetch_Sflatness(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Array_of_Spectrum_Flatness_in_subcarrier);
            static int LTE_Fetch_Fssample(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ sync_start);
            static int LTE_Fetch_Soffset(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ sync_start);
            static int LTE_Hset_All(int session, Port HW_Module);
            static int LTE_Hset_Frequency_Set(int session, Port HW_Module);
            static int LTE_Hset_Frequency_Get(int session, Port HW_Module, double %Frequency);
            static int LTE_Mrcl(int session, unsigned int Register_Location);
            static int LTE_Mrst(int session);
            static int LTE_Msav(int session, unsigned int Register_Location);
            static int LTE_Msds(int session, unsigned int Register_Location);
            static int LTE_Strigger_Gap_Set(int session, double Software_Trigger_Gap_Time);
            static int LTE_Strigger_Gap_Get(int session, double %Software_Trigger_Gap_Time);
            static int LTE_Strigger_Level_Set(int session, double Software_Trigger_Level);
            static int LTE_Strigger_Level_Get(int session, double %Software_Trigger_Level);
            static int LTE_Strigger_Offset_Time_Set(int session, double Software_Trigger_Offset_Time);
            static int LTE_Strigger_Offset_Time_Get(int session, double %Software_Trigger_Offset_Time);
            static int LTE_Strigger_Rlevel_Set(int session, double Software_Trigger_Reference_Level);
            static int LTE_Strigger_Rlevel_Auto_Set(int session, bool Software_Trigger_Reference_Level_Mode);
            static int LTE_Strigger_Rlevel_Auto_Get(int session, bool %Software_Trigger_Reference_Level_Mode);
            static int LTE_Strigger_Rlevel_Get(int session, double %Software_Trigger_Reference_Level);
            static int LTE_Strigger_Start_Time_Set(int session, double Software_Trigger_Start_Time);
            static int LTE_Strigger_Start_Time_Get(int session, double %Software_Trigger_Start_Time);
            static int LTE_Strigger_State_Set(int session, bool Software_Trigger_State);
            static int LTE_Strigger_State_Get(int session, bool %Software_Trigger_State);
            static int LTE_Strigger_Tdd_Udconf_Auto_Set(int session, bool Software_Trigger_Reference_Level_Mode);
            static int LTE_Strigger_Tdd_Udconf_Auto_Get(int session, bool %Software_Trigger_Reference_Level_Mode);
            static int LTE_Strigger_Timeout_Set(int session, double Software_Trigger_Timeout);
            static int LTE_Strigger_Timeout_Get(int session, double %Software_Trigger_Timeout);
            static int LTE_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



            static int GPRF_Calculate_Phase_Interval(int session, double Start_Offset, unsigned int Length);
            static int GPRF_Calculate_Power(int session, double Start_Offset, double Length);
            static int GPRF_Calculate_Power_Interval(int session, double Start_Offset, unsigned int Length);
            static int GPRF_Calculate_Resampled(int session, double Start_Offset, double Length);
            static int GPRF_Calculate_Spectrum(int session, double Start_Offset, double Length);
            static int GPRF_Calculate_Segment_Phase_Interval(int session, unsigned int segment, double Start_Offset, unsigned int Length);
            static int GPRF_Calculate_Segment_Power(int session, unsigned int segment, double Start_Offset, double Length);
            static int GPRF_Calculate_Segment_Power_Interval(int session, unsigned int segment, double Start_Offset, unsigned int Length);
            static int GPRF_Calculate_Segment_Resampled(int session, unsigned int segment, double Start_Offset, double Length);
            static int GPRF_Calculate_Segment_Spectrum(int session, unsigned int segment, double Start_Offset, double Length);
            static int GPRF_Clear_All(int session);
            static int GPRF_Clear_Phase(int session);
            static int GPRF_Clear_Power(int session);
            static int GPRF_Clear_Resampled(int session);
            static int GPRF_Clear_Spectrum(int session);
            static int GPRF_Configure_Phase_Fecompensate_Set(int session, bool Frequency_Error_Compensation);
            static int GPRF_Configure_Phase_Fecompensate_Get(int session, bool %Frequency_Error_Compensation);
            static int GPRF_Configure_Phase_Felimit_Set(int session, double Frequency_Estimation_Limit);
            static int GPRF_Configure_Phase_Felimit_Get(int session, double %Frequency_Estimation_Limit);
            static int GPRF_Configure_Power_Icount_Set(int session, unsigned int Number_of_Intervals);
            static int GPRF_Configure_Power_Icount_Get(int session, unsigned int %Number_of_Intervals);
            static int GPRF_Configure_Fbw_Set(int session, int Filter_Bandwidth);
            static int GPRF_Configure_Fbw_Get(int session, int %Filter_Bandwidth);
            static int GPRF_Configure_Filter_Set(int session, GPRF_POWER Filter_Type);
            static int GPRF_Configure_Filter_Get(int session, GPRF_POWER %Filter_Type);
            static int GPRF_Configure_Fofrequency_Set(int session, int Filter_Offset_Frequency);
            static int GPRF_Configure_Fofrequency_Get(int session, int %Filter_Offset_Frequency);
            static int GPRF_Configure_Frolloff_Set(int session, double RRC_Filter_Roll_Off);
            static int GPRF_Configure_Frolloff_Get(int session, double %RRC_Filter_Roll_Off);
            static int GPRF_Configure_Ilength_Set(int session, double Interval_Length);
            static int GPRF_Configure_Ilength_Get(int session, double %Interval_Length);
            static int GPRF_Configure_Mlength_Set(int session, double Measurement_Length);
            static int GPRF_Configure_Mlength_Get(int session, double %Measurement_Length);
            static int GPRF_Configure_Spectrum_Rbw_Set(int session, int RBW);
            static int GPRF_Configure_Spectrum_Rbw_Get(int session, int %RBW);
            static int GPRF_Fetch_Phase_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Phase);
            static int GPRF_Fetch_Phase_Ferror(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Frequency_Error);
            static int GPRF_Fetch_Phase_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Phase);
            static int GPRF_Fetch_Phase_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Minimum_Phase);
            static int GPRF_Fetch_Phase_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GPRF_Fetch_Phase_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Std_of_Phase);
            static int GPRF_Fetch_Phase(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase);
            static int GPRF_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_Power);
            static int GPRF_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_Power);
            static int GPRF_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Minimum_Power);
            static int GPRF_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Peak_Power);
            static int GPRF_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int GPRF_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Std_of_Power);
            static int GPRF_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Power);
            static int GPRF_Fetch_Resampled(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Resampled_Data);
            static int GPRF_Fetch_Spectrum_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int GPRF_Fetch_Spectrum_Peak_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Peak_Offset_Frequency);
            static int GPRF_Fetch_Spectrum_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Peak);
            static int GPRF_Fetch_Spectrum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int GPRF_Mrcl(int session, unsigned int Register_Location);
            static int GPRF_Mrst(int session);
            static int GPRF_Msav(int session, unsigned int Register_Location);
            static int GPRF_Msds(int session, unsigned int Register_Location);



            static int BT_Calculate_Acpower(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_All(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Power(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Spectrum(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Txquality(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Segment_Acpower(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Segment_All(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int BT_Clear_Acpower(int session);
            static int BT_Clear_All(int session);
            static int BT_Clear_Power(int session);
            static int BT_Clear_Spectrum(int session);
            static int BT_Clear_Synchronize(int session);
            static int BT_Clear_Txquality(int session);
            static int BT_Configure_Channel_Set(int session, unsigned int Channel_Number);
            static int BT_Configure_Channel_Get(int session, unsigned int %Channel_Number);
            static int BT_Configure_Drate_Set(int session, BT_Data_Rate BT_Data_Rate);
            static int BT_Configure_Drate_Get(int session, BT_Data_Rate %BT_Data_Rate);
            static int BT_Configure_Ifbw_Set(int session, IF_BW IF_BW);
            static int BT_Configure_Ifbw_Get(int session, IF_BW %BT_IF_BW);
            static int BT_Configure_Lesword_Set(int session, unsigned int LE_Sync_Word);
            static int BT_Configure_Lesword_Get(int session, unsigned int %LE_Sync_Word);
            static int BT_Configure_Pdetection_Gap_Set(int session, double Power_Detect_Gap_Time);
            static int BT_Configure_Pdetection_Gap_Get(int session, double %Power_Detect_Gap_Time);
            static int BT_Configure_Pdetection_Threshold_Set(int session, double Power_Detect_Power_Threshold);
            static int BT_Configure_Pdetection_Threshold_Get(int session, double %Power_Detect_Power_Threshold);
            static int BT_Configure_Synchronize_Offset_Set(int session, double Time_Offset);
            static int BT_Configure_Synchronize_Offset_Get(int session, double %Time_Offset);
            static int BT_Configure_Wave_Lap_Set(int session, unsigned int LAP);
            static int BT_Configure_Wave_Lap_Get(int session, unsigned int %LAP);
            static int BT_Configure_Wave_Uap_Set(int session, unsigned int UAP);
            static int BT_Configure_Wave_Uap_Get(int session, unsigned int %UAP);
            static int BT_Configure_Wave_Btproduct_Set(int session, double BT_Product);
            static int BT_Configure_Wave_Btproduct_Get(int session, double %BT_Product);
            static int BT_Configure_Wave_Eroff_Set(int session, EDR_Roll_Off EDR_Roll_Off);
            static int BT_Configure_Wave_Eroff_Get(int session, EDR_Roll_Off %EDR_Roll_Off);
            static int BT_Configure_Wave_Fdfrequency_Get(int session, array<System::Double>^ Frequency_Drift_Frequency);
            static int BT_Configure_Wave_Fdtime_Get(int session, array<System::Double>^ Frequency_Drift_Time);
            static int BT_Configure_Wave_Fezeros_Set(int session, bool Set_Front_End_Zeros_on_or_off);
            static int BT_Configure_Wave_Fezeros_Get(int session, bool %Status_of_Front_End_Zeros_on_or_off);
            static int BT_Configure_Wave_Foffset_Set(int session, double Frequency_Offset);
            static int BT_Configure_Wave_Foffset_Get(int session, double %Frequency_Offset);
            static int BT_Configure_Wave_Gtime_Set(int session, double Guard_Time);
            static int BT_Configure_Wave_Gtime_Get(int session, double %Guard_Time);
            static int BT_Configure_Wave_Lhptype_Set(int session, unsigned int LE_Header_Payload_Type);
            static int BT_Configure_Wave_Lhptype_Get(int session, unsigned int %LE_Header_Payload_Type);
            static int BT_Configure_Wave_Mindex_Set(int session, double Modulation_Index);
            static int BT_Configure_Wave_Mindex_Get(int session, double %Modulation_Index);
            static int BT_Configure_Wave_Pdheader_Flow_Set(int session, bool Set_Payload_Header_Flow_on_or_off);
            static int BT_Configure_Wave_Pdheader_Flow_Get(int session, bool %Status_of_Payload_Header_Flow_on_or_off);
            static int BT_Configure_Wave_Pdheader_Llid_Set(int session, unsigned int Payload_Header_LLID);
            static int BT_Configure_Wave_Pdheader_Llid_Get(int session, unsigned int %Payload_Header_LLID);
            static int BT_Configure_Wave_Pdtype_Set(int session, Payload_Type Payload_Type);
            static int BT_Configure_Wave_Pdtype_Get(int session, Payload_Type %Payload_Type);
            static int BT_Configure_Wave_Pdubits_Get(int session, System::String^% User_specified_data_bits);
            static int BT_Configure_Wave_Pheader_Arqn_Set(int session, bool Set_Packet_Header_ARQN_on_or_off);
            static int BT_Configure_Wave_Pheader_Arqn_Get(int session, bool %Status_of_Packet_Header_ARQN_on_or_off);
            static int BT_Configure_Wave_Pheader_Flow_Set(int session, bool Set_FLOW_on_or_off);
            static int BT_Configure_Wave_Pheader_Flow_Get(int session, bool %Status_of_Packet_Header_FLOW_on_or_off);
            static int BT_Configure_Wave_Pheader_Ltaddress_Set(int session, unsigned int Packet_Header_LT_Address);
            static int BT_Configure_Wave_Pheader_Ltaddress_Get(int session, unsigned int %Packet_Header_LT_Address);
            static int BT_Configure_Wave_Pheader_Seqn_Set(int session, bool Set_Packet_Header_SEQN_on_or_off);
            static int BT_Configure_Wave_Pheader_Seqn_Get(int session, bool %Status_of_Packet_Header_SEQN_on_or_off);
            static int BT_Configure_Wave_Pheader_Set(int session, bool Set_Packet_Header_Enable_on_or_off);
            static int BT_Configure_Wave_Pheader_Get(int session, bool %Status_of_Packet_Header_Enable_on_or_off);
            static int BT_Configure_Wave_Plength_Set(int session, unsigned int Payload_Length);
            static int BT_Configure_Wave_Plength_Get(int session, unsigned int %Payload_Length);
            static int BT_Configure_Wave_Ptype_Set(int session, Packet_Type Packet_Type);
            static int BT_Configure_Wave_Ptype_Get(int session, Packet_Type %Packet_Type);
            static int BT_Configure_Wave_Rtime_Set(int session, unsigned int Repeat_Time);
            static int BT_Configure_Wave_Rtime_Get(int session, unsigned int %Repeat_Time);
            static int BT_Configure_Wave_Sbit_Set(int session, int Start_Bit);
            static int BT_Configure_Wave_Sbit_Get(int session, int %Start_Bit);
            static int BT_Configure_Wave_Sroffset_Set(int session, double Symbol_Rate_Offset);
            static int BT_Configure_Wave_Sroffset_Get(int session, double %Symbol_Rate_Offset_PPM);
            static int BT_Fetch_Acpower_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Average_ACP);
            static int BT_Fetch_Acpower_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ ACP_Check);
            static int BT_Fetch_Acpower_Cngpower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int BT_Fetch_Acpower_Coffset(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP_Channel_Offsets);
            static int BT_Fetch_Acpower_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP_High_Limit);
            static int BT_Fetch_Acpower_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP_Margin);
            static int BT_Fetch_Acpower_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Maximum_ACP);
            static int BT_Fetch_Acpower_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Acpower(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ ACP);
            static int BT_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Power);
            static int BT_Fetch_Power_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Power_Check);
            static int BT_Fetch_Power_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ high_Power_Limit);
            static int BT_Fetch_Power_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Low_Power_Limit);
            static int BT_Fetch_Power_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power_Margin);
            static int BT_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Power);
            static int BT_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Power);
            static int BT_Fetch_Power_Peak_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_Peak_Power);
            static int BT_Fetch_Power_Peak_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_Peak_Power);
            static int BT_Fetch_Power_Peak_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Minimum_Peak_Power);
            static int BT_Fetch_Power_Peak_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Peak_Power);
            static int BT_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_Power);
            static int BT_Fetch_Power_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Power);
            static int BT_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int BT_Fetch_20Bw_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_20dB_Bandwidth);
            static int BT_Fetch_20Bw_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ _20dB_Bandwidth_Check);
            static int BT_Fetch_20Bw_Data(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum_Data);
            static int BT_Fetch_20Bw_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ _20dB_Bandwidth_High_Limit);
            static int BT_Fetch_20Bw_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ _20dB_Bandwidth_Margin);
            static int BT_Fetch_20Bw_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ maximum_20dB_Bandwidth);
            static int BT_Fetch_20Bw_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequency);
            static int BT_Fetch_20Bw_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ std_of_20dB_Bandwidth);
            static int BT_Fetch_20Bw(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ _20dB_Bandwidth);
            static int BT_Fetch_Spectrum_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Synchronize_Pcomplete(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Packet_Complete_Status);
            static int BT_Fetch_Synchronize_Petime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Packet_End_Time);
            static int BT_Fetch_Synchronize_Pstime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Packet_Start_Time);
            static int BT_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_packets_found, array<System::Int32>^ Number_of_complete_packets_found);
            static int BT_Fetch_Txquality_Classic_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_of_Initial_Frequency_Offset, array<System::Single>^ Average_of_Frequency_Offset_Measured_in_Header, array<System::Single>^ Average_of_Frequency_Drift, array<System::Single>^ Average_of_Frequency_Deviation, array<System::Single>^ Average_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Average_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Average_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess, array<System::Single>^ Average_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average, array<System::Single>^ Average_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average, array<System::Single>^ Average_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max, array<System::Single>^ Average_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate, array<System::Single>^ Average_of_Payload_Errors);
            static int BT_Fetch_Txquality_Classic_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Initial_Frequency_Offset_Check, array<System::Int32>^ Frequency_Offset_Measured_in_Header_Check, array<System::Int32>^ Frequency_Drift_Check, array<System::Int32>^ Frequency_Deviation_Check, array<System::Int32>^ Peak_to_Peak_Frequency_Deviation_Check, array<System::Int32>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Check, array<System::Int32>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Check, array<System::Int32>^ Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Check, array<System::Int32>^ Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Check, array<System::Int32>^ Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Check, array<System::Int32>^ Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Check, array<System::Int32>^ Payload_Errors_Check);
            static int BT_Fetch_Classic_Eye(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ BT_Classic_Eye_diagram);
            static int BT_Fetch_Txquality_Classic_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Initial_Frequency_Offset_High_Limit, array<System::Single>^ Frequency_Offset_Measured_in_Header_High_Limit, array<System::Single>^ Frequency_Drift_High_Limit, array<System::Single>^ Frequency_Deviation_High_Limit, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_High_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_High_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_High_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_High_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_High_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_High_Limit, array<System::Single>^ Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_High_Limit, array<System::Single>^ Payload_Errors_High_Limit);
            static int BT_Fetch_Txquality_Classic_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Initial_Frequency_Offset_Low_Limit, array<System::Single>^ Frequency_Offset_Measured_in_Header_Low_Limit, array<System::Single>^ Frequency_Drift_Low_Limit, array<System::Single>^ Frequency_Deviation_Low_Limit, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_Low_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Low_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Low_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Low_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Low_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Low_Limit, array<System::Single>^ Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Low_Limit, array<System::Single>^ Payload_Errors_Low_Limit);
            static int BT_Fetch_Txquality_Classic_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Initial_Frequency_Offset_Margin, array<System::Single>^ Frequency_Offset_Measured_in_Header_Margin, array<System::Single>^ Frequency_Drift_Margin, array<System::Single>^ Frequency_Deviation_Margin, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_Margin, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Margin, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Margin, array<System::Single>^ Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Margin, array<System::Single>^ Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Margin, array<System::Single>^ Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Margin, array<System::Single>^ Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Margin, array<System::Single>^ Payload_Errors_Margin);
            static int BT_Fetch_Txquality_Classic_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_of_Initial_Frequency_Offset, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_in_Header, array<System::Single>^ Maximum_of_Frequency_Drift, array<System::Single>^ Maximum_of_Frequency_Deviation, array<System::Single>^ Maximum_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Maximum_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average, array<System::Single>^ Maximum_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max, array<System::Single>^ Maximum_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate, array<System::Single>^ Maximum_of_Payload_Errors);
            static int BT_Fetch_Txquality_Classic_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Txquality_Classic_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Initial_Frequency_Offset, array<System::Single>^ Std_of_Frequency_Offset_Measured_in_Header, array<System::Single>^ Std_of_Frequency_Drift, array<System::Single>^ Std_of_Frequency_Deviation, array<System::Single>^ Std_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Std_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Std_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess, array<System::Single>^ Std_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average, array<System::Single>^ Std_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average, array<System::Single>^ Std_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max, array<System::Single>^ Std_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate, array<System::Single>^ Std_of_Payload_Errors);
            static int BT_Fetch_Txquality_Classic(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Initial_Frequency_Offset, array<System::Single>^ Frequency_Offset_Measured_in_Header, array<System::Single>^ Frequency_Drift, array<System::Single>^ Frequency_Deviation, array<System::Single>^ Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess, array<System::Single>^ Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average, array<System::Single>^ Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average, array<System::Single>^ Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max, array<System::Single>^ Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate, array<System::Single>^ Payload_Errors);
            static int BT_Fetch_Txquality_Ddrate(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Packet_Type);
            static int BT_Fetch_Txquality_Edrate_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_of_EVM_RMS, array<System::Single>^ Average_of_EVM_Peak, array<System::Single>^ Average_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold, array<System::Single>^ Average_of_Frequency_Offset_Measured_in_Header_OmegaI, array<System::Single>^ Average_of_Frequency_Variation_Extreme_FreqExtreme, array<System::Single>^ Average_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0, array<System::Single>^ Average_of_Power_Difference_with_FM_Header_PowDiffdB, array<System::Single>^ Average_of_Initial_Frequency_Offset, array<System::Single>^ Average_of_Frequency_Deviation, array<System::Single>^ Average_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Average_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Average_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess);
            static int BT_Fetch_Txquality_Edrate_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ EVM_Average_Check, array<System::Int32>^ EVM_Peak_Check, array<System::Int32>^ Percent_of_symbols_with_Avergae_EVM_below_Threshold_Check, array<System::Int32>^ Frequency_Offset_Measured_in_Header_OmegaI_Check, array<System::Int32>^ Frequency_Variation_Extreme_FreqExtreme_Check, array<System::Int32>^ Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Check, array<System::Int32>^ Power_Difference_with_FM_Header_PowDiffdB_Check, array<System::Int32>^ Initial_Frequency_Offset_Check, array<System::Int32>^ Frequency_Deviation_Check, array<System::Int32>^ Peak_to_Peak_Frequency_Deviation_Check, array<System::Int32>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Check, array<System::Int32>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Check);
            static int BT_Fetch_Edrate_Data_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Imaginary);
            static int BT_Fetch_Edrate_Data_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation_Real);
            static int BT_Fetch_Edrate_Evmtime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ EVM_Vs_Time);
            static int BT_Fetch_Edrate_Eye(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ EDR_Eye_diagram);
            static int BT_Fetch_Edrate_Ftime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Frequency_Vs_Time);
            static int BT_Fetch_Txquality_Edrate_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average_High_Limit, array<System::Single>^ EVM_Peak_High_Limit, array<System::Single>^ Percent_of_symbols_with_Avergae_EVM_below_Threshold_High_Limit, array<System::Single>^ Frequency_Offset_Measured_in_Header_OmegaI_High_Limit, array<System::Single>^ Frequency_Variation_Extreme_FreqExtreme_High_Limit, array<System::Single>^ Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_High_Limit, array<System::Single>^ Power_Difference_with_FM_Header_PowDiffdB_High_Limit, array<System::Single>^ Initial_Frequency_Offset_High_Limit, array<System::Single>^ Frequency_Deviation_High_Limit, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_High_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_High_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_High_Limit);
            static int BT_Fetch_Txquality_Edrate_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average_Low_Limit, array<System::Single>^ EVM_Peak_Low_Limit, array<System::Single>^ Percent_of_symbols_with_Avergae_EVM_below_Threshold_Low_Limit, array<System::Single>^ Frequency_Offset_Measured_in_Header_OmegaI_Low_Limit, array<System::Single>^ Frequency_Variation_Extreme_FreqExtreme_Low_Limit, array<System::Single>^ Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Low_Limit, array<System::Single>^ Power_Difference_with_FM_Header_PowDiffdB_Low_Limit, array<System::Single>^ Initial_Frequency_Offset_Low_Limit, array<System::Single>^ Frequency_Deviation_Low_Limit, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_Low_Limit, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Low_Limit, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Low_Limit);
            static int BT_Fetch_Txquality_Edrate_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average_Margin, array<System::Single>^ EVM_Peak_Margin, array<System::Single>^ Percent_of_symbols_with_Avergae_EVM_below_Threshold_Margin, array<System::Single>^ Frequency_Offset_Measured_in_Header_OmegaI_Margin, array<System::Single>^ Frequency_Variation_Extreme_FreqExtreme_Margin, array<System::Single>^ Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Margin, array<System::Single>^ Power_Difference_with_FM_Header_PowDiffdB_Margin, array<System::Single>^ Initial_Frequency_Offset_Margin, array<System::Single>^ Frequency_Deviation_Margin, array<System::Single>^ Peak_to_Peak_Frequency_Deviation_Margin, array<System::Single>^ Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Margin, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Margin);
            static int BT_Fetch_Txquality_Edrate_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_of_EVM_RMS, array<System::Single>^ Maximum_of_EVM_Peak, array<System::Single>^ Maximum_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_in_Header_OmegaI, array<System::Single>^ Maximum_of_Frequency_Variation_Extreme_FreqExtreme, array<System::Single>^ Maximum_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0, array<System::Single>^ Maximum_of_Power_Difference_with_FM_Header_PowDiffdB, array<System::Single>^ Maximum_of_Initial_Frequency_Offset, array<System::Single>^ Maximum_of_Frequency_Deviation, array<System::Single>^ Maximum_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Maximum_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Maximum_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess);
            static int BT_Fetch_Txquality_Edrate_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Txquality_Edrate_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_EVM_RMS, array<System::Single>^ Std_of_EVM_Peak, array<System::Single>^ Std_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold, array<System::Single>^ Std_of_Frequency_Offset_Measured_in_Header_OmegaI, array<System::Single>^ Std_of_Frequency_Variation_Extreme_FreqExtreme, array<System::Single>^ Std_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0, array<System::Single>^ Std_of_Power_Difference_with_FM_Header_PowDiffdB, array<System::Single>^ Std_of_Initial_Frequency_Offset, array<System::Single>^ Std_of_Frequency_Deviation, array<System::Single>^ Std_of_Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Std_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Std_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess);
            static int BT_Fetch_Txquality_Edrate(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_RMS, array<System::Single>^ EVM_Peak, array<System::Single>^ Percent_of_symbols_with_Avergae_EVM_below_Threshold, array<System::Single>^ Frequency_Offset_Measured_in_Header_OmegaI, array<System::Single>^ Frequency_Variation_Extreme_FreqExtreme, array<System::Single>^ Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0, array<System::Single>^ Power_Difference_with_FM_Header_PowDiffdB, array<System::Single>^ Initial_Frequency_Offset, array<System::Single>^ Frequency_Deviation, array<System::Single>^ Peak_to_Peak_Frequency_Deviation, array<System::Single>^ Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess, array<System::Single>^ Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess);
            static int BT_Fetch_Txquality_Lenergy_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Average_of_Frequency_Offset, array<System::Single>^ Average_of_Delta_F1_Average, array<System::Single>^ Average_of_Delta_F2_Average, array<System::Single>^ Average_of_Min_Delta_F2_Max_DeltaF2MaxMinValue, array<System::Single>^ Average_of_Frequency_deviation_during_sync_FreqDevSyncAv, array<System::Single>^ Average_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax, array<System::Single>^ Average_of_Max_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax, array<System::Single>^ Average_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0, array<System::Single>^ Average_of_Max_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max, array<System::Single>^ Average_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max, array<System::Single>^ Average_of_CRC_valid);
            static int BT_Fetch_Txquality_Lenergy_Check(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Frequency_Offset_Check, array<System::Int32>^ Delta_F1_Average_Check, array<System::Int32>^ Delta_F2_Average_Check, array<System::Int32>^ Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Check, array<System::Int32>^ Average_frequency_deviation_during_sync_FreqDevSyncAv_Check, array<System::Int32>^ Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Check, array<System::Int32>^ Max_of_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax_Check, array<System::Int32>^ Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Check, array<System::Int32>^ Max_of_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max_Check, array<System::Int32>^ Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Check, array<System::Int32>^ CRC_valid_Check);
            static int BT_Fetch_Lenergy_Crc(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ CRC);
            static int BT_Fetch_Lenergy_Df2Max(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LE_Delta_F2_Max);
            static int BT_Fetch_Txquality_Lenergy_Hlimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Frequency_Offset_High_Limit, array<System::Single>^ Delta_F1_Average_High_Limit, array<System::Single>^ Delta_F2_Average_High_Limit, array<System::Single>^ Min_of_Delta_F2_Max_DeltaF2MaxMinValue_High_Limit, array<System::Single>^ Average_frequency_deviation_during_sync_FreqDevSyncAv_High_Limit, array<System::Single>^ Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_High_Limit, array<System::Single>^ Max_of_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax_High_Limit, array<System::Single>^ Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_High_Limit, array<System::Single>^ Max_of_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max_High_Limit, array<System::Single>^ Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_High_Limit, array<System::Single>^ CRC_valid_High_Limit);
            static int BT_Fetch_Lenergy_Isofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LE_Fn);
            static int BT_Fetch_Txquality_Lenergy_Llimit(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Frequency_Offset_Low_Limit, array<System::Single>^ Delta_F1_Average_Low_Limit, array<System::Single>^ Delta_F2_Average_Low_Limit, array<System::Single>^ Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Low_Limit, array<System::Single>^ Average_frequency_deviation_during_sync_FreqDevSyncAv_Low_Limit, array<System::Single>^ Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Low_Limit, array<System::Single>^ Max_of_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax_Low_Limit, array<System::Single>^ Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Low_Limit, array<System::Single>^ Max_of_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max_Low_Limit, array<System::Single>^ Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Low_Limit, array<System::Single>^ CRC_valid_Low_Limit);
            static int BT_Fetch_Txquality_Lenergy_Margin(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Frequency_Offset_Margin, array<System::Single>^ Delta_F1_Average_Margin, array<System::Single>^ Delta_F2_Average_Margin, array<System::Single>^ Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Margin, array<System::Single>^ Average_frequency_deviation_during_sync_FreqDevSyncAv_Margin, array<System::Single>^ Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Margin, array<System::Single>^ Max_of_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax_Margin, array<System::Single>^ Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Margin, array<System::Single>^ Max_of_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max_Margin, array<System::Single>^ Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Margin, array<System::Single>^ CRC_valid_Margin);
            static int BT_Fetch_Txquality_Lenergy_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Maximum_of_Frequency_Offset, array<System::Single>^ Maximum_of_Delta_F1_Average, array<System::Single>^ Maximum_of_Delta_F2_Average, array<System::Single>^ Maximum_of_Min_Delta_F2_Max_DeltaF2MaxMinValue, array<System::Single>^ Maximum_of_Frequency_deviation_during_sync_FreqDevSyncAv, array<System::Single>^ Maximum_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax, array<System::Single>^ Maximum_of_Max_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax, array<System::Single>^ Maximum_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0, array<System::Single>^ Maximum_of_Max_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max, array<System::Single>^ Maximum_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max, array<System::Single>^ Maximum_of_CRC_valid);
            static int BT_Fetch_Lenergy_Payload(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Payload);
            static int BT_Fetch_Lenergy_Pduheader(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ PDU_Header);
            static int BT_Fetch_Lenergy_Pdulength(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ PDU_Length);
            static int BT_Fetch_Lenergy_Preamble(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Preamble);
            static int BT_Fetch_Txquality_Lenergy_Scount(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::UInt32>^ Statistical_Count);
            static int BT_Fetch_Txquality_Lenergy_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Std_of_Frequency_Offset, array<System::Single>^ Std_of_Delta_F1_Average, array<System::Single>^ Std_of_Delta_F2_Average, array<System::Single>^ Std_of_Min_Delta_F2_Max_DeltaF2MaxMinValue, array<System::Single>^ Std_of_Frequency_deviation_during_sync_FreqDevSyncAv, array<System::Single>^ Std_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax, array<System::Single>^ Std_of_Max_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax, array<System::Single>^ Std_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0, array<System::Single>^ Std_of_Max_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max, array<System::Single>^ Std_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max, array<System::Single>^ Std_of_CRC_valid);
            static int BT_Fetch_Lenergy_Sword(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Syncword);
            static int BT_Fetch_Txquality_Lenergy(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Frequency_Offset, array<System::Single>^ Delta_F1_Average, array<System::Single>^ Delta_F2_Average, array<System::Single>^ Min_Delta_F2_Max_DeltaF2MaxMinValue, array<System::Single>^ Frequency_deviation_during_sync_FreqDevSyncAv, array<System::Single>^ Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax, array<System::Single>^ Max_absf0_fn_with_n_eq_2_3_etc_for_10101010_pattern_DeltaF0FnMax, array<System::Single>^ Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0, array<System::Single>^ Max_absfn_fn_5_with_n_eq_6_7_etc_for_10101010_pattern_DeltaFnFn_5Max, array<System::Single>^ Number_of_symbols_with_deviation_below_185kHz_Below185F2Max, array<System::Single>^ CRC_valid);
            static int BT_Hset_All(int session, Port HW_Module);
            static int BT_Hset_Frequency_Set(int session, Port HW_Module);
            static int BT_Hset_Frequency_Get(int session, Port HW_Module, double %Frequency);
            static int BT_Mrcl(int session, unsigned int Register_Location);
            static int BT_Mrst(int session);
            static int BT_Msav(int session, unsigned int Register_Location);
            static int BT_Msds(int session, unsigned int Register_Location);
            static int BT_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



            static int WIFI_Calculate_Power(int session, unsigned int Frame_Offset, unsigned int Frame_Count);
            static int WIFI_Calculate_Ramp(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Slobe(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Spectrum(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Txquality(int session, unsigned int Frame_Offset, unsigned int Frame_Count);
            static int WIFI_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Frame_Offset, unsigned int Frame_Count);
            static int WIFI_Calculate_Segment_Ramp(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Segment_Slobe(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
            static int WIFI_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Frame_Offset, unsigned int Frame_Count);
            static int WIFI_Clear_All(int session);
            static int WIFI_Clear_Power(int session);
            static int WIFI_Clear_Ramp(int session);
            static int WIFI_Clear_Slobe(int session);
            static int WIFI_Clear_Spectrum(int session);
            static int WIFI_Clear_Synchronize(int session);
            static int WIFI_Clear_Txquality(int session);
            static int WIFI_Configure_Dsss_Etaps_Set(int session, Number_of_Equilizer_Taps Number_of_Equilizer_Taps);
            static int WIFI_Configure_Dsss_Etaps_Get(int session, Number_of_Equilizer_Taps %Number_of_Equilizer_Taps);
            static int WIFI_Configure_Dsss_Evm_Dcremoval_Set(int session, bool On_Off);
            static int WIFI_Configure_Dsss_Evm_Dcremoval_Get(int session, bool %On_Off);
            static int WIFI_Configure_Dsss_Evm_Method_Set(int session, EVM_METHOD EVM_METHOD);
            static int WIFI_Configure_Dsss_Evm_Method_Get(int session, EVM_METHOD %EVM_METHOD);
            static int WIFI_Configure_Dsss_Foffset_Set(int session, double Frequency_Offset_for_TxQuality_Analysis);
            static int WIFI_Configure_Dsss_Foffset_Get(int session, double %Frequency_Offset_for_TxQuality_Analysis);
            static int WIFI_Configure_Dsss_Scrambler_Set(int session, bool On_Off);
            static int WIFI_Configure_Dsss_Scrambler_Get(int session, bool %On_Off);
            static int WIFI_Configure_Ofdm_Cestimation_Set(int session, Channel_Estimation_Type Channel_Estimation_Type);
            static int WIFI_Configure_Ofdm_Cestimation_Get(int session, Channel_Estimation_Type %Channel_Estimation_Type);
            static int WIFI_Configure_Ofdm_Pformat_Set(int session, Packet_Format Packet_Format);
            static int WIFI_Configure_Ofdm_Pformat_Get(int session, Packet_Format %Packet_Format);
            static int WIFI_Configure_Ofdm_Tracking_Amplitude_Set(int session, bool Amplitude_Correction_State);
            static int WIFI_Configure_Ofdm_Tracking_Amplitude_Get(int session, bool %Amplitude_Correction_State);
            static int WIFI_Configure_Ofdm_Tracking_Frequency_Set(int session, Frequency_Correction_Type Frequency_Correction_Type);
            static int WIFI_Configure_Ofdm_Tracking_Frequency_Get(int session, Frequency_Correction_Type %Frequency_Correction_Type);
            static int WIFI_Configure_Ofdm_Tracking_Phase_Set(int session, bool Phase_Correction_State);
            static int WIFI_Configure_Ofdm_Tracking_Phase_Get(int session, bool %Phase_Correction_State);
            static int WIFI_Configure_Ofdm_Tracking_Sclock_Set(int session, bool Symbol_Clock_Correction_State);
            static int WIFI_Configure_Ofdm_Tracking_Sclock_Get(int session, bool %Symbol_Clock_Correction_State);
            static int WIFI_Configure_Pdetection_Gap_Set(int session, double Power_Detect_Gap_Time_Sec);
            static int WIFI_Configure_Pdetection_Gap_Get(int session, double %Power_Detect_Gap_Time_Sec);
            static int WIFI_Configure_Pdetection_Threshold_Set(int session, double Power_Detect_Power_Difference_dB);
            static int WIFI_Configure_Pdetection_Threshold_Get(int session, double %Power_Detect_Power_Difference_dB);
            static int WIFI_Configure_Standard_Set(int session, WiFi_Standard WiFi_Standard);
            static int WIFI_Configure_Standard_Get(int session, WiFi_Standard %WiFi_Standard);
            static int WIFI_Configure_Wave_Dsss_Drate_Set(int session, Wifi_Data_Rate Wifi_Data_Rate);
            static int WIFI_Configure_Wave_Dsss_Drate_Get(int session, Wifi_Data_Rate %Wifi_Data_Rate);
            static int WIFI_Configure_Wave_Dsss_Preamble_Set(int session, Preamble_Setting Preamble_Setting);
            static int WIFI_Configure_Wave_Dsss_Preamble_Get(int session, Preamble_Setting %Preamble_Setting);
            static int WIFI_Configure_Wave_Psdu_Len_Set(int session, unsigned int PSDU_Length_for_wave_generation);
            static int WIFI_Configure_Wave_Psdu_Len_Get(int session, unsigned int %PSDU_Length_for_wave_generation);
            static int WIFI_Configure_Wave_Psdu_Type_Set(int session, PSDU_Setting PSDU_Setting);
            static int WIFI_Configure_Wave_Psdu_Type_Get(int session, PSDU_Setting %PSDU_Setting);
            static int WIFI_Configure_Wave_Psdu_Get(int session, System::String^% User_specified_RPC_pattern);
            static int WIFI_Fetch_Power_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Peak_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Peak_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Peak_Minimum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Peak_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Power(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Power);
            static int WIFI_Fetch_Ramp_Off_Instantaneous(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Ramp_Off_Instantaneous_Power);
            static int WIFI_Fetch_Ramp_Off_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Ramp_Off_Peak_Power);
            static int WIFI_Fetch_Ramp_Off_Tdel(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Ramp_Off_Power_Time_Delta);
            static int WIFI_Fetch_Ramp_Off_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Time_Vector);
            static int WIFI_Fetch_Ramp_Off_Trise(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Ramp_On_Power_Time);
            static int WIFI_Fetch_Ramp_Off_Xmask(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ X_Mask);
            static int WIFI_Fetch_Ramp_Off_Ymask(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Y_Mask);
            static int WIFI_Fetch_Ramp_On_Instantaneous(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Ramp_On_Instantaneous_Power);
            static int WIFI_Fetch_Ramp_On_Peak(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Ramp_On_Peak_Power);
            static int WIFI_Fetch_Ramp_On_Tdel(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Ramp_Off_Power_Time_Delta);
            static int WIFI_Fetch_Ramp_On_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Time_Vector);
            static int WIFI_Fetch_Ramp_On_Trise(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Ramp_Off_Power_Time);
            static int WIFI_Fetch_Ramp_On_Xmask(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ X_Mask);
            static int WIFI_Fetch_Ramp_On_Ymask(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Y_Mask);
            static int WIFI_Fetch_Slobe(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Peak_2nd_Lower_Side_Lobe, array<System::Single>^ Peak_1st_Lower_Side_Lobe, array<System::Single>^ Peak_Center, array<System::Single>^ Peak_1st_Higher_Side_Lobe, array<System::Single>^ Peak_2nd_Higher_Side_Lobe);
            static int WIFI_Fetch_Spectrum_Ofrequency(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Offset_Frequencies);
            static int WIFI_Fetch_Spectrum_Average(int session, unsigned int segment, unsigned int signal, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int WIFI_Fetch_Spectrum_Maximum(int session, unsigned int segment, unsigned int signal, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int WIFI_Fetch_Spectrum(int session, unsigned int segment, unsigned int signal, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Spectrum);
            static int WIFI_Fetch_Synchronize_Petime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Packet_End_Time_sec);
            static int WIFI_Fetch_Synchronize_Pstime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Packet_Start_Time_sec);
            static int WIFI_Fetch_Synchronize(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_packets_including_incomplete_packets_found, array<System::Int32>^ Number_of_complete_packets_found);
            static int WIFI_Fetch_Txquality_Dsss_Average(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average, array<System::Single>^ EVM_Peak, array<System::Single>^ Phase_Error, array<System::Single>^ Frequency_Error, array<System::Single>^ Frequency_Error_Peak, array<System::Single>^ Symbol_Clock_Error, array<System::Single>^ LO_Leakage, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int WIFI_Fetch_Dsss_Constellation_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation);
            static int WIFI_Fetch_Dsss_Constellation_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Constellation);
            static int WIFI_Fetch_Dsss_Evmtime_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ WIFI_B_EVM_Vs_Time_Time_Vector);
            static int WIFI_Fetch_Dsss_Evmtime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ WIFI_B_EVM_Vs_Time);
            static int WIFI_Fetch_Dsss_Eye_Imaginary(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Eye_Diagram);
            static int WIFI_Fetch_Dsss_Eye_Real(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Eye_Diagram);
            static int WIFI_Fetch_Dsss_Eye_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Eye_Diagram);
            static int WIFI_Fetch_Dsss_Fevtime_Time(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Freq_Error_vs_Time);
            static int WIFI_Fetch_Dsss_Fevtime(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Freq_Error_vs_Time);
            static int WIFI_Fetch_Dsss_Info_Clock(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Locked_Clock);
            static int WIFI_Fetch_Dsss_Info_Drate(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Wifi_Data_Rate);
            static int WIFI_Fetch_Dsss_Info_Mod(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Modulation_Type);
            static int WIFI_Fetch_Dsss_Info_Preamble(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Long_Preamble);
            static int WIFI_Fetch_Txquality_Dsss_Maximum(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average, array<System::Single>^ EVM_Peak, array<System::Single>^ Phase_Error, array<System::Single>^ Frequency_Error, array<System::Single>^ Frequency_Error_Peak, array<System::Single>^ Symbol_Clock_Error, array<System::Single>^ LO_Leakage, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int WIFI_Fetch_Dsss_Plcp_Crc(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ CRC_Status);
            static int WIFI_Fetch_Dsss_Plcp(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ PLCP_Data);
            static int WIFI_Fetch_Dsss_Psdu_Crc(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ CRC_Status_for_PSDU);
            static int WIFI_Fetch_Dsss_Psdu_Length(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Length_of_PSDU);
            static int WIFI_Fetch_Dsss_Psdu(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ PSDU_Bits);
            static int WIFI_Fetch_Dsss_Scrambler(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Int32>^ >^ Scrambler_Init);
            static int WIFI_Fetch_Txquality_Dsss_Sdeviation(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average, array<System::Single>^ EVM_Peak, array<System::Single>^ Phase_Error, array<System::Single>^ Frequency_Error, array<System::Single>^ Frequency_Error_Peak, array<System::Single>^ Symbol_Clock_Error, array<System::Single>^ LO_Leakage, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int WIFI_Fetch_Txquality_Dsss(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ EVM_Average, array<System::Single>^ EVM_Peak, array<System::Single>^ Phase_Error, array<System::Single>^ Frequency_Error, array<System::Single>^ Frequency_Error_Peak, array<System::Single>^ Symbol_Clock_Error, array<System::Single>^ LO_Leakage, array<System::Single>^ Amplitude_Imbalance, array<System::Single>^ Phase_Imbalance);
            static int WIFI_Fetch_Ofdm_Aimbalance_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Amplitude_Imbalance_versus_Spatial_Stream);
            static int WIFI_Fetch_Ofdm_Evm_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Error_Vector_Magnitude_versus_Spatial_Stream);
            static int WIFI_Fetch_Ofdm_Evmsymbol_Composite(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Composite_Error_Vector_Magnitude_versus_Symbol);
            static int WIFI_Fetch_Ofdm_Evmsymbol(int session, unsigned int segment, unsigned int stream, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Error_Vector_Magnitude_versus_Symbol_given_Spatial_Stream);
            static int WIFI_Fetch_Ofdm_Evmtone_Composite(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Composite_Error_Vector_Magnitude_versus_Tone);
            static int WIFI_Fetch_Ofdm_Evmtone(int session, unsigned int segment, unsigned int stream, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Error_Vector_Magnitude_versus_Tone_given_Spatial_Stream);
            static int WIFI_Fetch_Ofdm_Ferror_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Frequency_Error_versus_Signal);
            static int WIFI_Fetch_Ofdm_Info_Nsignals(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_Signals);
            static int WIFI_Fetch_Ofdm_Info_Nsstreams(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_Spatial_Streams);
            static int WIFI_Fetch_Ofdm_Info_Nsymbols(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_Symbols);
            static int WIFI_Fetch_Ofdm_Info_Ntones(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Number_of_Tones);
            static int WIFI_Fetch_Ofdm_Loleakage_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ LO_Leakage_versus_Signal);
            static int WIFI_Fetch_Ofdm_Perror_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase_Error_versus_Signal);
            static int WIFI_Fetch_Ofdm_Pesymbol(int session, unsigned int segment, unsigned int signal, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase_Error_versus_Symbol_given_Signal);
            static int WIFI_Fetch_Ofdm_Pformat(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Packet_Format);
            static int WIFI_Fetch_Ofdm_Pimbalance_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Phase_Imbalance_versus_Spatial_Stream);
            static int WIFI_Fetch_Ofdm_Power(int session, unsigned int segment, unsigned int signal, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Power_versus_Spatial_Stream_given_Signal);
            static int WIFI_Fetch_Ofdm_Scerror_All(int session, unsigned int segment, array<System::Int32>^ Status_Code, array< array<System::Single>^ >^ Symbol_Clock_Error_versus_Signal);
            static int WIFI_Fetch_Txquality_Ofdm(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Single>^ Composite_Error_Vector_Magnitude, array<System::Single>^ Composite_Phase_Error, array<System::Single>^ Composite_Frequency_Error, array<System::Single>^ Composite_Symbol_Clock_Error, array<System::Single>^ Composite_LO_Leakage, array<System::Single>^ Composite_Amplitude_Imbalance, array<System::Single>^ Composite_Phase_Imbalance);
            static int WIFI_Fetch_Type(int session, unsigned int segment, array<System::Int32>^ Status_Code, array<System::Int32>^ Packet_Type);
            static int WIFI_Mrcl(int session, unsigned int Register_Location);
            static int WIFI_Mrst(int session);
            static int WIFI_Msav(int session, unsigned int Register_Location);
            static int WIFI_Msds(int session, unsigned int Register_Location);
            static int WIFI_Wave_Generate_Mmemory(int session, System::String^ File_Name, System::String^ Description_of_Waveform);



    }; // end class
} // end namespace
