/*
  Litepoint Instrument Driver
  (C) Litepoint 2011, All rights reserved
*/
#include "LP_driver_enums.h"

#ifdef __cplusplus
extern "C" {
#endif

LP_DRIVER_API int __cdecl LP_Sys_Cls             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Emc_Set         (int session, int Enable_Disable);
LP_DRIVER_API int __cdecl LP_Sys_Emc_Get         (int session, int *Enable_disable);
LP_DRIVER_API int __cdecl LP_Sys_Ese_Set         (int session, unsigned int Std_Event_Status_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Ese_Get         (int session, unsigned int *Std_Event_Status_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Esr_Get         (int session, unsigned int *Std_Event_Status_Register);
LP_DRIVER_API int __cdecl LP_Sys_Gmc_Get         (int session, const char* Macro_label, unsigned int max_items, char Macro_contents[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Idn_Get         (int session, unsigned int maximum_size, char Instrument_Identification_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Lmc_Get         (int session, unsigned int maximum_size, char Macro_labels[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Opc_Set         (int session);
LP_DRIVER_API int __cdecl LP_Sys_Opc_Get         (int session, unsigned int *_1);
LP_DRIVER_API int __cdecl LP_Sys_Pmc             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Rcl             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Rmc             (int session, const char* Macro_label);
LP_DRIVER_API int __cdecl LP_Sys_Rst             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Sav             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Sds             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Sre_Set         (int session, unsigned int Service_Request_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Sre_Get         (int session, unsigned int *Service_Request_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Stb_Get         (int session, unsigned int *Status_Byte);
LP_DRIVER_API int __cdecl LP_Sys_Wai             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_List_Count_Get(int session, unsigned int *Number_of_applets);
LP_DRIVER_API int __cdecl LP_Sys_Applet_List_Get (int session, unsigned int maximum_size, char Applet_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Abort(int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Break(int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Continue(int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Cstack_Get(int session, unsigned int maximum_size, char Scope_level[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Lcommand_Get(int session, unsigned int maximum_size, char Last_command[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Load(int session, const char* Applet_Execute);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Mode_Set(int session, enum LP_Boolean_t Debugging_mode);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Mode_Get(int session, enum LP_Boolean_t *Applet_response);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Ncommand_Get(int session, unsigned int maximum_size, char Next_command[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_State_Get(int session, unsigned int maximum_size, char Applet_state[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Step_Configuration_Set(int session, enum LP_Applet_Step_Output_Config_t Applet_Step_Output_Config);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Step_Configuration_Get(int session, enum LP_Applet_Step_Output_Config_t *Applet_Step_Output_Config);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Step_Get(int session, unsigned int maximum_size, char Configured_step_output[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Step_Out_Get(int session, unsigned int maximum_size, char Configured_step_output[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Step_Over_Get(int session, unsigned int maximum_size, char Configured_step_output[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Debug_Variable_List_Get(int session, unsigned int Scope, unsigned int maximum_size, char Variable_names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Body_Get (int session, const char* Applet_name, unsigned int max_items, char Applet_body[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Ctype_Set(int session, const char* Applet_name, enum LP_Command_Type_t Command_Type);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Ctype_Get(int session, const char* Applet_name, enum LP_Command_Type_t *Command_Type);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Dcommands_Set(int session, const char* Applet_name, const char* Dependent_commands);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Dcommands_Get(int session, const char* Applet_name, unsigned int maximum_size, char Dependent_commands[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Description_Set(int session, const char* Applet_name, const char* Applet_description);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Description_Get(int session, const char* Applet_name, unsigned int maximum_size, char Applet_description[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Internal_Set(int session, const char* Applet_name, enum LP_Documentation_classification_t Documentation_classification);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Internal_Get(int session, const char* Applet_name, enum LP_Documentation_classification_t *Documentation_classification);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Name     (int session, const char* Applet_name);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Parameter_List_Get(int session, const char* Applet_name, unsigned int maximum_size, char Parameter_names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Rcommands_Set(int session, const char* Applet_name, const char* Related_commands);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Rcommands_Get(int session, const char* Applet_name, unsigned int maximum_size, char Related_commands[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Response_Basic_Set(int session, const char* Applet_name, enum LP_Boolean_t Applet_response);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Response_Basic_Get(int session, const char* Applet_name, enum LP_Boolean_t *Applet_response);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Delete   (int session, const char* Applet_name);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_File_Delete(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Applet_File_Load(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Applet_File_Store(int session, const char* Applet_name, const char* optional_File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Module_End(int session);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Module   (int session, enum LP_Module_t Module);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Tcheck_Compare_Get(int session, const char* Applet_name, unsigned long long Applet_timestamp_check_value, unsigned int *Applet_timestamp_check_return_value);
LP_DRIVER_API int __cdecl LP_Sys_Applet_Tcheck_Get(int session, const char* Applet_name, unsigned long long *Applet_timestamp);
LP_DRIVER_API int __cdecl LP_Sys_Cabehavior_Opc_A_Get(int session, unsigned int *_1);
LP_DRIVER_API int __cdecl LP_Sys_Cabehavior_Select(int session, const char* System_Command, const char* Alternate_command);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Clear   (int session);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Load_Asegment(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Load    (int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Instance_Count_Get(int session, unsigned int segment, unsigned int *Instance_Count);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Integrity_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, int *Capture_Saturation_Flag);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int max_items, float IQ_Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Mconfiguration_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int max_items, char Module_Configuration[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Psensor_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int psensor, unsigned int max_items, float Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Scount_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int *Capture_Sample_Count);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Srate_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int *Capture_Sample_Rate);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Subset_I_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int Sample_Count, double Start_Offset, double Length, unsigned int max_items, float I_Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Subset_Pvtime_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int Sample_Count, double Start_Offset, double Length, unsigned int max_items, float PVT_Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Subset_Q_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int Sample_Count, double Start_Offset, double Length, unsigned int max_items, float Q_Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Data_Tstamp_Get(int session, unsigned int segment, unsigned int signal, unsigned int instance, unsigned int *Capture_Time_Stamp);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Signal_Count_Get(int session, unsigned int segment, unsigned int *Signal_Count);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Store   (int session, unsigned int segment, const char* File_Name, const char* optional_Description_of_Capture);
LP_DRIVER_API int __cdecl LP_Sys_Capture_Segment_Count_Get(int session, unsigned int *Segment_Count);
LP_DRIVER_API int __cdecl LP_Sys_Channel         (int session, unsigned int channel);
LP_DRIVER_API int __cdecl LP_Sys_Channel_Get     (int session, enum LP_Channel_t *Channel);
LP_DRIVER_API int __cdecl LP_Sys_Clear_Mdata     (int session);
LP_DRIVER_API int __cdecl LP_Sys_Crcl            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Crst            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Csav            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Csds            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Cstatus_Get     (int session, enum LP_ActivityType_t ActivityType, enum LP_Boolean_t Invert, unsigned int *Status);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Applet   (int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Hmodules (int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Library  (int session, const char* Library_name);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Library_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Lock     (int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Rlocal   (int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Service_Hw(int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Service_Sw(int session);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Token    (int session, unsigned int token);
LP_DRIVER_API int __cdecl LP_Sys_Dclear_Token_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Log_Id_Read_Get (int session, unsigned int max_items, float ID_file[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Log_Scpi_Enable_Set(int session, enum LP_Boolean_t Log_SCPI_Enable);
LP_DRIVER_API int __cdecl LP_Sys_Log_Scpi_Enable_Get(int session, enum LP_Boolean_t *Query_Log_SCPI_Enable);
LP_DRIVER_API int __cdecl LP_Sys_Log_Scpi_Size_Set(int session, unsigned int SCPI_Log_file_size);
LP_DRIVER_API int __cdecl LP_Sys_Log_Scpi_Size_Get(int session, unsigned int *SCPI_Log_file_size);
LP_DRIVER_API int __cdecl LP_Sys_Log_Scpi_Write  (int session);
LP_DRIVER_API int __cdecl LP_Sys_Service_Mode_Set(int session);
LP_DRIVER_API int __cdecl LP_Sys_Service_Mode_Get(int session, enum LP_Boolean_t *Service_Mode_enabled_state);
LP_DRIVER_API int __cdecl LP_Sys_Service_Mode_Sw_Set(int session);
LP_DRIVER_API int __cdecl LP_Sys_Service_Mode_Sw_Get(int session, enum LP_Boolean_t *Service_Mode_enabled_state);
LP_DRIVER_API int __cdecl LP_Sys_Statistics_Log_Clear(int session);
LP_DRIVER_API int __cdecl LP_Sys_Statistics_Log_Size_Set(int session, unsigned int Log_buffer_size);
LP_DRIVER_API int __cdecl LP_Sys_Statistics_Log_Size_Get(int session, unsigned int *Log_buffer_size);
LP_DRIVER_API int __cdecl LP_Sys_Tcurrent_Get    (int session, unsigned int *YEAR, unsigned int *MONTH, unsigned int *DAY, unsigned int *HOUR, unsigned int *MINUTE, unsigned int *SECOND);
LP_DRIVER_API int __cdecl LP_Sys_Telapsed_Get    (int session, double *Elapsed_Time);
LP_DRIVER_API int __cdecl LP_Sys_Format_Readings_Border_Set(int session, enum LP_Data_Byte_Order_t Byte_Order);
LP_DRIVER_API int __cdecl LP_Sys_Format_Readings_Border_Get(int session, enum LP_Data_Byte_Order_t *Byte_Order);
LP_DRIVER_API int __cdecl LP_Sys_Format_Readings_Data_Set(int session, enum LP_Data_Format_t Data_Format, unsigned int Length_or_Precision);
LP_DRIVER_API int __cdecl LP_Sys_Format_Readings_Data_Get(int session, enum LP_Data_Format_t *Data_Format);
LP_DRIVER_API int __cdecl LP_Sys_Library_Applet_Private(int session, const char* Applet_name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Crc_Get (int session, const char* Library_name, unsigned int maximum_size, char CRC[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Description_Set(int session, const char* Library_name, const char* Library_description);
LP_DRIVER_API int __cdecl LP_Sys_Library_Description_Get(int session, const char* Library_name, unsigned int maximum_size, char Library_description[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Fname_Get(int session, const char* Library_name, unsigned int maximum_size, char Library_filename[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Iapplet (int session, const char* IApplet_string);
LP_DRIVER_API int __cdecl LP_Sys_Library_Load    (int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Load_Encrypted(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Memory_Library_List_Iall_Get(int session, unsigned int maximum_size, char All_Library_Info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Memory_Library_Preloaded_List_Get(int session, unsigned int maximum_size, char Library_Names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Memory_Library_List_Get(int session, unsigned int maximum_size, char Library_Names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Memory_Program_List_Get(int session, const char* Library_name, unsigned int maximum_size, char Program_Names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Library_Name    (int session, const char* Lib_name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Unload  (int session, const char* Library_name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Unload_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Library_Unuse   (int session, const char* Library_name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Unuse_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Library_Use     (int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Use_Encrypted(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Library_Version_Set(int session, const char* Library_name, const char* Library_version);
LP_DRIVER_API int __cdecl LP_Sys_Library_Version_Get(int session, const char* Library_name, unsigned int maximum_size, char Library_version[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mconfiguration_Load(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Memory_Delete   (int session, const char* optional_Name);
LP_DRIVER_API int __cdecl LP_Sys_Memory_Delete_File(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Set(int session, double Loss);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Cat_Get(int session, unsigned int maximum_size, char memory_storage_contents_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Delete_File(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Load(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Points_Get(int session, unsigned int *Num_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Ccploss_Get(int session, unsigned int max_items, double  Loss[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Table_Clear     (int session, const char* optional_Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Define_Set(int session, const char* Column_names, unsigned int NUM_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Define_Get(int session, unsigned int maximum_size, char Structure[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Delete_Point(int session, double Freq);
LP_DRIVER_API int __cdecl LP_Sys_Table_Frequency_Set(int session, double Frequency);
LP_DRIVER_API int __cdecl LP_Sys_Table_Frequency_Points_Get(int session, unsigned int *Num_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Frequency_Get(int session, unsigned int max_items, double  Frequency[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Table_Insert_Point(int session, double Freq);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Set  (int session, double Loss);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Cat_Get(int session, unsigned int maximum_size, char memory_storage_contents_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Load (int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Points_Get(int session, unsigned int *Num_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Loss_Get  (int session, unsigned int max_items, double  Loss[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Set(int session, double Offset);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Cat_Get(int session, unsigned int maximum_size, char memory_storage_contents_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Load(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Points_Get(int session, unsigned int *Num_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Offset_Get(int session, unsigned int max_items, double  Offset[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Set(int session, double Phase);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Cat_Get(int session, unsigned int maximum_size, char memory_storage_contents_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Delete_File(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Load(int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Points_Get(int session, unsigned int *Num_Points);
LP_DRIVER_API int __cdecl LP_Sys_Table_Psindex_Get(int session, unsigned int max_items, double  Phase[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Table_Set       (int session, const char* Name);
LP_DRIVER_API int __cdecl LP_Sys_Table_Get       (int session, unsigned int maximum_size, char Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Table_Store     (int session, const char* optional_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Catalog_Get(int session, unsigned int maximum_size, char mass_storage_contents_list[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Cdirectory_Set(int session, const char* optional_Dir_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Cdirectory_Get(int session, unsigned int maximum_size, char Dir_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Crc_Get (int session, const char* File_Name, unsigned int maximum_size, char CRC[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Data_Set(int session, const char* File_Name, unsigned int Data_size, const char *Data);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Data_Get(int session, const char* File_Name, unsigned int max_items, char Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Delete  (int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Description_Get(int session, const char* File_Name, unsigned int max_items, char Description[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Fclose  (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Fopen   (int session, const char* File_Name, const char* File_open_mode);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Fread_Get(int session, unsigned int max_items, char Data[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Fwrite  (int session, unsigned int Data_size, const char *Data);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Mdirectory(int session, const char* Dir_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mmemory_Rdirectory(int session, const char* Dir_Name);
LP_DRIVER_API int __cdecl LP_Sys_Amodules_Get    (int session, unsigned int *Number_of_Modules, unsigned int max_items, enum LP_Module_t  Module[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Cmodules_Get    (int session, unsigned int *Number_of_Modules, unsigned int max_items, enum LP_Module_t  Module[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mmodules_Get    (int session, unsigned int *Number_of_modules, unsigned int maximum_size, char Module_name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mrout_Count_Get (int session, unsigned int *Number_of_Modules);
LP_DRIVER_API int __cdecl LP_Sys_Mrout_Define    (int session, int Module_name, const char* optional_Host_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mrout_Define_Get(int session, unsigned int *Number_of_Modules, unsigned int maximum_size, char Module_name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mrout_Delete    (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsa_Count_Get  (int session, unsigned int *Number_of_Modules);
LP_DRIVER_API int __cdecl LP_Sys_Mvsa_Define     (int session, int Module_name, const char* optional_Host_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mvsa_Define_Get (int session, unsigned int *Number_of_Modules, unsigned int maximum_size, char Module_name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mvsa_Delete     (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall         (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_Instance_Set(int session, enum LP_Instance_t Instance);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_Instance_Count_Set(int session, unsigned int Instance_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_Instance_Count_Get(int session, unsigned int *Instance_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_Instance_Get(int session, enum LP_Instance_t *Instance);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_List_Define_Get(int session, unsigned int *Number_of_Modules, unsigned int max_items, enum LP_Group_module_name_t  Group_module_name[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mvsaall_List_Reset(int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsg_Count_Get  (int session, unsigned int *Number_of_Modules);
LP_DRIVER_API int __cdecl LP_Sys_Mvsg_Define     (int session, int Module_name, const char* optional_Host_Name);
LP_DRIVER_API int __cdecl LP_Sys_Mvsg_Define_Get (int session, unsigned int *Number_of_Modules, unsigned int maximum_size, char Module_name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Mvsg_Delete     (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall         (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_Instance_Set(int session, enum LP_Instance_t Instance);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_Instance_Count_Set(int session, unsigned int Instance_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_Instance_Count_Get(int session, unsigned int *Instance_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_Instance_Get(int session, enum LP_Instance_t *Instance);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_List_Define_Get(int session, unsigned int *Number_of_Modules, unsigned int max_items, enum LP_Group_module_name_t  Group_module_name[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mvsgall_List_Reset(int session);
LP_DRIVER_API int __cdecl LP_Sys_Bp              (int session);
LP_DRIVER_API int __cdecl LP_Sys_Bt              (int session);
LP_DRIVER_API int __cdecl LP_Sys_Cdma2K          (int session);
LP_DRIVER_API int __cdecl LP_Sys_Cell            (int session, unsigned int cell);
LP_DRIVER_API int __cdecl LP_Sys_Dect            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Gprf            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Gsm             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Lte             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Ltebs           (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mrout           (int session, unsigned int mrout);
LP_DRIVER_API int __cdecl LP_Sys_Mvsa            (int session, unsigned int mvsa);
LP_DRIVER_API int __cdecl LP_Sys_Mvsg            (int session, unsigned int mvsg);
LP_DRIVER_API int __cdecl LP_Sys_Nfc             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Ota             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Rfps            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Rout            (int session, unsigned int rout);
LP_DRIVER_API int __cdecl LP_Sys_Snic            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Sys             (int session);
LP_DRIVER_API int __cdecl LP_Sys_Tdscdma         (int session);
LP_DRIVER_API int __cdecl LP_Sys_Vsa             (int session, unsigned int vsa);
LP_DRIVER_API int __cdecl LP_Sys_Vsg             (int session, unsigned int vsg);
LP_DRIVER_API int __cdecl LP_Sys_Wcdma           (int session);
LP_DRIVER_API int __cdecl LP_Sys_Wcdmabs         (int session);
LP_DRIVER_API int __cdecl LP_Sys_Wifi            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Zigbee          (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Clear       (int session);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Clear(int session);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_All_Get(int session, unsigned int mack, int *Status_Code, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max[], double  Ack_Power_Min[], double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Get(int session, unsigned int mack, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max1[], double  Ack_Power_Min1[], double  Ack_Power_Max2[], double  Ack_Power_Min2[], double  TX_Actual_Power1[], double  TX_Actual_Power2[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Pmaximum_Get(int session, unsigned int mack, unsigned int pmaximum, unsigned int max_items, double  Ack_Power_Max[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Pminimum_Get(int session, unsigned int mack, unsigned int pminimum, unsigned int max_items, double  Ack_Power_Min[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Rcount_Get(int session, unsigned int mack, unsigned int *Packet_Ack_Receive_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Rmaximum_Get(int session, unsigned int mack, unsigned int rmaximum, unsigned int max_items, double  Ack_Response_Max_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Rminimum_Get(int session, unsigned int mack, unsigned int rminimum, unsigned int max_items, double  Ack_Response_Min_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Signal_Get(int session, unsigned int mack, unsigned int signal, int *Status_Code, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max[], double  Ack_Power_Min[], double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Tcount_Get(int session, unsigned int mack, unsigned int *VSG_Packet_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Tpower_Get(int session, unsigned int mack, unsigned int tpower, unsigned int max_items, double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Wmaximum_Get(int session, unsigned int mack, unsigned int wmaximum, unsigned int max_items, double  Ack_Width_Max_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Wminimum_Get(int session, unsigned int mack, unsigned int wminimum, unsigned int max_items, double  Ack_Width_Min_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Mack_Count_Get(int session, unsigned int *MPS_ACK_Measurements);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Plevel_Get(int session, unsigned int plevel, unsigned int max_items, int Status[], double  Power_Level[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Dsensitivity_Step_Data_Get(int session, unsigned int step, unsigned int signal, unsigned int max_items, float Power_values[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_All_Get(int session, unsigned int mack, int *Status_Code, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max[], double  Ack_Power_Min[], double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Get    (int session, unsigned int mack, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max1[], double  Ack_Power_Min1[], double  Ack_Power_Max2[], double  Ack_Power_Min2[], double  TX_Actual_Power1[], double  TX_Actual_Power2[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Pmaximum_Get(int session, unsigned int mack, unsigned int pmaximum, unsigned int max_items, double  Ack_Power_Max[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Pminimum_Get(int session, unsigned int mack, unsigned int pminimum, unsigned int max_items, double  Ack_Power_Min[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Rcount_Get(int session, unsigned int mack, unsigned int *Packet_Ack_Receive_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Rmaximum_Get(int session, unsigned int mack, unsigned int rmaximum, unsigned int max_items, double  Ack_Response_Max_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Rminimum_Get(int session, unsigned int mack, unsigned int rminimum, unsigned int max_items, double  Ack_Response_Min_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Signal_Get(int session, unsigned int mack, unsigned int signal, int *Status_Code, unsigned int max_items, unsigned int VSG_Packet_Count[], unsigned int Packet_Ack_Receive_Count[], double  Ack_Response_Max_Time[], double  Ack_Response_Min_Time[], double  Ack_Width_Max_Time[], double  Ack_Width_Min_Time[], double  Ack_Power_Max[], double  Ack_Power_Min[], double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Tcount_Get(int session, unsigned int mack, unsigned int *VSG_Packet_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Tpower_Get(int session, unsigned int mack, unsigned int tpower, unsigned int max_items, double  TX_Actual_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Wmaximum_Get(int session, unsigned int mack, unsigned int wmaximum, unsigned int max_items, double  Ack_Width_Max_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Wminimum_Get(int session, unsigned int mack, unsigned int wminimum, unsigned int max_items, double  Ack_Width_Min_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Mack_Count_Get(int session, unsigned int *MPS_ACK_Measurements);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_All_Get(int session, unsigned int segment, unsigned int max_items, unsigned int Packet_Capture_Count[], unsigned int Packet_Skip_Count[], double  Packet_Width_Max1[], double  Packet_Width_Min1[], double  Packet_Power_Max1[], double  Packet_Power_Min1[], double  Packet_Width_Max2[], double  Packet_Width_Min2[], double  Packet_Power_Max2[], double  Packet_Power_Min2[], unsigned int Packet_Skipped_Port1[], unsigned int Packet_Skipped_Port2[], unsigned int Packet_Skipped_Port3[], unsigned int Packet_Skipped_Port4[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Ccount_Get(int session, unsigned int segment, unsigned int step, unsigned int *Packet_Capture_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Get(int session, unsigned int segment, unsigned int step, unsigned int *Packet_Capture_Count, unsigned int *Packet_Skip_Count, double *Packet_Width_Max1, double *Packet_Width_Min1, double *Packet_Power_Max1, double *Packet_Power_Min1, double *Packet_Width_Max2, double *Packet_Width_Min2, double *Packet_Power_Max2, double *Packet_Power_Min2, unsigned int *Packet_Skipped_Port1, unsigned int *Packet_Skipped_Port2, unsigned int *Packet_Skipped_Port3, unsigned int *Packet_Skipped_Port4);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Ppower_Get(int session, unsigned int segment, unsigned int step, double *Packet_Power_Max1, double *Packet_Power_Min1, double *Packet_Power_Max2, double *Packet_Power_Min2);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Pskip_Get(int session, unsigned int segment, unsigned int step, unsigned int *Packet_Skipped_Port1, unsigned int *Packet_Skipped_Port2, unsigned int *Packet_Skipped_Port3, unsigned int *Packet_Skipped_Port4);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Pwidth_Get(int session, unsigned int segment, unsigned int step, double *Packet_Width_Max1, double *Packet_Width_Min1, double *Packet_Width_Max2, double *Packet_Width_Min2);
LP_DRIVER_API int __cdecl LP_Sys_Mps_Segment_Step_Scount_Get(int session, unsigned int segment, unsigned int step, unsigned int *Packet_Skip_Count);
LP_DRIVER_API int __cdecl LP_Sys_Mrcl            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Mrst            (int session);
LP_DRIVER_API int __cdecl LP_Sys_Msav            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Msds            (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Sys_Opt_Get         (int session, unsigned int maximum_size, char Device_Options_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Per_Sweep_Fetch_Ack_Get(int session, unsigned int max_items, int ACK_CNT[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Variable_List_Get(int session, unsigned int maximum_size, char Variable_names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Variable_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Variable_File_Delete(int session, const char* File_Name);
LP_DRIVER_API int __cdecl LP_Sys_Variable_File_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Variable_File_Exists_Get(int session, const char* File_Name, enum LP_Boolean_t *Boolean);
LP_DRIVER_API int __cdecl LP_Sys_Llout_Release   (int session);
LP_DRIVER_API int __cdecl LP_Sys_Llout_Request_Get(int session, unsigned int *Lock_result);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Copy   (int session, unsigned int sequence, unsigned int Location);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record_Append(int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record_Cancel(int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record_Pause(int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record_Resume(int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record (int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Record_Stop(int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Define_Get(int session, unsigned int sequence, unsigned int max_items, char Commands_listing[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Delete (int session, unsigned int sequence);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Abort_Herror_Set(int session, enum LP_Boolean_t Sequence_abort_mode_on_hardware_error);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Abort_Herror_Get(int session, enum LP_Boolean_t *Sequence_abort_mode_on_hardware_error);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Delete_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_List_Count_Get(int session, unsigned int *Number_of_sequences);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_List_Get(int session, unsigned int *Number_of_sequence_IDs, unsigned int max_items, unsigned int Sequence_ID_List[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Cmemory_Set(int session, enum LP_Clear_capture_memory_mode_t Clear_capture_memory_mode);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Cmemory_Get(int session, enum LP_Clear_capture_memory_mode_t *Clear_capture_memory_mode);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Tstamp_Remark_Get(int session, unsigned int max_items, char Timestamps[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Tstamp_Get(int session, unsigned int max_items, char Timestamps[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Channel_Tstamp_Get(int session, unsigned int max_items, char Execution_time_in_channel[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Fifo_Load_Get(int session, unsigned int max_items, char FIFO_load[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Id_Get(int session, unsigned int *Sequence_ID);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Immediate(int session, const char* Commands_listing);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Immediate_Hsnotify_Get(int session, const char* Commands_listing, unsigned int *Sequence_Started);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Step_Get(int session, unsigned int max_items, char Info[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Tstamp_Module_Get(int session, enum LP_Module_t Module, unsigned int max_items, char Timestamps[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Sequence_Execute_Tstamp_State(int session, enum LP_Boolean_t Timestamp_state_ON_OFF);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Condition_Get(int session, unsigned int *Applet_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Enable_Set(int session, unsigned int Applet_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Enable_Get(int session, unsigned int *Applet_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Get(int session, unsigned int *Applet_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Ntransition_Set(int session, unsigned int Applet_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Ntransition_Get(int session, unsigned int *Applet_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Ptransition_Set(int session, unsigned int Applet_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_Ptransition_Get(int session, unsigned int *Applet_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Condition_Get(int session, unsigned int *Applet_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Enable_Set(int session, unsigned int Applet_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Enable_Get(int session, unsigned int *Applet_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Get(int session, unsigned int *Applet_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Ntransition_Set(int session, unsigned int Applet_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Ntransition_Get(int session, unsigned int *Applet_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Ptransition_Set(int session, unsigned int Applet_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Applet_User_Ptransition_Get(int session, unsigned int *Applet_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Condition_Get(int session, unsigned int *Channels_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Enable_Set(int session, unsigned int Channels_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Enable_Get(int session, unsigned int *Channels_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Get(int session, unsigned int *Channels_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Ntransition_Set(int session, unsigned int Channels_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Ntransition_Get(int session, unsigned int *Channels_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Ptransition_Set(int session, unsigned int Channels_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Channel_Ptransition_Get(int session, unsigned int *Channels_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Condition_Get(int session, unsigned int *Active_Modules_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Condition_Get(int session, unsigned int *Channel_Summarys_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Enable_Set(int session, unsigned int Channel_Summarys_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Enable_Get(int session, unsigned int *Channel_Summarys_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Get(int session, unsigned int *Channel_Summarys_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Ntransition_Set(int session, unsigned int Channel_Summarys_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Ntransition_Get(int session, unsigned int *Channel_Summarys_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Ptransition_Set(int session, unsigned int Channel_Summarys_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Csummary_Ptransition_Get(int session, unsigned int *Channel_Summarys_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Enable_Set(int session, unsigned int Active_Modules_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Enable_Get(int session, unsigned int *Active_Modules_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Get      (int session, unsigned int *Active_Modules_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Ntransition_Set(int session, unsigned int Active_Modules_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Ntransition_Get(int session, unsigned int *Active_Modules_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Condition_Get(int session, unsigned int *Operations_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Condition_Get(int session, unsigned int *Connections_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Enable_Set(int session, unsigned int Connections_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Enable_Get(int session, unsigned int *Connections_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Get(int session, unsigned int *Connections_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Ntransition_Set(int session, unsigned int Connections_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Ntransition_Get(int session, unsigned int *Connections_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Ptransition_Set(int session, unsigned int Connections_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Connection_Ptransition_Get(int session, unsigned int *Connections_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Enable_Set(int session, unsigned int Operations_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Enable_Get(int session, unsigned int *Operations_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Get(int session, unsigned int *Operations_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Ntransition_Set(int session, unsigned int Operations_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Ntransition_Get(int session, unsigned int *Operations_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Ptransition_Set(int session, unsigned int Operations_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Operation_Ptransition_Get(int session, unsigned int *Operations_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Preset   (int session);
LP_DRIVER_API int __cdecl LP_Sys_Status_Ptransition_Set(int session, unsigned int Active_Modules_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Ptransition_Get(int session, unsigned int *Active_Modules_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Condition_Get(int session, unsigned int *Questionables_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Enable_Set(int session, unsigned int Questionables_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Enable_Get(int session, unsigned int *Questionables_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Get(int session, unsigned int *Questionables_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Ntransition_Set(int session, unsigned int Questionables_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Ntransition_Get(int session, unsigned int *Questionables_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Ptransition_Set(int session, unsigned int Questionables_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Questionable_Ptransition_Get(int session, unsigned int *Questionables_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Condition_Get(int session, unsigned int *Sequences_Condition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Enable_Set(int session, unsigned int Sequences_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Enable_Get(int session, unsigned int *Sequences_Enable_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Get(int session, unsigned int *Sequences_Event_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Ntransition_Set(int session, unsigned int Sequences_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Ntransition_Get(int session, unsigned int *Sequences_Negative_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Ptransition_Set(int session, unsigned int Sequences_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Sequence_Ptransition_Get(int session, unsigned int *Sequences_Positive_Transition_Register);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Get  (int session, unsigned int *SRQ_Result);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Nblock_Get(int session, unsigned int *SRQ_Result);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Sname_Set(int session, const char* SRQ_Session);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Sname_Get(int session, unsigned int maximum_size, char SRQ_Session[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Timeout_Set(int session, unsigned int SRQ_Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Status_Srq_Timeout_Get(int session, unsigned int *SRQ_Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Channel_Count_Get(int session, unsigned int *Channel_count);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Amodules_Get(int session, const char* Serial_Number_IP_Address, unsigned int *Number_of_Modules, unsigned int max_items, enum LP_Module_t  Module[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Cinformation_All_Get(int session, unsigned int *Instrument_Count, unsigned int maximum_size, char Serial_Number_IP_Address[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Cinformation_Get(int session, const char* Serial_Number_IP_Address, unsigned int maximum_size, char Channel[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Connect  (int session, const char* Serial_Number_IP_Address);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Disconnect_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Remote_Idn_Get  (int session, const char* Serial_Number_IP_Address, unsigned int maximum_size, char Instrument_Identification_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Session_Count_Get(int session, int *Number_of_external_sessions);
LP_DRIVER_API int __cdecl LP_Sys_Ctimeout_Set    (int session, double Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Ctimeout_Get    (int session, double *Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Session_Info_Get(int session, const char* optional_Optional_Session_Name, unsigned int max_items, char Session_information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Session_List_All_String_Get(int session, unsigned int maximum_size, char Session_information[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Session_List_Get(int session, unsigned int max_items, char Session_information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Session_List_Name_Get(int session, unsigned int maximum_size, char Session_Names[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Add_Get    (int session, const char* Session_Name, unsigned int *Session_Add_result);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Owner_Info_Get(int session, unsigned int max_items, char Lock_Owner_Session_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Owner_Get  (int session, unsigned int maximum_size, char Lock_Owner_Session_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Release    (int session);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Request_Timeout_Set(int session, unsigned int Lock_Request_Timeout_in_milliseconds);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Request_Timeout_Get(int session, unsigned int *Lock_Request_Timeout_in_milliseconds);
LP_DRIVER_API int __cdecl LP_Sys_Lock_Request_Get(int session, unsigned int *Lock_result);
LP_DRIVER_API int __cdecl LP_Sys_Session_Name_Set(int session, const char* Session_Name);
LP_DRIVER_API int __cdecl LP_Sys_Session_Name_Get(int session, unsigned int maximum_size, char Session_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Obuffer_Set     (int session, enum LP_Mode_t Mode);
LP_DRIVER_API int __cdecl LP_Sys_Obuffer_Get     (int session, enum LP_Mode_t *Mode);
LP_DRIVER_API int __cdecl LP_Sys_Session_Remark_Set(int session, const char* Session_Remark);
LP_DRIVER_API int __cdecl LP_Sys_Session_Remark_Get(int session, unsigned int maximum_size, char Session_Remark[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Token_Owner_Info_Get(int session, unsigned int token, unsigned int max_items, char Token_Owner_Session_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Token_Owner_Get (int session, unsigned int token, unsigned int maximum_size, char Token_Owner_Session_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release   (int session, unsigned int token);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release_Delay_Set(int session, unsigned int token, double Delay);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release_Delay_Get(int session, unsigned int token, double *Delay);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release_Group(int session, unsigned int token, unsigned int Release_Count);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release_Nlast_Get(int session, unsigned int token, unsigned int *Release_result);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Group_Get(int session, unsigned int token, const char* Share_name, unsigned int Session_Count, enum LP_Boolean_t Share_attribute, unsigned int *Request_result);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Priority_Set(int session, unsigned int token, int Priority);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Priority_Get(int session, unsigned int token, int *Priority);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Get(int session, unsigned int token, const char* optional_Share_name, unsigned int *Request_result);
LP_DRIVER_API int __cdecl LP_Sys_Token_Resource_Name_Get(int session, unsigned int token, unsigned int maximum_size, char Resource_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Token_Share_Set (int session, unsigned int token, enum LP_Boolean_t Share_attribute);
LP_DRIVER_API int __cdecl LP_Sys_Token_Name_Get  (int session, unsigned int token, unsigned int maximum_size, char Share_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Token_Share_Get (int session, unsigned int token, enum LP_Boolean_t *Share_attribute);
LP_DRIVER_API int __cdecl LP_Sys_Token_Info_All_Get(int session, unsigned int maximum_size, char Token_Info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Token_Name_Map_Release(int session, const char* Token_name);
LP_DRIVER_API int __cdecl LP_Sys_Token_Name_Map_Release_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Token_Name_Map_Request_Get(int session, const char* Token_name, unsigned int *Token_suffix);
LP_DRIVER_API int __cdecl LP_Sys_Token_Release_All(int session);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Timeout_Set(int session, double Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Token_Request_Timeout_Get(int session, double *Timeout);
LP_DRIVER_API int __cdecl LP_Sys_Communicate_Socket_Address_All_Set(int session, const char* IP_Address, const char* Subnet_Mask, const char* optional_Gateway);
LP_DRIVER_API int __cdecl LP_Sys_Communicate_Socket_Address_Dhcp_Enable(int session);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Dhcp_Get (int session, enum LP_Boolean_t *Enabled);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Enable_Set(int session, enum LP_Boolean_t Keep_Alive_Enable);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Enable_Get(int session, enum LP_Boolean_t *Keep_Alive_Enable);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Interval_Set(int session, double Keep_Alive_Interval);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Interval_Get(int session, double *TCP_Keep_Alive_Interval);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Time_Set(int session, double Keep_Alive_Delay);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Kalive_Time_Get(int session, double *Keep_Alive_Delay);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Mac_Get  (int session, unsigned int maximum_size, char MAC_Address[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Port_Saddress_Get(int session, int *Port_sub_address);
LP_DRIVER_API int __cdecl LP_Sys_Socket_Port_Get (int session, int *Port_address);
LP_DRIVER_API int __cdecl LP_Sys_Date_Get        (int session, unsigned int *YEAR, unsigned int *MONTH, unsigned int *DAY);
LP_DRIVER_API int __cdecl LP_Sys_Error_All_Get   (int session, unsigned int maximum_size, char Error_Number[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Error_Code_All_Get(int session, unsigned int max_items, int Error_Numbers[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Error_Code_Get  (int session, int *Error_Number);
LP_DRIVER_API int __cdecl LP_Sys_Error_Count_Get (int session, int *Error_Count);
LP_DRIVER_API int __cdecl LP_Sys_Error_Get       (int session, int *Error_Number, unsigned int maximum_size, char Error_Information[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Applet_Only_Get(int session, const char* Command_Name, unsigned int maximum_size, char Applet_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Applet_Permitted_Get(int session, const char* Command_Name, unsigned int maximum_size, char Applet_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Library_Only_Get(int session, const char* Command_Name, unsigned int maximum_size, char Library_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Library_Permitted_Get(int session, const char* Command_Name, unsigned int maximum_size, char Library_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Lock_Get   (int session, const char* Command_Name, unsigned int maximum_size, char Lock_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Sequence_Get(int session, const char* Command_Name, unsigned int maximum_size, char Sequence_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Vi_Get     (int session, const char* Command_Name, unsigned int maximum_size, char VI_info[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Documentation_Dependency_Get(int session, const char* Command_Name, unsigned int maximum_size, char Documentation_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Documentation_Range_Get(int session, const char* Command_Name, unsigned int max_items, char Range_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Documentation_Related_Get(int session, const char* Command_Name, unsigned int maximum_size, char Documentation_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Documentation_Response_Get(int session, const char* Command_Name, unsigned int max_items, char Response_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Documentation_Get(int session, const char* Command_Name, unsigned int maximum_size, char Documentation_String[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Errors_Description_Get(int session, unsigned int max_items, char Error_Format[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Errors_Get (int session, unsigned int max_items, char Error_Code_List[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Execution_Get(int session, const char* Command_Name, unsigned int maximum_size, char Execution_Type[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Fcodes_Get (int session, unsigned int max_items, char fcode_list[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Headers_Get(int session, unsigned int max_items, char Command_List[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Range_Bands_Get(int session, const char* Command_Name, unsigned int max_items, char Range_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Range_Get  (int session, const char* Command_Name, unsigned int max_items, char Range_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Response_Get(int session, const char* Command_Name, unsigned int max_items, char Response_Information[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Status_Registers_Get(int session, unsigned int max_items, char Register_sets[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Syntax_Get (int session, const char* Command_Name, unsigned int maximum_size, char Syntax_information[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Sys_Help_Units_Get  (int session, unsigned int max_items, char Error_Code_List[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Help_Get        (int session, unsigned int max_items, char HelpText[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Sys_Preset          (int session);
LP_DRIVER_API int __cdecl LP_Sys_Remark          (int session, const char* Remark_String);
LP_DRIVER_API int __cdecl LP_Sys_Time_Get        (int session, unsigned int *HOUR, unsigned int *MINUTE, unsigned int *SECOND);
LP_DRIVER_API int __cdecl LP_Sys_Timer_Count_Set (int session, double dbl_Value);
LP_DRIVER_API int __cdecl LP_Sys_Timer_Count_Get (int session, double *Time);
LP_DRIVER_API int __cdecl LP_Sys_Timer_Rst       (int session);
LP_DRIVER_API int __cdecl LP_Sys_Timer_State     (int session, enum LP_Boolean_t Timestamp_state_ON_OFF);
LP_DRIVER_API int __cdecl LP_Sys_Utilization_Server_Time_Get(int session, double *Time);
LP_DRIVER_API int __cdecl LP_Sys_Utilization_Session_Time_Get(int session, double *Time);
LP_DRIVER_API int __cdecl LP_Sys_Vi_Count_Get    (int session, unsigned int *VI_count);
LP_DRIVER_API int __cdecl LP_Sys_Vi_Set          (int session, enum LP_Virtual_instrument_t Virtual_instrument);
LP_DRIVER_API int __cdecl LP_Sys_Vi_Get          (int session, enum LP_Virtual_instrument_t *Virtual_instrument);

LP_DRIVER_API int __cdecl LP_VSG_Frequency_Set   (int session, int instance, double Frequency);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Get   (int session, int instance, double *Frequency);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Looffset_Set(int session, int instance, double Frequency);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Looffset_Get(int session, int instance, double *Frequency);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Offset_Table_State_Set(int session, int instance, enum LP_Boolean_t Frequency_offset_table_state);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Offset_Table_State_Get(int session, int instance, enum LP_Boolean_t *Frequency_offset_state);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Offset_Table_Use_Set(int session, int instance, const char* Name);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Offset_Table_Use_Get(int session, int instance, unsigned int maximum_size, char Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Step_Set(int session, int instance, double Frequency_step_size);
LP_DRIVER_API int __cdecl LP_VSG_Frequency_Step_Get(int session, int instance, double *Frequency_step_size);
LP_DRIVER_API int __cdecl LP_VSG_Aoffset_Set     (int session, int instance, double Amplitude_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Aoffset_Get     (int session, int instance, double *Amplitude_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Bb_Dcoffset_Set (int session, int instance, double I_DC_Offset, double Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Bb_Dcoffset_Get (int session, int instance, double *I_DC_Offset, double *Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Dcoffset_Set    (int session, int instance, double I_DC_Offset, double Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Dcoffset_Get    (int session, int instance, double *I_DC_Offset, double *Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Gdelay_Set      (int session, int instance, double Group_Delay);
LP_DRIVER_API int __cdecl LP_VSG_Gdelay_Get      (int session, int instance, double *Group_Delay);
LP_DRIVER_API int __cdecl LP_VSG_Poffset_Set     (int session, int instance, double Phase_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Poffset_Get     (int session, int instance, double *Phase_Offset);
LP_DRIVER_API int __cdecl LP_VSG_Marker_External_Set(int session, int instance, unsigned int external, enum LP_Marker_Type_t Marker_source);
LP_DRIVER_API int __cdecl LP_VSG_Marker_External_Get(int session, int instance, unsigned int external, enum LP_Marker_Type_t *Marker_Source);
LP_DRIVER_API int __cdecl LP_VSG_Mdelay          (int session, int instance, double Delay_time);
LP_DRIVER_API int __cdecl LP_VSG_Modulation_State_Set(int session, int instance, enum LP_Boolean_t Modulation_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Modulation_State_Get(int session, int instance, enum LP_Boolean_t *Modulation_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Ccwtime_Set (int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Ccwtime_Get (int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Csegment_Set(int session, int instance, int WSEG_Index);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Csegment_Get(int session, int instance, unsigned int maximum_size, char Wave_segment[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Initiate    (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Mode_Set    (int session, int instance, enum LP_MPS_mode_t MPS_mode);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Mode_Get    (int session, int instance, enum LP_MPS_mode_t *MPS_mode);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Pacount_Set (int session, int instance, unsigned int MPS_Packet_Acknowledge_Count);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Pacount_Get (int session, int instance, unsigned int *MPS_Packet_Acknowledge_Count);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Patimeout_Set(int session, int instance, double MPS_Packet_Acknowledge_Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Patimeout_Get(int session, int instance, double *MPS_Packet_Acknowledge_Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Pdelay_Set  (int session, int instance, double MPS_Packet_Delay_Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Pdelay_Get  (int session, int instance, double *MPS_Packet_Delay_Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Stime_Set   (int session, int instance, double MPS_Slot_Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Stime_Get   (int session, int instance, double *MPS_Slot_Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Synchronization_Set(int session, int instance, enum LP_Boolean_t MPS_Sync_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Synchronization_Get(int session, int instance, enum LP_Boolean_t *MPS_Sync_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Time_Set    (int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Time_Get    (int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Tpcount_Set (int session, int instance, unsigned int MPS_Transmit_Packet_Count);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Tpcount_Get (int session, int instance, unsigned int *MPS_Transmit_Packet_Count);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Agap_Set(int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Agap_Get(int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Alength_Maximum_Set(int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Alength_Maximum_Get(int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Alength_Minimum_Set(int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Alength_Minimum_Get(int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Atimeout_Set(int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSG_Mps_Trigger_Atimeout_Get(int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSG_Mrcl            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSG_Mrst            (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Msav            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSG_Msds            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSG_Per_Sweep_Reset (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Power_Alc_Correction_Set(int session, int instance, double ALC_correction);
LP_DRIVER_API int __cdecl LP_VSG_Power_Alc_Correction_Get(int session, int instance, double *ALC_correction);
LP_DRIVER_API int __cdecl LP_VSG_Power_Alc_Source_Get(int session, int instance, enum LP_ALC_Source_t *ALC_source);
LP_DRIVER_API int __cdecl LP_VSG_Power_Alc_Set   (int session, int instance, enum LP_ALC_State_t ALC_state);
LP_DRIVER_API int __cdecl LP_VSG_Power_Alc_Get   (int session, int instance, enum LP_ALC_State_t *ALC_state);
LP_DRIVER_API int __cdecl LP_VSG_Power_Inhibit_State_Set(int session, int instance, enum LP_Boolean_t Power_Inhibit_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Power_Inhibit_State_Get(int session, int instance, enum LP_Boolean_t *Power_Inhibit_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSG_Power_Set       (int session, int instance, double Power_Level);
LP_DRIVER_API int __cdecl LP_VSG_Power_Get       (int session, int instance, double *Power_Level);
LP_DRIVER_API int __cdecl LP_VSG_Power_State_Set (int session, int instance, enum LP_Boolean_t Power_state);
LP_DRIVER_API int __cdecl LP_VSG_Power_State_Get (int session, int instance, enum LP_Boolean_t *Power_state);
LP_DRIVER_API int __cdecl LP_VSG_Power_Step_Set  (int session, int instance, double Power_Step_Level);
LP_DRIVER_API int __cdecl LP_VSG_Power_Step_Get  (int session, int instance, double *Power_Step_Level);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Arm       (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Arm_Hsn_Get(int session, int instance, unsigned int *Hardware_Status_Notification);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Slope_Set (int session, int instance, enum LP_Trigger_Slope_t Timer_Slope);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Slope_Get (int session, int instance, enum LP_Trigger_Slope_t *Timer_slope);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Smask_Set (int session, int instance, unsigned int Software_event_mask);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Smask_Get (int session, int instance, unsigned int *Software_event_mask);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Source_Set(int session, int instance, enum LP_Trigger_Source_t Trigger_source);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Source_Get(int session, int instance, enum LP_Trigger_Source_t *Trigger_source);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Type_Set  (int session, int instance, enum LP_Trigger_Type_t Trigger_type);
LP_DRIVER_API int __cdecl LP_VSG_Qwait_Type_Get  (int session, int instance, enum LP_Trigger_Type_t *Trigger_type);
LP_DRIVER_API int __cdecl LP_VSG_Rfcorrection_Loss_Get(int session, int instance, enum LP_Port_Name_t Port_name, double Frequency, double *Port_Correction);
LP_DRIVER_API int __cdecl LP_VSG_Rfcorrection_State_Set(int session, int instance, enum LP_Boolean_t Correction_state, enum LP_Port_Name_t Port_name);
LP_DRIVER_API int __cdecl LP_VSG_Rfcorrection_State_Get(int session, int instance, enum LP_Port_Name_t Port_name, enum LP_Boolean_t *RF_Correction_state);
LP_DRIVER_API int __cdecl LP_VSG_Rfcorrection_Use_Set(int session, int instance, const char* Name, enum LP_Port_Name_t Port_name);
LP_DRIVER_API int __cdecl LP_VSG_Rfcorrection_Use_Get(int session, int instance, enum LP_Port_Name_t Port_name, unsigned int maximum_size, char Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Srate_Set       (int session, int instance, unsigned int Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSG_Srate_Get       (int session, int instance, unsigned int *Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSG_Stype_Get       (int session, int instance, enum LP_Module_Subtype_t *Module_Subtype);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Arm       (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Slope_Set (int session, int instance, enum LP_Trigger_Slope_t Timer_Slope);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Slope_Get (int session, int instance, enum LP_Trigger_Slope_t *Timer_slope);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Source_Set(int session, int instance, enum LP_Timer_Source_t Timer_source);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Source_Get(int session, int instance, enum LP_Timer_Source_t *Timer_source);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Stop      (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Synchronize(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Set       (int session, int instance, double Periodic_timer_value);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Get       (int session, int instance, double *Periodic_timer_value);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Trigger_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Timer_Trigger_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Mode_Set(int session, int instance, enum LP_Trigger_Mode_t Trigger_mode);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Mode_Get(int session, int instance, enum LP_Trigger_Mode_t *Trigger_mode);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Offset_Set(int session, int instance, double Trigger_offset_time);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Offset_Get(int session, int instance, double *Trigger_offset_time);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Slope_Set(int session, int instance, enum LP_Trigger_Slope_t Trigger_Slope);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Slope_Get(int session, int instance, enum LP_Trigger_Slope_t *Trigger_slope);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Source_Set(int session, int instance, enum LP_Trigger_Source_t Trigger_source);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Source_Get(int session, int instance, enum LP_Trigger_Source_t *Trigger_source);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Type_Set(int session, int instance, enum LP_Trigger_Type_t Trigger_type);
LP_DRIVER_API int __cdecl LP_VSG_Trigger_Type_Get(int session, int instance, enum LP_Trigger_Type_t *Trigger_type);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Delete     (int session, int instance, const char* Waveform_Name);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Delete_All (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Execute_Set(int session, int instance, enum LP_Boolean_t Wave_Play_ON_OFF, int WSEG_Index);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Csegment_Get(int session, int instance, unsigned int maximum_size, char Currently_playing_wave_segment[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Rcount_Get (int session, int instance, unsigned int *WList_count);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Generate_Cwave(int session, int instance, double Wave_frequency, float IQ_phase_offset);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Length_Get (int session, int instance, const char* Waveform_Name, unsigned int *Length_Samples);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Load_Set   (int session, int instance, const char* Waveform_Name);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Load_Add   (int session, int instance, const char* Waveform_Name);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Load_Rthreshold_Set(int session, int instance, double Wave_Reload_Threshold);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Load_Rthreshold_Get(int session, int instance, double *Wave_Reload_Threshold);
LP_DRIVER_API int __cdecl LP_VSG_Wave_Load_Get   (int session, int instance, unsigned int maximum_size, char Waveform_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Catalog_Delete_All(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Catalog_List_Count_Get(int session, int instance, unsigned int *Number_of_saved_segments);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Catalog_List_Get(int session, int instance, unsigned int maximum_size, char List_of_saved_wave_segments[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Count_Set (int session, int instance, unsigned int Count);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Count_Disable(int session, int instance, int WSEG_Index);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Count_Enable_Set(int session, int instance, int WSEG_Index);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Count_Enable_Get(int session, int instance, unsigned int maximum_size, char List_of_wave_segments[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Count_Get (int session, int instance, unsigned int *WList_count);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Data_Set(int session, int instance, unsigned int wsegment, const char* Waveform_Name);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Data_Get(int session, int instance, unsigned int wsegment, unsigned int maximum_size, char Waveform_Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Delete(int session, int instance, unsigned int wsegment);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Length_Set(int session, int instance, unsigned int wsegment, unsigned int Length_Samples);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Length_Get(int session, int instance, unsigned int wsegment, unsigned int *Length_Samples);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Marker_Set(int session, int instance, unsigned int wsegment, unsigned int marker, unsigned int Start_index, unsigned int Stop_index);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Marker_Get(int session, int instance, unsigned int wsegment, unsigned int marker, unsigned int *Start_index, unsigned int *Stop_index);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Next_Set(int session, int instance, unsigned int wsegment, unsigned int Wave_Segment);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Next_Get(int session, int instance, unsigned int wsegment, unsigned int *Wave_Segment);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Repeat_Set(int session, int instance, unsigned int wsegment, unsigned int Repeat_count);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Repeat_Get(int session, int instance, unsigned int wsegment, unsigned int *Repeat_count);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Save(int session, int instance, unsigned int wsegment);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Srate_Set(int session, int instance, unsigned int wsegment, unsigned int Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Srate_Get(int session, int instance, unsigned int wsegment, unsigned int *Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Start_Set(int session, int instance, unsigned int wsegment, unsigned int Starting_point_Samples);
LP_DRIVER_API int __cdecl LP_VSG_Wlist_Wsegment_Start_Get(int session, int instance, unsigned int wsegment, unsigned int *Starting_point_Samples);

LP_DRIVER_API int __cdecl LP_VSA_Capture_Time_Set(int session, int instance, double Capture_length);
LP_DRIVER_API int __cdecl LP_VSA_Capture_Time_Get(int session, int instance, double *Capture_length);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Set   (int session, int instance, double Frequency);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Get   (int session, int instance, double *Frequency);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Looffset_Set(int session, int instance, double Frequency);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Looffset_Get(int session, int instance, double *Frequency);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Offset_Table_State_Set(int session, int instance, enum LP_Boolean_t Frequency_offset_table_state);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Offset_Table_State_Get(int session, int instance, enum LP_Boolean_t *Frequency_offset_state);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Offset_Table_Use_Set(int session, int instance, const char* Name);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Offset_Table_Use_Get(int session, int instance, unsigned int maximum_size, char Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Step_Set(int session, int instance, double Frequency_step_size);
LP_DRIVER_API int __cdecl LP_VSA_Frequency_Step_Get(int session, int instance, double *Frequency_step_size);
LP_DRIVER_API int __cdecl LP_VSA_Initiate_Asegment(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Initiate_Asegment_Nblocked(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Initiate        (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Initiate_Nblocked(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Aoffset_Set     (int session, int instance, double Amplitude_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Aoffset_Get     (int session, int instance, double *Amplitude_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Dcoffset_Set    (int session, int instance, double I_DC_Offset, double Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Dcoffset_Get    (int session, int instance, double *I_DC_Offset, double *Q_DC_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Gdelay_Set      (int session, int instance, double Group_Delay);
LP_DRIVER_API int __cdecl LP_VSA_Gdelay_Get      (int session, int instance, double *Group_Delay);
LP_DRIVER_API int __cdecl LP_VSA_Iqinvert_Set    (int session, int instance, enum LP_Boolean_t Invert_State);
LP_DRIVER_API int __cdecl LP_VSA_Iqinvert_Get    (int session, int instance, enum LP_Boolean_t *Invert_State);
LP_DRIVER_API int __cdecl LP_VSA_Poffset_Set     (int session, int instance, double Phase_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Poffset_Get     (int session, int instance, double *Phase_Offset);
LP_DRIVER_API int __cdecl LP_VSA_Marker_External_Set(int session, int instance, unsigned int external, enum LP_Marker_Type_t Marker_source);
LP_DRIVER_API int __cdecl LP_VSA_Marker_External_Get(int session, int instance, unsigned int external, enum LP_Marker_Type_t *Marker_Source);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Ccount_Set(int session, int instance, unsigned int Multi_capture_Capture_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Ccount_Get(int session, int instance, unsigned int *Multi_capture_Capture_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Ctime_Set(int session, int instance, double Multi_capture_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Ctime_Get(int session, int instance, double *Multi_capture_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Offset_Set(int session, int instance, double Offset_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Offset_Get(int session, int instance, double *Offset_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_State_Set(int session, int instance, enum LP_Boolean_t Multi_capture_State);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_State_Get(int session, int instance, enum LP_Boolean_t *Multi_capture_State);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Time_Set(int session, int instance, double Multi_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mcapture_Time_Get(int session, int instance, double *Multi_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mdelay          (int session, int instance, double Delay_time);
LP_DRIVER_API int __cdecl LP_VSA_Measure_Coupling_Set(int session, int instance, enum LP_Coupling_Mode_t Couplings_mode);
LP_DRIVER_API int __cdecl LP_VSA_Measure_Coupling_Get(int session, int instance, enum LP_Coupling_Mode_t *Couplings_mode);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Asegment    (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Ccount_Set  (int session, int instance, unsigned int MPS_Capture_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Ccount_Get  (int session, int instance, unsigned int *MPS_Capture_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Ctime_Set   (int session, int instance, double MPS_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Ctime_Get   (int session, int instance, double *MPS_Capture_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Mode_Get    (int session, int instance, enum LP_MPS_mode_t *MPS_mode);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Offset_Set  (int session, int instance, double MPS_Offset_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Offset_Get  (int session, int instance, double *MPS_Offset_Time);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Spcount_Set (int session, int instance, unsigned int MPS_Skip_Packet_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Spcount_Get (int session, int instance, unsigned int *MPS_Skip_Packet_Count);
LP_DRIVER_API int __cdecl LP_VSA_Mps_State_Set   (int session, int instance, enum LP_Boolean_t MPS_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSA_Mps_State_Get   (int session, int instance, enum LP_Boolean_t *MPS_State_ON_OFF);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Time_Set    (int session, int instance, double Time);
LP_DRIVER_API int __cdecl LP_VSA_Mps_Time_Get    (int session, int instance, double *Time);
LP_DRIVER_API int __cdecl LP_VSA_Mrcl            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSA_Mrst            (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Msav            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSA_Msds            (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Arm       (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Arm_Hsn_Get(int session, int instance, unsigned int *Hardware_Status_Notification);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Slope_Set (int session, int instance, enum LP_Trigger_Slope_t Timer_Slope);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Slope_Get (int session, int instance, enum LP_Trigger_Slope_t *Timer_slope);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Smask_Set (int session, int instance, unsigned int Software_event_mask);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Smask_Get (int session, int instance, unsigned int *Software_event_mask);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Source_Set(int session, int instance, enum LP_Trigger_Source_t Trigger_source);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Source_Get(int session, int instance, enum LP_Trigger_Source_t *Trigger_source);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Type_Set  (int session, int instance, enum LP_Trigger_Type_t Trigger_type);
LP_DRIVER_API int __cdecl LP_VSA_Qwait_Type_Get  (int session, int instance, enum LP_Trigger_Type_t *Trigger_type);
LP_DRIVER_API int __cdecl LP_VSA_Rfcorrection_Loss_Get(int session, int instance, enum LP_Port_Name_t Port_name, double Frequency, double *Port_Correction);
LP_DRIVER_API int __cdecl LP_VSA_Rfcorrection_State_Set(int session, int instance, enum LP_Boolean_t Correction_state, enum LP_Port_Name_t Port_name);
LP_DRIVER_API int __cdecl LP_VSA_Rfcorrection_State_Get(int session, int instance, enum LP_Port_Name_t Port_name, enum LP_Boolean_t *RF_Correction_state);
LP_DRIVER_API int __cdecl LP_VSA_Rfcorrection_Use_Set(int session, int instance, const char* Name, enum LP_Port_Name_t Port_name);
LP_DRIVER_API int __cdecl LP_VSA_Rfcorrection_Use_Get(int session, int instance, enum LP_Port_Name_t Port_name, unsigned int maximum_size, char Name[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Set      (int session, int instance, double Reference_Level);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Auto     (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Auto_Time_Set(int session, int instance, double duration);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Auto_Time_Get(int session, int instance, double *duration);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Step_Set (int session, int instance, double Reference_Level_Step);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Step_Get (int session, int instance, double *Reference_Level_Step);
LP_DRIVER_API int __cdecl LP_VSA_Rlevel_Get      (int session, int instance, double *Reference_Level);
LP_DRIVER_API int __cdecl LP_VSA_Srate_Set       (int session, int instance, unsigned int Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSA_Srate_Get       (int session, int instance, unsigned int *Sampling_rate);
LP_DRIVER_API int __cdecl LP_VSA_Stype_Get       (int session, int instance, enum LP_Module_Subtype_t *Module_Subtype);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Arm       (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Slope_Set (int session, int instance, enum LP_Trigger_Slope_t Timer_Slope);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Slope_Get (int session, int instance, enum LP_Trigger_Slope_t *Timer_slope);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Source_Set(int session, int instance, enum LP_Timer_Source_t Timer_source);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Source_Get(int session, int instance, enum LP_Timer_Source_t *Timer_source);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Stop      (int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Synchronize(int session, int instance);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Set       (int session, int instance, double Periodic_timer_value);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Get       (int session, int instance, double *Periodic_timer_value);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Trigger_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Timer_Trigger_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Gap_Set (int session, int instance, double Gap_Time);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Gap_Get (int session, int instance, double *Gap_Time);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Level_Set(int session, int instance, double Trigger_Threshold);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Level_Get(int session, int instance, double *Trigger_threshold);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Mode_Set(int session, int instance, enum LP_Trigger_Mode_t Trigger_mode);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Mode_Get(int session, int instance, enum LP_Trigger_Mode_t *Trigger_mode);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Offset_Set(int session, int instance, double Trigger_offset_time);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Offset_Get(int session, int instance, double *Trigger_offset_time);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Slope_Set(int session, int instance, enum LP_Trigger_Slope_t Trigger_Slope);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Slope_Get(int session, int instance, enum LP_Trigger_Slope_t *Trigger_slope);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Source_Set(int session, int instance, enum LP_Trigger_Source_t Trigger_source);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Source_Get(int session, int instance, enum LP_Trigger_Source_t *Trigger_source);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Timeout_Set(int session, int instance, double Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Timeout_Get(int session, int instance, double *Timeout);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Type_Set(int session, int instance, enum LP_Trigger_Type_t Trigger_type);
LP_DRIVER_API int __cdecl LP_VSA_Trigger_Type_Get(int session, int instance, enum LP_Trigger_Type_t *Trigger_type);

LP_DRIVER_API int __cdecl LP_Rout_Mrcl           (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Rout_Mrst           (int session, int instance);
LP_DRIVER_API int __cdecl LP_Rout_Msav           (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Rout_Msds           (int session, int instance, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction(int session, int instance, unsigned int correction, double Frequency, double Correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Clear(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Clear_All(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Clear_Frequency(int session, int instance, unsigned int correction, double Frequency);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Data_Get(int session, int instance, unsigned int correction, unsigned int max_items, float Correction_table[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Delete(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Delete_All(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Restore(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Restore_All(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Save(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Save_All(int session, int instance, unsigned int correction);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_Use(int session, int instance, unsigned int correction, enum LP_Port_Name_t Port_name, enum LP_Port_t Resource1);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_State_Set(int session, int instance, enum LP_Port_Name_t Port_name, enum LP_Port_t Resource1, enum LP_Boolean_t Correction_state);
LP_DRIVER_API int __cdecl LP_Rout_Port_Correction_State_Get(int session, int instance, enum LP_Port_Name_t Port_name, enum LP_Port_t Resource1, enum LP_Boolean_t *Correction_state);
LP_DRIVER_API int __cdecl LP_Rout_Port_Mps_Rx_Get(int session, int instance, unsigned int maximum_size, char Current_MPS_RX_port_configuration[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_Rout_Port_Resource_Set(int session, int instance, enum LP_Port_Name_t Port_name, enum LP_Port_t Resource1, enum LP_Port_t Resource2);
LP_DRIVER_API int __cdecl LP_Rout_Port_Map_Get   (int session, int instance, enum LP_Port_t HW_Module, unsigned int max_items, enum LP_Port_Name_t  Port_map[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Rout_Port_Resource_Get(int session, int instance, enum LP_Port_Name_t Port_name, unsigned int max_items, enum LP_Port_t  Resource1[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_Rout_Stype_Get      (int session, int instance, enum LP_Module_Subtype_t *Module_Subtype);

LP_DRIVER_API int __cdecl LP_BP_Marker_External_Set(int session, unsigned int external, enum LP_Port_t HW_Module, enum LP_Marker_Type_t Marker_source);
LP_DRIVER_API int __cdecl LP_BP_Marker_External_Source_Set(int session, unsigned int external, enum LP_Marker_Type_t Marker_source);
LP_DRIVER_API int __cdecl LP_BP_Marker_External_Source_Get(int session, unsigned int external, enum LP_Marker_Type_t *Marker_source);
LP_DRIVER_API int __cdecl LP_BP_Marker_External_Get(int session, unsigned int external, enum LP_Port_t *HW_Module, enum LP_Marker_Type_t *Marker_source);
LP_DRIVER_API int __cdecl LP_BP_Mrcl             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BP_Mrst             (int session);
LP_DRIVER_API int __cdecl LP_BP_Msav             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BP_Msds             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BP_Roscillator_Set  (int session, enum LP_Reference_Oscillator_t Reference_Oscillator);
LP_DRIVER_API int __cdecl LP_BP_Roscillator_Get  (int session, enum LP_Reference_Oscillator_t *Reference_Oscillator);
LP_DRIVER_API int __cdecl LP_BP_Stype_Get        (int session, enum LP_Module_Subtype_t *Module_Subtype);

LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Ccdf(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Power(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Spectrum(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Txquality(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Segment_Ccdf(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Capture_Store_Normalized(int session, unsigned int segment, const char* File_Name, const char* Description_of_Capture, double Start_Offset, double Length);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_All    (int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_Ccdf   (int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_Power  (int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_Spectrum(int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_Synchronize(int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Clear_Txquality(int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Channel_Index_Set(int session, unsigned int Channel_Index);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Channel_Index_Get(int session, unsigned int *Channel_Index);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Enpower_Set(int session, double Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Enpower_Get(int session, double *Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Gap_Set(int session, double Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Gap_Get(int session, double *Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Ramp_Set(int session, enum LP_Packet_Detect_Ramp_Requirement_t Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Ramp_Get(int session, enum LP_Packet_Detect_Ramp_Requirement_t *Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Threshold_Set(int session, double Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Pdetection_Threshold_Get(int session, double *Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Standard_Set(int session, enum LP_Modulation_Type_t Modulation_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Standard_Get(int session, enum LP_Modulation_Type_t *Modulation_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Umargin_Set(int session, double User_Margin);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Umargin_Get(int session, double *User_Margin);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Gap_Set(int session, double Gap_Time);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Gap_Get(int session, double *Gap_Time);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Crc_Set(int session, enum LP_Boolean_t CRC_Setting);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Crc_Get(int session, enum LP_Boolean_t *CRC_Setting);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Data_Bits_Ascii_Get(int session, unsigned int maximum_size, char User_Specified_PSDU_Bits[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Data_Type_Set(int session, enum LP_PSDU_Setting_t PSDU_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Data_Type_Get(int session, enum LP_PSDU_Setting_t *PSDU_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Nbytes_Set(int session, unsigned int PSDU_Length_for_wave_generation_in_bytes);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Psdu_Nbytes_Get(int session, unsigned int *PSDU_Length_for_wave_generation_in_Bytes);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Standard_Set(int session, enum LP_Modulation_Type_t Modulation_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Configure_Wave_Standard_Get(int session, enum LP_Modulation_Type_t *Modulation_Type);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Ccdf_Gaussian_Power(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_refence_Gaussian_CCDF_power_above_average_X_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Ccdf_Gaussian_Probability(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_refence_Gaussian_CCDF_Probability_Y_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Ccdf_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Ccdf_Power(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_CCDF_power_above_average_X_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Ccdf_Probability(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_CCDF_Probability_Y_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Peak_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Peak_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Peak_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Peak_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Peak(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Average_Hlimit_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum_Mask_Corner_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Average_Ofrequency_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Hlimit_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mask_Corner_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Ofrequency_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Ofrequency(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Spectrum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Synchronize_Petime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_End_Time_sec[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Synchronize_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Synchronize_Pstime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_Start_Time_sec[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Synchronize(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_packets_including_incomplete_packets_found[], int Number_of_complete_packets_found[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Constellation_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Constellation_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Evmchip(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_versus_Chip[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Evmsymbol(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_vs_Symbol[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Eye_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Eye_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Eye_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Info_Drate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Data_Rate[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Info_Modulation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Modulation_Index[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Info_Nsymbols(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Symbols[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Pechip(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_Error_versus_Chip[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Txquality_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Preamble_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Preamble_bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Psdu_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PSDU_bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Psdu_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int CRC_Status_for_PSDU[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Psdu_Nbytes(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Length_of_PSDU[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Fetch_Segment_Txquality_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Hset_All     (int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Hset_Frequency_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Hset_Frequency_Get(int session, enum LP_Port_t HW_Module, double *Frequency);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Hset_Rlevel_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Hset_Rlevel_Get(int session, int HW_Module, double *Reference_Level);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Mrcl         (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Mrst         (int session);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Msav         (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Msds         (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_ZIGBEE_Wave_Generate_Mmemory(int session, const char* File_Name, const char* optional_Description_of_Waveform);

LP_DRIVER_API int __cdecl LP_DECT_Calculate_Power(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
LP_DRIVER_API int __cdecl LP_DECT_Calculate_Txquality(int session, unsigned int Slot_Offset, unsigned int Frame_Count);
LP_DRIVER_API int __cdecl LP_DECT_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
LP_DRIVER_API int __cdecl LP_DECT_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Slot_Offset, unsigned int Frame_Count);
LP_DRIVER_API int __cdecl LP_DECT_Clear_All      (int session);
LP_DRIVER_API int __cdecl LP_DECT_Clear_Power    (int session);
LP_DRIVER_API int __cdecl LP_DECT_Clear_Txquality(int session);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Band_Set(int session, enum LP_Band_t Band);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Band_Get(int session, enum LP_Band_t *Band);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Carrier_Set(int session, unsigned int Carrier_Number);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Carrier_Get(int session, unsigned int *Carrier_Number);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Enpower_Set(int session, double Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Enpower_Get(int session, double *Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Direction_Set(int session, enum LP_Signal_Direction_t Signal_Direction);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Direction_Get(int session, enum LP_Signal_Direction_t *Signal_Direction);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Gap_Set(int session, double Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Gap_Get(int session, double *Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Ramp_Set(int session, enum LP_Packet_Detect_Ramp_Requirement_t Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Ramp_Get(int session, enum LP_Packet_Detect_Ramp_Requirement_t *Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Threshold_Set(int session, double Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Pdetection_Threshold_Get(int session, double *Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Txquality_Ber_Data_Bits_Ascii_Get(int session, unsigned int maximum_size, char Data_Bit_Pattern[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Umargin_Set(int session, double User_Margin);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Umargin_Get(int session, double *User_Margin);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_A_Data_Bits_Ascii_Get(int session, unsigned int Slot_Number, unsigned int maximum_size, char A_Field_Bit_Pattern[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_B_Data_Bits_Ascii_Get(int session, unsigned int Slot_Number, unsigned int maximum_size, char B_Field_Bit_Pattern[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Direction_Set(int session, unsigned int Slot_Number, enum LP_Signal_Direction_t Signal_Direction);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Direction_Get(int session, unsigned int Slot_Number, enum LP_Signal_Direction_t *Signal_Direction);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Preamble_Set(int session, unsigned int Slot_Number, enum LP_Preamble_Type_t Preamble_Type);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Preamble_Get(int session, unsigned int Slot_Number, enum LP_Preamble_Type_t *Preamble_Type);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Ptype_Set(int session, unsigned int Slot_Number, enum LP_Packet_Type_t Packet_Type);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Ptype_J_Set(int session, unsigned int Slot_Number, unsigned int Value_j_for_P00j);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Ptype_J_Get(int session, unsigned int Slot_Number, unsigned int *Value_j_for_P00j);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Ptype_Get(int session, unsigned int Slot_Number, enum LP_Packet_Type_t *Packet_Type);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Rpower_Set(int session, unsigned int Slot_Number, double Relative_Power_Level);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Rpower_Get(int session, unsigned int Slot_Number, double *Relative_Power_Level);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_X_Data_Bits_Ascii_Get(int session, unsigned int Slot_Number, unsigned int maximum_size, char X_Field_Bit_Pattern[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Z_Data_Bits_Ascii_Get(int session, unsigned int Slot_Number, unsigned int maximum_size, char Z_Field_Bit_Pattern[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Z_State_Set(int session, unsigned int Slot_Number, enum LP_Boolean_t Z_Field_State);
LP_DRIVER_API int __cdecl LP_DECT_Configure_Wave_Z_State_Get(int session, unsigned int Slot_Number, enum LP_Boolean_t *Z_Field_State);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Average_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Normal_Transmitted_Power_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Average_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Normal_Transmitted_Power_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Normal_Transmitted_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Normal_Transmitted_Power_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Normal_Transmitted_Power_HLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Normal_Transmitted_Power_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Maximum_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Normal_Transmitted_Power_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Maximum_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Normal_Transmitted_Power_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Normal_Transmitted_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Ptiming(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Packet_Timing[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Average_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Power_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Average_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Power_vs_Time_HLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Average_Llimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Power_vs_Time_LLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Average_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Power_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Power_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Power_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Power_vs_Time_HLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Llimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Power_vs_Time_LLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Maximum_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Power_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Maximum_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Power_vs_Time_HLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Maximum_Llimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Power_vs_Time_LLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Maximum_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Power_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Power_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Power_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime_Snumber(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Symbol_Numbers_of_PVT[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Pvtime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Power_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Normal_Transmitted_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power_Snumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Slot_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Taccuracy_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Accuracy_HLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Taccuracy_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Accuracy_LLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Taccuracy_Total_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Timing_Accuracy_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Taccuracy_Total(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Accuracy[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Tjitter_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Jitter_HLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Tjitter_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Jitter_LLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Tjitter_Total_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Min_Timing_Jitter_Chk[], int Max_Timing_Jitter_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Tjitter_Total(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Min_Timing_Jitter[], float  Max_Timing_Jitter[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Tjitter(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Timing_Jitter[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Normal_Transmitted_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Average_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Frequency_Offset_Chk[], int Avg_Frequency_Drift_Chk[], int Avg_Frequency_Deviation_Peak_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Average_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Frequency_Offset_Mrg[], float  Avg_Frequency_Drift_Mrg[], float  Avg_Frequency_Deviation_Peak_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Frequency_Offset[], float  Avg_Frequency_Drift[], float  Avg_Frequency_Deviation_Peak[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Data_Bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Frequency_Offset_Chk[], int Frequency_Drift_Chk[], int Frequency_Deviation_Peak_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Direction(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Signal_Direction[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Average_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Frequency_Deviation_Tot_Neg_Chk[], int Avg_Frequency_Deviation_Tot_Pos_Chk[], int Avg_Frequency_Deviation_S_Neg_Chk[], int Avg_Frequency_Deviation_S_Pos_Chk[], int Avg_Frequency_Deviation_B_Neg_Chk[], int Avg_Frequency_Deviation_B_Pos_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Average_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Frequency_Deviation_Tot_Neg_Mrg[], float  Avg_Frequency_Deviation_Tot_Pos_Mrg[], float  Avg_Frequency_Deviation_S_Neg_Mrg[], float  Avg_Frequency_Deviation_S_Pos_Mrg[], float  Avg_Frequency_Deviation_B_Neg_Mrg[], float  Avg_Frequency_Deviation_B_Pos_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Frequency_Deviation_Tot_Neg[], float  Avg_Frequency_Deviation_Tot_Pos[], float  Avg_Frequency_Deviation_S_Neg[], float  Avg_Frequency_Deviation_S_Pos[], float  Avg_Frequency_Deviation_B_Neg[], float  Avg_Frequency_Deviation_B_Pos[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Frequency_Deviation_Tot_Neg_Chk[], int Frequency_Deviation_Tot_Pos_Chk[], int Frequency_Deviation_S_Neg_Chk[], int Frequency_Deviation_S_Pos_Chk[], int Frequency_Deviation_B_Neg_Chk[], int Frequency_Deviation_B_Pos_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Deviation_Tot_Neg_HLim[], float  Frequency_Deviation_Tot_Pos_HLim[], float  Frequency_Deviation_S_Neg_HLim[], float  Frequency_Deviation_S_Pos_HLim[], float  Frequency_Deviation_B_Neg_HLim[], float  Frequency_Deviation_B_Pos_HLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Deviation_Tot_Neg_LLim[], float  Frequency_Deviation_Tot_Pos_LLim[], float  Frequency_Deviation_S_Neg_LLim[], float  Frequency_Deviation_S_Pos_LLim[], float  Frequency_Deviation_B_Neg_LLim[], float  Frequency_Deviation_B_Pos_LLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Deviation_Tot_Neg_Mrg[], float  Frequency_Deviation_Tot_Pos_Mrg[], float  Frequency_Deviation_S_Neg_Mrg[], float  Frequency_Deviation_S_Pos_Mrg[], float  Frequency_Deviation_B_Neg_Mrg[], float  Frequency_Deviation_B_Pos_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Maximum_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Frequency_Deviation_Tot_Neg_Chk[], int Max_Frequency_Deviation_Tot_Pos_Chk[], int Max_Frequency_Deviation_S_Neg_Chk[], int Max_Frequency_Deviation_S_Pos_Chk[], int Max_Frequency_Deviation_B_Neg_Chk[], int Max_Frequency_Deviation_B_Pos_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Maximum_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Frequency_Deviation_Tot_Neg_Mrg[], float  Max_Frequency_Deviation_Tot_Pos_Mrg[], float  Max_Frequency_Deviation_S_Neg_Mrg[], float  Max_Frequency_Deviation_S_Pos_Mrg[], float  Max_Frequency_Deviation_B_Neg_Mrg[], float  Max_Frequency_Deviation_B_Pos_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Frequency_Deviation_Tot_Neg[], float  Max_Frequency_Deviation_Tot_Pos[], float  Max_Frequency_Deviation_S_Neg[], float  Max_Frequency_Deviation_S_Pos[], float  Max_Frequency_Deviation_B_Neg[], float  Max_Frequency_Deviation_B_Pos[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Frequency_Deviation_Tot_Neg[], float  Std_of_Frequency_Deviation_Tot_Pos[], float  Std_of_Frequency_Deviation_S_Neg[], float  Std_of_Frequency_Deviation_S_Pos[], float  Std_of_Frequency_Deviation_B_Neg[], float  Std_of_Frequency_Deviation_B_Pos[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Deviation_Tot_Neg[], float  Frequency_Deviation_Tot_Pos[], float  Frequency_Deviation_S_Neg[], float  Frequency_Deviation_S_Pos[], float  Frequency_Deviation_B_Neg[], float  Frequency_Deviation_B_Pos[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Average_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Frequency_Deviation_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Average_Margin_Snumber(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Symbol_Numbers_of_FDVT_Mrg_Syms[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Average_Margin_Value(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Frequency_Deviation_vs_Time_Mrg_Val[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Average_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Frequency_Deviation_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Frequency_Deviation_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Frequency_Deviation_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Deviation_vs_Time_HLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Llimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Deviation_vs_Time_LLim[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Margin_Snumber(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Symbol_Numbers_of_FDVT_Mrg_Syms[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Margin_Value(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Deviation_vs_Time_Mrg_Val[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Deviation_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Maximum_Check_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Frequency_Deviation_vs_Time_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Maximum_Margin_Snumber(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Symbol_Numbers_of_FDVT_Mrg_Syms[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Maximum_Margin_Value(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Frequency_Deviation_vs_Time_Mrg_Val[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Maximum_Margin_Worst(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Frequency_Deviation_vs_Time_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Frequency_Deviation_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Frequency_Deviation_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime_Snumber(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Symbol_Numbers_of_FDVT[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Fdvtime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Deviation_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Flengths(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int S_Field_Length[], int A_Field_Length[], int B_Field_Length[], int X_Field_Length[], int Z_Field_Length[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_HLim[], float  Frequency_Drift_HLim[], float  Frequency_Deviation_Peak_HLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_LLim[], float  Frequency_Drift_LLim[], float  Frequency_Deviation_Peak_LLim[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_Mrg[], float  Frequency_Drift_Mrg[], float  Frequency_Deviation_Peak_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Maximum_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Frequency_Offset_Chk[], int Max_Frequency_Drift_Chk[], int Max_Frequency_Deviation_Peak_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Maximum_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Frequency_Offset_Mrg[], float  Max_Frequency_Drift_Mrg[], float  Max_Frequency_Deviation_Peak_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Frequency_Offset[], float  Max_Frequency_Drift[], float  Max_Frequency_Deviation_Peak[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Ptype(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Type[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Frequency_Offset[], float  Std_of_Frequency_Drift[], float  Std_of_Frequency_Deviation_Peak[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality_Snumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Slot_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Fetch_Segment_Txquality(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset[], float  Frequency_Drift[], float  Frequency_Deviation_Peak[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_DECT_Hset_All       (int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_DECT_Hset_Frequency_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_DECT_Hset_Frequency_Get(int session, enum LP_Port_t HW_Module, double *Frequency);
LP_DRIVER_API int __cdecl LP_DECT_Hset_Rlevel_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_DECT_Hset_Rlevel_Get(int session, int HW_Module, double *Reference_Level);
LP_DRIVER_API int __cdecl LP_DECT_Mrcl           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_DECT_Mrst           (int session);
LP_DRIVER_API int __cdecl LP_DECT_Msav           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_DECT_Msds           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_DECT_Wave_Generate_Mmemory(int session, const char* File_Name, const char* optional_Description_of_Waveform);


#ifdef __cplusplus
}
#endif
