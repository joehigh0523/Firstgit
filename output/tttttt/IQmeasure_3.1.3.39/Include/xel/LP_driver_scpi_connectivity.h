/*
  Litepoint Instrument Driver
  (C) Litepoint 2011, All rights reserved
*/
#include "LP_driver_enums.h"

#ifdef __cplusplus
extern "C" {
#endif

LP_DRIVER_API int __cdecl LP_BT_Calculate_Acpower(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_All    (int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Power  (int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Spectrum(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Txquality(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Segment_Acpower(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Segment_All(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_BT_Clear_Acpower    (int session);
LP_DRIVER_API int __cdecl LP_BT_Clear_All        (int session);
LP_DRIVER_API int __cdecl LP_BT_Clear_Power      (int session);
LP_DRIVER_API int __cdecl LP_BT_Clear_Spectrum   (int session);
LP_DRIVER_API int __cdecl LP_BT_Clear_Synchronize(int session);
LP_DRIVER_API int __cdecl LP_BT_Clear_Txquality  (int session);
LP_DRIVER_API int __cdecl LP_BT_Configure_Channel_Set(int session, unsigned int Channel_Number);
LP_DRIVER_API int __cdecl LP_BT_Configure_Channel_Get(int session, unsigned int *Channel_Number);
LP_DRIVER_API int __cdecl LP_BT_Configure_Drate_Set(int session, enum LP_BT_Data_Rate_t BT_Data_Rate);
LP_DRIVER_API int __cdecl LP_BT_Configure_Drate_Get(int session, enum LP_BT_Data_Rate_t *BT_Data_Rate);
LP_DRIVER_API int __cdecl LP_BT_Configure_Enpower_Set(int session, double Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_BT_Configure_Enpower_Get(int session, double *Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ifbw_Set(int session, enum LP_IF_BW_t IF_BW);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ifbw_Get(int session, enum LP_IF_BW_t *BT_IF_BW);
LP_DRIVER_API int __cdecl LP_BT_Configure_Lenergy_Ptdetection_Set(int session, enum LP_LE_Payload_Type_Detection_t LE_Payload_Type_Detection);
LP_DRIVER_API int __cdecl LP_BT_Configure_Lenergy_Ptdetection_Get(int session, enum LP_LE_Payload_Type_Detection_t *LE_Payload_Type_Detection);
LP_DRIVER_API int __cdecl LP_BT_Configure_Lenergy_Sword_Set(int session, unsigned int LE_Sync_Word);
LP_DRIVER_API int __cdecl LP_BT_Configure_Lenergy_Sword_Get(int session, unsigned int *LE_Sync_Word);
LP_DRIVER_API int __cdecl LP_BT_Configure_Pdetection_Gap_Set(int session, double Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Pdetection_Gap_Get(int session, double *Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Pdetection_Threshold_Set(int session, double Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_BT_Configure_Pdetection_Threshold_Get(int session, double *Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ca4C_Pthreshold_Set(int session, double Power_Threshold);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ca4C_Pthreshold_Get(int session, double *Power_Detect_Power_Threshold);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ca4C_Set(int session, enum LP_Boolean_t Sets_TRMCA04C_Calculation);
LP_DRIVER_API int __cdecl LP_BT_Configure_Ca4C_Get(int session, enum LP_Boolean_t *Status_of_TRMCA04C_calculation_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Synchronize_Offset_Set(int session, double Time_Offset);
LP_DRIVER_API int __cdecl LP_BT_Configure_Synchronize_Offset_Get(int session, double *Time_Offset);
LP_DRIVER_API int __cdecl LP_BT_Configure_Umargin_Set(int session, double User_Margin);
LP_DRIVER_API int __cdecl LP_BT_Configure_Umargin_Get(int session, double *User_Margin);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lap_Set(int session, unsigned int LAP);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lap_Get(int session, unsigned int *LAP);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Uap_Set(int session, unsigned int UAP);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Uap_Get(int session, unsigned int *UAP);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Beones_Set(int session, enum LP_Boolean_t Set_Back_End_Ones_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Beones_Get(int session, enum LP_Boolean_t *Status_of_Back_End_Ones_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Btproduct_Set(int session, double BT_Product);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Btproduct_Get(int session, double *BT_Product);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Eroff_Set(int session, enum LP_EDR_Roll_Off_t EDR_Roll_Off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Eroff_Get(int session, enum LP_EDR_Roll_Off_t *EDR_Roll_Off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fdfrequency_Set(int session, unsigned num_values, double Frequency_Drift_Frequency[]);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fdfrequency_Get(int session, unsigned int max_items, double Frequency_Drift_Frequency[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fdtime_Set(int session, unsigned num_values, double Frequency_Drift_Time[]);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fdtime_Get(int session, unsigned int max_items, double Frequency_Drift_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fezeros_Set(int session, enum LP_Boolean_t Set_Front_End_Zeros_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Fezeros_Get(int session, enum LP_Boolean_t *Status_of_Front_End_Zeros_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Foffset_Set(int session, double Frequency_Offset);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Foffset_Get(int session, double *Frequency_Offset);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Gtime_Set(int session, double Guard_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Gtime_Get(int session, double *Guard_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lenergy_Ptype_Set(int session, int LE_Payload_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lenergy_Ptype_Get(int session, int *LE_Payload_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lenergy_Sword_Set(int session, unsigned int LE_Sync_Word);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Lenergy_Sword_Get(int session, unsigned int *LE_Sync_Word);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Mindex_Set(int session, double Modulation_Index);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Mindex_Get(int session, double *Modulation_Index);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdheader_Flow_Set(int session, enum LP_Boolean_t Set_Payload_Header_Flow_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdheader_Flow_Get(int session, enum LP_Boolean_t *Status_of_Payload_Header_Flow_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdheader_Llid_Set(int session, unsigned int Payload_Header_LLID);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdheader_Llid_Get(int session, unsigned int *Payload_Header_LLID);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdtype_Set(int session, enum LP_Payload_Type_t Payload_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdtype_Get(int session, enum LP_Payload_Type_t *Payload_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdubits_Ascii_Get(int session, unsigned int maximum_size, char User_Specified_Data_Bits[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdubits_Udhcrc_Set(int session, enum LP_Boolean_t User_defined_payload_header_CRC_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdubits_Udhcrc_Get(int session, enum LP_Boolean_t *Status_of_User_defined_payload_header_CRC_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pdubits_Get(int session, unsigned int maximum_size, char User_specified_data_bits[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Arqn_Set(int session, enum LP_Boolean_t Set_Packet_Header_ARQN_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Arqn_Get(int session, enum LP_Boolean_t *Status_of_Packet_Header_ARQN_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Flow_Set(int session, enum LP_Boolean_t Set_FLOW_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Flow_Get(int session, enum LP_Boolean_t *Status_of_Packet_Header_FLOW_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Ltaddress_Set(int session, unsigned int Packet_Header_LT_Address);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Ltaddress_Get(int session, unsigned int *Packet_Header_LT_Address);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Seqn_Set(int session, enum LP_Boolean_t Set_Packet_Header_SEQN_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Seqn_Get(int session, enum LP_Boolean_t *Status_of_Packet_Header_SEQN_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Set(int session, enum LP_Boolean_t Set_Packet_Header_Enable_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Pheader_Get(int session, enum LP_Boolean_t *Status_of_Packet_Header_Enable_on_or_off);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Plength_Set(int session, unsigned int Payload_Length);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Plength_Get(int session, unsigned int *Payload_Length);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Ptype_Set(int session, enum LP_Packet_Type_t Packet_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Ptype_Get(int session, enum LP_Packet_Type_t *Packet_Type);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Ramp_Time_Set(int session, double Ramp_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Ramp_Time_Get(int session, double *Ramp_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Rtime_Set(int session, unsigned int Repeat_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Rtime_Get(int session, unsigned int *Repeat_Time);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Sbit_Set(int session, int Start_Bit);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Sbit_Get(int session, int *Start_Bit);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Sroffset_Set(int session, double Symbol_Rate_Offset);
LP_DRIVER_API int __cdecl LP_BT_Configure_Wave_Sroffset_Get(int session, double *Symbol_Rate_Offset_PPM);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Average_ACP[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Check(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *ACP_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Cngpower(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Coffset_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP_Mask_Channel_Offsets[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Coffset(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP_Channel_Offsets[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Hlimit_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP_Mask[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP_High_Limit[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Margin(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP_Margin[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Maximum_ACP[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Acpower(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *ACP[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Power_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  high_Power_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Low_Power_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power_Margin[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Maximum_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Minimum_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Peak_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_Peak_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Peak_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Maximum_Peak_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Peak_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Minimum_Peak_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Peak_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Peak_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Peak(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_20dB_Bandwidth[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int _20dB_Bandwidth_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Data_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mask_Corner[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Data(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Data[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  _20dB_Bandwidth_High_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  _20dB_Bandwidth_Margin[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  maximum_20dB_Bandwidth[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Ofrequency_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequency_Corner[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Ofrequency(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequency[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  std_of_20dB_Bandwidth[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_20Bw(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  _20dB_Bandwidth[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Ca4C_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  TRMCA04C_lower_frequency[], float  TRMCA04C_upper_frequency[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Spectrum_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Spectrum_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Synchronize_Pcomplete(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Packet_Complete_Status[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Synchronize_Petime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_End_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Synchronize_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Synchronize_Pstime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_Start_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Synchronize(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_packets_found[], int Number_of_complete_packets_found[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Acode(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Access_Code[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_of_Initial_Frequency_Offset[], float  Average_of_Frequency_Offset_Measured_in_Header[], float  Average_of_Frequency_Drift[], float  Average_of_Frequency_Deviation[], float  Average_of_Peak_to_Peak_Frequency_Deviation[], float  Average_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Average_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], float  Average_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average[], float  Average_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average[], float  Average_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max[], float  Average_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate[], float  Average_of_Payload_Errors[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Initial_Frequency_Offset_Check[], int Frequency_Offset_Measured_in_Header_Check[], int Frequency_Drift_Check[], int Frequency_Deviation_Check[], int Peak_to_Peak_Frequency_Deviation_Check[], int Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Check[], int Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Check[], int Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Check[], int Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Check[], int Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Check[], int Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Check[], int Payload_Errors_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Df2Max_Fcount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Symbol_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Df2Max_Tcount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Symbol_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Eye_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Eye(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *BT_Classic_Eye_diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Header(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Header[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Initial_Frequency_Offset_High_Limit[], float  Frequency_Offset_Measured_in_Header_High_Limit[], float  Frequency_Drift_High_Limit[], float  Frequency_Deviation_High_Limit[], float  Peak_to_Peak_Frequency_Deviation_High_Limit[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_High_Limit[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_High_Limit[], float  Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_High_Limit[], float  Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_High_Limit[], float  Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_High_Limit[], float  Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_High_Limit[], float  Payload_Errors_High_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Initial_Frequency_Offset_Low_Limit[], float  Frequency_Offset_Measured_in_Header_Low_Limit[], float  Frequency_Drift_Low_Limit[], float  Frequency_Deviation_Low_Limit[], float  Peak_to_Peak_Frequency_Deviation_Low_Limit[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Low_Limit[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Low_Limit[], float  Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Low_Limit[], float  Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Low_Limit[], float  Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Low_Limit[], float  Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Low_Limit[], float  Payload_Errors_Low_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Initial_Frequency_Offset_Margin[], float  Frequency_Offset_Measured_in_Header_Margin[], float  Frequency_Drift_Margin[], float  Frequency_Deviation_Margin[], float  Peak_to_Peak_Frequency_Deviation_Margin[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Margin[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Margin[], float  Average_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average_Margin[], float  Average_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average_Margin[], float  Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max_Margin[], float  Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate_Margin[], float  Payload_Errors_Margin[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Maximum_of_Initial_Frequency_Offset[], float  Maximum_of_Frequency_Offset_Measured_in_Header[], float  Maximum_of_Frequency_Drift[], float  Maximum_of_Frequency_Deviation[], float  Maximum_of_Peak_to_Peak_Frequency_Deviation[], float  Maximum_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Maximum_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], float  Maximum_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average[], float  Maximum_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average[], float  Maximum_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max[], float  Maximum_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate[], float  Maximum_of_Payload_Errors[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Classic_Payload(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Payload[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Initial_Frequency_Offset[], float  Std_of_Frequency_Offset_Measured_in_Header[], float  Std_of_Frequency_Drift[], float  Std_of_Frequency_Deviation[], float  Std_of_Peak_to_Peak_Frequency_Deviation[], float  Std_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Std_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], float  Std_of_Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average[], float  Std_of_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average[], float  Std_of_Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max[], float  Std_of_Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate[], float  Std_of_Payload_Errors[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Classic(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Initial_Frequency_Offset[], float  Frequency_Offset_Measured_in_Header[], float  Frequency_Drift[], float  Frequency_Deviation[], float  Peak_to_Peak_Frequency_Deviation[], float  Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], float  Frequency_Offset_Measured_using_00001111_Pattern_deltaF1Average[], float  Frequency_Offset_Measured_using_1010_Pattern_deltaF2Average[], float  Max_Frequency_Offset_Measured_using_1010_Pattern_deltaF2Max[], float  Max_Frequency_Drift_Rate_Measured_using_1010_Pattern_maxfreqDriftRate[], float  Payload_Errors[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Ddrate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Type[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_99Evm(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  DEVM_99_PCT[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Acode(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Access_Code[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_of_EVM_RMS[], float  Average_of_EVM_Peak[], float  Average_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold[], float  Average_of_Frequency_Offset_Measured_in_Header_OmegaI[], float  Average_of_Frequency_Variation_Extreme_FreqExtreme[], float  Average_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0[], float  Average_of_Power_Difference_with_FM_Header_PowDiffdB[], float  Average_of_Initial_Frequency_Offset[], float  Average_of_Frequency_Deviation[], float  Average_of_Peak_to_Peak_Frequency_Deviation[], float  Average_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Average_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int EVM_Average_Check[], int EVM_Peak_Check[], int Percent_of_symbols_with_Avergae_EVM_below_Threshold_Check[], int Frequency_Offset_Measured_in_Header_OmegaI_Check[], int Frequency_Variation_Extreme_FreqExtreme_Check[], int Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Check[], int Power_Difference_with_FM_Header_PowDiffdB_Check[], int Initial_Frequency_Offset_Check[], int Frequency_Deviation_Check[], int Peak_to_Peak_Frequency_Deviation_Check[], int Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Check[], int Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Data_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Imaginary[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Data_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Real[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Evmtime_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Evmtime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_Vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Eye_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Eye(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EDR_Eye_diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Ftime_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Ftime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Header(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Header[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average_High_Limit[], float  EVM_Peak_High_Limit[], float  Percent_of_symbols_with_Avergae_EVM_below_Threshold_High_Limit[], float  Frequency_Offset_Measured_in_Header_OmegaI_High_Limit[], float  Frequency_Variation_Extreme_FreqExtreme_High_Limit[], float  Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_High_Limit[], float  Power_Difference_with_FM_Header_PowDiffdB_High_Limit[], float  Initial_Frequency_Offset_High_Limit[], float  Frequency_Deviation_High_Limit[], float  Peak_to_Peak_Frequency_Deviation_High_Limit[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_High_Limit[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_High_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average_Low_Limit[], float  EVM_Peak_Low_Limit[], float  Percent_of_symbols_with_Avergae_EVM_below_Threshold_Low_Limit[], float  Frequency_Offset_Measured_in_Header_OmegaI_Low_Limit[], float  Frequency_Variation_Extreme_FreqExtreme_Low_Limit[], float  Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Low_Limit[], float  Power_Difference_with_FM_Header_PowDiffdB_Low_Limit[], float  Initial_Frequency_Offset_Low_Limit[], float  Frequency_Deviation_Low_Limit[], float  Peak_to_Peak_Frequency_Deviation_Low_Limit[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Low_Limit[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Low_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average_Margin[], float  EVM_Peak_Margin[], float  Percent_of_symbols_with_Avergae_EVM_below_Threshold_Margin[], float  Frequency_Offset_Measured_in_Header_OmegaI_Margin[], float  Frequency_Variation_Extreme_FreqExtreme_Margin[], float  Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0_Margin[], float  Power_Difference_with_FM_Header_PowDiffdB_Margin[], float  Initial_Frequency_Offset_Margin[], float  Frequency_Deviation_Margin[], float  Peak_to_Peak_Frequency_Deviation_Margin[], float  Average_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess_Margin[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess_Margin[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Maximum_of_EVM_RMS[], float  Maximum_of_EVM_Peak[], float  Maximum_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold[], float  Maximum_of_Frequency_Offset_Measured_in_Header_OmegaI[], float  Maximum_of_Frequency_Variation_Extreme_FreqExtreme[], float  Maximum_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0[], float  Maximum_of_Power_Difference_with_FM_Header_PowDiffdB[], float  Maximum_of_Initial_Frequency_Offset[], float  Maximum_of_Frequency_Deviation[], float  Maximum_of_Peak_to_Peak_Frequency_Deviation[], float  Maximum_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Maximum_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Payload(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Payload[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Perror(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Payload_Error[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Edrate_Power(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_GFSK_Power[], float  Average_DPSK_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_EVM_RMS[], float  Std_of_EVM_Peak[], float  Std_of_Percent_of_symbols_with_Avergae_EVM_below_Threshold[], float  Std_of_Frequency_Offset_Measured_in_Header_OmegaI[], float  Std_of_Frequency_Variation_Extreme_FreqExtreme[], float  Std_of_Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0[], float  Std_of_Power_Difference_with_FM_Header_PowDiffdB[], float  Std_of_Initial_Frequency_Offset[], float  Std_of_Frequency_Deviation[], float  Std_of_Peak_to_Peak_Frequency_Deviation[], float  Std_of_Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Std_of_Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Edrate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_RMS[], float  EVM_Peak[], float  Percent_of_symbols_with_Avergae_EVM_below_Threshold[], float  Frequency_Offset_Measured_in_Header_OmegaI[], float  Frequency_Variation_Extreme_FreqExtreme[], float  Extreme_of_Sum_of_Measured_Frequency_Variation_and_Frequency_Offset_ExtremeOmegaI0[], float  Power_Difference_with_FM_Header_PowDiffdB[], float  Initial_Frequency_Offset[], float  Frequency_Deviation[], float  Peak_to_Peak_Frequency_Deviation[], float  Frequency_Offset_Measured_Using_Access_Code_deltaF2AvAccess[], float  Max_Frequency_Offset_Measured_Using_Access_Code_deltaF2MaxAccess[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Fmdemodulation_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Instants[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Fmdemodulation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *FM_Demodulation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Average_of_Frequency_Offset[], float  Average_of_Delta_F1_Average[], float  Average_of_Delta_F2_Average[], float  Average_of_Min_Delta_F2_Max_DeltaF2MaxMinValue[], float  Average_of_Frequency_deviation_during_sync_FreqDevSyncAv[], float  Average_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax[], float  Average_of_DeltaF0FnMax_for_10101010[], float  Average_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0[], float  Average_of_DeltaFnFn_5Max_for_10101010[], float  Average_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max[], float  Average_of_CRC_valid[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Frequency_Offset_Check[], int Delta_F1_Average_Check[], int Delta_F2_Average_Check[], int Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Check[], int Average_frequency_deviation_during_sync_FreqDevSyncAv_Check[], int Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Check[], int DeltaF0FnMax_for_10101010_Check[], int Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Check[], int DeltaFnFn_5Max_for_10101010_Check[], int Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Check[], int CRC_valid_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Crc(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *CRC[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Df2Max_Tcount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Symbol_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Df2Max_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Symbol_Index_in_Payload[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Df2Max(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *LE_Delta_F2_Max[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_High_Limit[], float  Delta_F1_Average_High_Limit[], float  Delta_F2_Average_High_Limit[], float  Min_of_Delta_F2_Max_DeltaF2MaxMinValue_High_Limit[], float  Average_frequency_deviation_during_sync_FreqDevSyncAv_High_Limit[], float  Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_High_Limit[], float  DeltaF0FnMax_for_10101010_High_Limit[], float  Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_High_Limit[], float  DeltaFnFn_5Max_for_10101010_High_Limit[], float  Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_High_Limit[], float  CRC_valid_High_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Isofrequency_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Index[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Isofrequency(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *LE_Fn[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_Low_Limit[], float  Delta_F1_Average_Low_Limit[], float  Delta_F2_Average_Low_Limit[], float  Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Low_Limit[], float  Average_frequency_deviation_during_sync_FreqDevSyncAv_Low_Limit[], float  Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Low_Limit[], float  DeltaF0FnMax_for_10101010_Low_Limit[], float  Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Low_Limit[], float  DeltaFnFn_5Max_for_10101010_Low_Limit[], float  Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Low_Limit[], float  CRC_valid_Low_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset_Margin[], float  Delta_F1_Average_Margin[], float  Delta_F2_Average_Margin[], float  Min_of_Delta_F2_Max_DeltaF2MaxMinValue_Margin[], float  Average_frequency_deviation_during_sync_FreqDevSyncAv_Margin[], float  Max_of_absolue_of_Average_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax_Margin[], float  DeltaF0FnMax_for_10101010_Margin[], float  Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0_Margin[], float  DeltaFnFn_5Max_for_10101010_Margin[], float  Number_of_symbols_with_deviation_below_185kHz_Below185F2Max_Margin[], float  CRC_valid_Margin[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Maximum_of_Frequency_Offset[], float  Maximum_of_Delta_F1_Average[], float  Maximum_of_Delta_F2_Average[], float  Maximum_of_Min_Delta_F2_Max_DeltaF2MaxMinValue[], float  Maximum_of_Frequency_deviation_during_sync_FreqDevSyncAv[], float  Maximum_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax[], float  Maximum_of_DeltaF0FnMax_for_10101010[], float  Maximum_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0[], float  Maximum_of_DeltaFnFn_5Max_for_10101010[], float  Maximum_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max[], float  Maximum_of_CRC_valid[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Payload(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Payload[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Pduheader(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PDU_Header[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Pdulength(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PDU_Length[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Preamble(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Preamble[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Frequency_Offset[], float  Std_of_Delta_F1_Average[], float  Std_of_Delta_F2_Average[], float  Std_of_Min_Delta_F2_Max_DeltaF2MaxMinValue[], float  Std_of_Frequency_deviation_during_sync_FreqDevSyncAv[], float  Std_of_Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax[], float  Std_of_DeltaF0FnMax_for_10101010[], float  Std_of_Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0[], float  Std_of_DeltaFnFn_5Max_for_10101010[], float  Std_of_Number_of_symbols_with_deviation_below_185kHz_Below185F2Max[], float  Std_of_CRC_valid[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Lenergy_Sword(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Syncword[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Lenergy(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Frequency_Offset[], float  Delta_F1_Average[], float  Delta_F2_Average[], float  Min_Delta_F2_Max_DeltaF2MaxMinValue[], float  Frequency_deviation_during_sync_FreqDevSyncAv[], float  Max_absolue_of_Frequency_measurements_over_8_symbols_for_10101010_pattern_FnMax[], float  DeltaF0FnMax_for_10101010[], float  Absolue_of_absf0_f1_for_10101010_pattern_DeltaF1F0[], float  DeltaFnFn_5Max_for_10101010[], float  Number_of_symbols_with_deviation_below_185kHz_Below185F2Max[], float  CRC_valid[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Fetch_Segment_Txquality_Pnumber(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_BT_Hset_All         (int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_BT_Hset_Frequency_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_BT_Hset_Frequency_Get(int session, enum LP_Port_t HW_Module, double *Frequency);
LP_DRIVER_API int __cdecl LP_BT_Hset_Rlevel_Set  (int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_BT_Hset_Rlevel_Get  (int session, int HW_Module, double *Reference_Level);
LP_DRIVER_API int __cdecl LP_BT_Mrcl             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BT_Mrst             (int session);
LP_DRIVER_API int __cdecl LP_BT_Msav             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BT_Msds             (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_BT_Wave_Generate_Mmemory(int session, const char* File_Name, const char* optional_Description_of_Waveform);

LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Ccdf (int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Power(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Ramp (int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Slobe(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Spectrum(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Spectrum_Wide(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Txquality(int session, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Ccdf(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Power(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Ramp(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Slobe(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Spectrum(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Spectrum_Wide(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Calculate_Segment_Txquality(int session, unsigned int segment, unsigned int Packet_Offset, unsigned int Packet_Count);
LP_DRIVER_API int __cdecl LP_WIFI_Capture_Store_Normalized(int session, unsigned int segment, const char* File_Name, const char* Description_of_Capture, double Start_Offset, double Length);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_All      (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Ccdf     (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Power    (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Ramp     (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Slobe    (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Spectrum (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Synchronize(int session);
LP_DRIVER_API int __cdecl LP_WIFI_Clear_Txquality(int session);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Afsegments_Set(int session, unsigned num_values, int Analyzed_Frequency_Segments[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Afsegments_Get(int session, unsigned int max_items, int Analyzed_Frequency_Segments[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Band_Set(int session, enum LP_WIFI_Band_t WIFI_Band);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Band_Get(int session, enum LP_WIFI_Band_t *WIFI_Band);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Channel_Cbw_Set(int session, unsigned int Channel_Bandwidth);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Channel_Cbw_Get(int session, unsigned int *Channel_Bandwidth);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Channel_Index_Set(int session, unsigned int index, unsigned int Channel_Index_given_Frequency_Segment);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Channel_Index_Get(int session, unsigned int index, unsigned int *Channel_Index_given_Frequency_Segment);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Csuppression_Factor_Set(int session, double Carrier_Suppression_conversion_factor);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Csuppression_Factor_Get(int session, double *Carrier_Suppression_conversion_factor);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Etaps_Set(int session, enum LP_Number_of_Equilizer_Taps_t Number_of_Equilizer_Taps);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Etaps_Get(int session, enum LP_Number_of_Equilizer_Taps_t *Number_of_Equilizer_Taps);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Evm_Dcremoval_Set(int session, enum LP_Boolean_t On_Off);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Evm_Dcremoval_Get(int session, enum LP_Boolean_t *On_Off);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Evm_Method_Set(int session, enum LP_EVM_METHOD_t EVM_METHOD);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Evm_Method_Get(int session, enum LP_EVM_METHOD_t *EVM_METHOD);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Foffset_Set(int session, double Frequency_Offset_for_TxQuality_Analysis);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Foffset_Get(int session, double *Frequency_Offset_for_TxQuality_Analysis);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Nchips_Set(int session, enum LP_Number_of_Chips_Mode_t Number_of_Chips_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Nchips_User_Set(int session, unsigned int User_Defined_Number_of_Chips);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Nchips_User_Get(int session, unsigned int *User_Defined_Number_of_Chips);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Nchips_Get(int session, enum LP_Number_of_Chips_Mode_t *Number_of_Chips_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Scrambler_Set(int session, enum LP_Boolean_t On_Off);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Dsss_Scrambler_Get(int session, enum LP_Boolean_t *On_Off);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Enpower_Set(int session, double Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Enpower_Get(int session, double *Expected_Nominal_Power);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Cestimation_Set(int session, enum LP_Channel_Estimation_Type_t Channel_Estimation_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Cestimation_Get(int session, enum LP_Channel_Estimation_Type_t *Channel_Estimation_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Mimo_Set(int session, enum LP_MIMO_Analysis_Mode_t MIMO_Analysis_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Mimo_Get(int session, enum LP_MIMO_Analysis_Mode_t *MIMO_Analysis_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Nsymbols_Set(int session, enum LP_NSYMbols_Mode_t Number_of_Symbols_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Nsymbols_User_Set(int session, unsigned int User_Defined_Number_of_Symbols);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Nsymbols_User_Get(int session, unsigned int *User_Defined_Number_of_Symbols);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Nsymbols_Get(int session, enum LP_NSYMbols_Mode_t *Number_of_Symbols_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Pdecode_Set(int session, enum LP_Boolean_t PSDU_Decoding_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Pdecode_Get(int session, enum LP_Boolean_t *PSDU_Decoding_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Pformat_Set(int session, enum LP_Packet_Format_t Packet_Format);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Pformat_Get(int session, enum LP_Packet_Format_t *Packet_Format);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Psdu_Bfaction_Decode_Set(int session, enum LP_Boolean_t BF_Action_Report_Decoding_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Psdu_Bfaction_Decode_Get(int session, enum LP_Boolean_t *BF_Action_Report_Decoding_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Stadjustment_Set(int session, double Symbol_Time_Adjustment);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Stadjustment_Get(int session, double *Symbol_Time_Adjustment);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Amplitude_Set(int session, enum LP_Boolean_t Amplitude_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Amplitude_Get(int session, enum LP_Boolean_t *Amplitude_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Frequency_Set(int session, enum LP_Frequency_Correction_Type_t Frequency_Correction_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Frequency_Get(int session, enum LP_Frequency_Correction_Type_t *Frequency_Correction_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Phase_Set(int session, enum LP_Boolean_t Phase_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Phase_Get(int session, enum LP_Boolean_t *Phase_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Sclock_Set(int session, enum LP_Boolean_t Symbol_Clock_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Tracking_Sclock_Get(int session, enum LP_Boolean_t *Symbol_Clock_Correction_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Uasignals_Set(int session, enum LP_Boolean_t Use_All_Selected_Input_Signals_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Ofdm_Uasignals_Get(int session, enum LP_Boolean_t *Use_All_Selected_Input_Signals_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Gap_Set(int session, double Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Gap_Get(int session, double *Packet_Detect_Gap_Time);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Ramp_Set(int session, enum LP_Packet_Detect_Ramp_Requirement_t Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Ramp_Get(int session, enum LP_Packet_Detect_Ramp_Requirement_t *Packet_Detect_Ramp_Requirement);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Signals_Set(int session, unsigned num_values, int Signals_for_Packet_Detection[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Signals_Get(int session, unsigned int max_items, int Signals_for_Packet_Detection[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Threshold_Set(int session, double Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Pdetection_Threshold_Get(int session, double *Packet_Detect_Power_Difference);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Power_Class_Set(int session, enum LP_Transmit_Power_Class_t Transmit_Power_Class);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Power_Class_Get(int session, enum LP_Transmit_Power_Class_t *Transmit_Power_Class);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Power_Preamble_Set(int session, unsigned num_values, double Preamble_Power_Time[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Power_Preamble_Get(int session, unsigned int max_items, double Preamble_Power_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Franges_Mode_Set(int session, enum LP_Spectrum_Margin_Mode_t Spectrum_Margin_Frequency_Range_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Franges_Mode_Get(int session, enum LP_Spectrum_Margin_Mode_t *Spectrum_Margin_Frequency_Range_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Franges_Get(int session, unsigned int max_items, int Spectrum_Margin_Frequency_Range[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Hlim_Type_Set(int session, enum LP_Spectrum_Limits_Type_t Spectrum_Limits_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Hlim_Type_Get(int session, enum LP_Spectrum_Limits_Type_t *Spectrum_Limits_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Hlimit_Set(int session, enum LP_Spectrum_Mode_t Spectrum_Limits_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Hlimit_Get(int session, enum LP_Spectrum_Mode_t *Spectrum_Limits_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Mlength_Set(int session, double Spectrum_Measurement_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Mlength_Get(int session, double *Spectrum_Measurement_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Moffset_Set(int session, double Spectrum_Measurement_Offset);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Spectrum_Moffset_Get(int session, double *Spectrum_Measurement_Offset);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Standard_Set(int session, enum LP_WiFi_Standards_Family_t WiFi_Standards_Family);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Standard_Ofdm_Set(int session, enum LP_WiFi_OFDM_Standards_t WiFi_OFDM_Standards);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Standard_Ofdm_Get(int session, enum LP_WiFi_OFDM_Standards_t *WiFi_OFDM_Standards);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Standard_Get(int session, enum LP_WiFi_Standards_Family_t *WiFi_Standards_Family);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Asignals_Set(int session, unsigned num_values, int Analyzed_Signals[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Asignals_Get(int session, unsigned int max_items, int Analyzed_Signals[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Clock_Set(int session, enum LP_Clock_Rate_t Clock_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Clock_Get(int session, enum LP_Clock_Rate_t *Clock_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Iqcompensation_Set(int session, enum LP_Boolean_t IQ_Comp_Est_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Txquality_Iqcompensation_Get(int session, enum LP_Boolean_t *IQ_Comp_Est_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Umargin_Dsss_Set(int session, double User_Margin_DSSS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Umargin_Dsss_Get(int session, double *User_Margin_DSSS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Umargin_Ofdm_Set(int session, double User_Margin_OFDM);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Umargin_Ofdm_Get(int session, double *User_Margin_OFDM);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Cdd_Set(int session, unsigned num_values, double Cyclic_Delay_Diversity[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Cdd_Get(int session, unsigned int max_items, double Cyclic_Delay_Diversity[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Clock_Set(int session, enum LP_Clock_Rate_t Clock_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Clock_Get(int session, enum LP_Clock_Rate_t *Clock_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Drate_Set(int session, enum LP_WiFi_Data_Rate_t WiFi_Data_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Drate_Get(int session, enum LP_WiFi_Data_Rate_t *WiFi_Data_Rate);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Bt_Set(int session, double BT_for_transmit_filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Bt_Get(int session, double *BT_for_transmit_filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Length_Set(int session, unsigned int Filter_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Length_Get(int session, unsigned int *Filter_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Rolloff_Set(int session, double Roll_off_factor_for_transmit_filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Rolloff_Get(int session, double *Roll_off_factor_for_transmit_filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Type_Set(int session, enum LP_transmit_filter_type_t transmit_filter_type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Type_Get(int session, enum LP_transmit_filter_type_t *transmit_filter_type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Set(int session, unsigned num_values, double User_defined_transmit_Filter[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Filter_Get(int session, unsigned int max_items, double User_defined_transmit_filter[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Preamble_Set(int session, enum LP_Preamble_Setting_t Preamble_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Preamble_Get(int session, enum LP_Preamble_Setting_t *Preamble_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Ramp_Time_Set(int session, double Power_Ramp_Up_Time);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Ramp_Time_Get(int session, double *Power_Ramp_Up_Time);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Ramp_Type_Set(int session, enum LP_Ramp_Up_Type_t Ramp_Up_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Dsss_Ramp_Type_Get(int session, enum LP_Ramp_Up_Type_t *Ramp_Up_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Gap_Set(int session, unsigned num_values, double Gap_Time[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Gap_Get(int session, unsigned int max_items, char Gap_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Netx_Set(int session, unsigned int Number_of_extra_antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Netx_Get(int session, unsigned int *Number_of_extra_antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Aggregation_Set(int session, enum LP_Aggregation_t Aggregation);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Aggregation_Get(int session, enum LP_Aggregation_t *Aggregation);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Cbw_Set(int session, unsigned int CBW);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Cbw_Get(int session, unsigned int *CBW);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Coding_Set(int session, enum LP_Coding_t Coding);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Coding_Get(int session, enum LP_Coding_t *Coding);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Set(int session, enum LP_Baseband_Filter_t Baseband_Filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Alpha_Set(int session, double Alpha_for_Transmit_Filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Alpha_Get(int session, double *Alpha_for_Transmit_Filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Delay_Set(int session, enum LP_Boolean_t Filter_Delay_Compensation);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Delay_Get(int session, enum LP_Boolean_t *Filter_Delay_Compensation);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Length_Set(int session, double Filter_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Length_Get(int session, double *Filter_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Filter_Get(int session, enum LP_Baseband_Filter_t *Baseband_Filter);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Greenfield_Set(int session, enum LP_Boolean_t Greenfield);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Greenfield_Get(int session, enum LP_Boolean_t *Greenfield);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Interleave_Set(int session, enum LP_Boolean_t Interleaving);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Interleave_Get(int session, enum LP_Boolean_t *Interleaving);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Mcs_Set(int session, unsigned int MCS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Mcs_Get(int session, unsigned int *MCS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Nesstreams_Set(int session, unsigned int NESS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Nesstreams_Get(int session, unsigned int *NESS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Nsstreams_Set(int session, unsigned int NSS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Nsstreams_Get(int session, unsigned int *NSS);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Paid_Set(int session, unsigned int Partial_AID);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Paid_Get(int session, unsigned int *Partial_AID);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Preamble_Set(int session, enum LP_Preamble_Type_t Preamble_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Preamble_Get(int session, enum LP_Preamble_Type_t *Preamble_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Sgi_Set(int session, enum LP_Boolean_t SGI);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Sgi_Get(int session, enum LP_Boolean_t *SGI);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Set(int session, unsigned num_values, double Spatial_Mapping_Matrix[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Get(int session, unsigned int max_items, double Spatial_Mapping_Matrix[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Tones_Set(int session, unsigned num_values, double Tone_Specific_Spatial_Mapping_Matrix[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Tones_Get(int session, unsigned int max_items, double Tone_Specific_Spatial_Mapping_Matrix[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Type_Set(int session, enum LP_WiFi_Spatial_Mapping_Type_t WiFi_Spatial_Mapping_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smapping_Type_Get(int session, enum LP_WiFi_Spatial_Mapping_Type_t *WiFi_Spatial_Mapping_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smoothing_Set(int session, enum LP_Smoothing_Bit_t Smoothing_Bit);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Smoothing_Get(int session, enum LP_Smoothing_Bit_t *Smoothing_Bit);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Sounding_Set(int session, enum LP_Boolean_t SOUNDING);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Sounding_Get(int session, enum LP_Boolean_t *SOUNDING);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Stbc_Set(int session, unsigned int STBC);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Stbc_Get(int session, unsigned int *STBC);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Uplink_Set(int session, enum LP_Boolean_t Uplink);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Uplink_Get(int session, enum LP_Boolean_t *Uplink);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Window_Set(int session, enum LP_Window_Type_t Window_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Window_Length_Set(int session, double Window_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Window_Length_Get(int session, double *Window_Length);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Ofdm_Window_Get(int session, enum LP_Window_Type_t *Window_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Preamble_State_Set(int session, enum LP_Boolean_t Preamble_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Preamble_State_Get(int session, enum LP_Boolean_t *Preamble_State);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Action_Set(int session, enum LP_BF_Report_Action_t BF_Report_Action);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Action_Get(int session, enum LP_BF_Report_Action_t *BF_Report_Action);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Channel_Imaginary_Set(int session, unsigned num_values, double Channel_Response_Imaginary[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Channel_Imaginary_Get(int session, unsigned int max_items, char Channel_Response_Imaginary[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Channel_Real_Set(int session, unsigned num_values, double Channel_Response_Real[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Channel_Real_Get(int session, unsigned int max_items, char Channel_Response_Real[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Compressed_Nbits_Set(int session, enum LP_Compressed_BF_Report_Bits_t Compressed_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Compressed_Nbits_Get(int session, enum LP_Compressed_BF_Report_Bits_t *Compressed_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Csi_Nbits_Set(int session, enum LP_CSI_BF_Report_Bits_t CSI_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Csi_Nbits_Get(int session, enum LP_CSI_BF_Report_Bits_t *CSI_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Grouping_Set(int session, unsigned int Subcarrier_Grouping);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Grouping_Get(int session, unsigned int *Subcarrier_Grouping);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Nrx_Set(int session, unsigned int Number_of_Receive_Antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Nrx_Get(int session, unsigned int *Number_of_Receive_Antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Ntx_Set(int session, unsigned int Number_of_Transmit_Antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Ntx_Get(int session, unsigned int *Number_of_Transmit_Antennas);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Snr_Set(int session, unsigned num_values, double SNR_for_Beamforming_Action_Frame[]);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Snr_Get(int session, unsigned int max_items, double SNR_for_Beamforming_Action_Frame[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_State_Set(int session, enum LP_Boolean_t BF_Action_Frame);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_State_Get(int session, enum LP_Boolean_t *BF_Action_Frame);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Uncompressed_Nbits_Set(int session, enum LP_Uncompressed_BF_Report_Bits_t Uncompressed_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Bfaction_Uncompressed_Nbits_Get(int session, enum LP_Uncompressed_BF_Report_Bits_t *Uncompressed_BF_Report_Bits);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Crc_Set(int session, enum LP_Boolean_t CRC_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Crc_Get(int session, enum LP_Boolean_t *CRC_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Bits_Ascii_Get(int session, unsigned int maximum_size, char User_specified_PSDU_bits[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Bits_Get(int session, unsigned int max_items, char User_specified_data_bits[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Pn_Seed_Set(int session, int PSDU_Seed);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Pn_Seed_Get(int session, int *PSDU_Seed);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Type_Set(int session, enum LP_PSDU_Setting_t PSDU_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Data_Type_Get(int session, enum LP_PSDU_Setting_t *PSDU_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Address_Enable_Set(int session, unsigned int address, enum LP_MAC_Address_Enable_t MAC_Address_Enable);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Address_Enable_Get(int session, unsigned int address, enum LP_MAC_Address_Enable_t *MAC_Address_Enable);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Address_Get(int session, unsigned int address, unsigned int maximum_size, char User_specified_MAC_Address[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Duration_Get(int session, unsigned int maximum_size, char User_specified_Duration_ID[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Fcontrol_Mode_Set(int session, enum LP_WiFi_MAC_Frame_Contol_Mode_t WiFi_MAC_Frame_Contol_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Fcontrol_Mode_Get(int session, enum LP_WiFi_MAC_Frame_Contol_Mode_t *WiFi_MAC_Frame_Contol_Mode);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Fcontrol_Type_Set(int session, enum LP_WiFi_MAC_Frame_Contol_Type_t WiFi_MAC_Frame_Contol_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Fcontrol_Type_Get(int session, enum LP_WiFi_MAC_Frame_Contol_Type_t *WiFi_MAC_Frame_Contol_Type);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Fcontrol_User_Get(int session, unsigned int maximum_size, char User_specified_Frame_Control[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Sequence_Enable_Set(int session, enum LP_Sequence_Control_Enable_t Sequence_Control_Enable);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Sequence_Enable_Get(int session, enum LP_Sequence_Control_Enable_t *Sequence_Control_Enable);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Sequence_Get(int session, unsigned int maximum_size, char User_specified_Sequence_Control[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Set(int session, enum LP_Boolean_t Mac_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Macheader_Get(int session, enum LP_Boolean_t *Mac_Setting);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Nbytes_Set(int session, unsigned int mpdu, unsigned int PSDU_Length_for_wave_generation_in_bytes);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Nbytes_Get(int session, unsigned int mpdu, unsigned int *PSDU_Length_for_wave_generation_in_Bytes);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_Aid_Get(int session, unsigned int maximum_size, char AID_Field[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_Nc_Set(int session, unsigned int Nc_Index);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_Nc_Get(int session, unsigned int *Nc_Index);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_Sequence_Set(int session, unsigned int Sequence_Number);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_Sequence_Get(int session, unsigned int *Sequence_Number);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_State_Set(int session, enum LP_Boolean_t NDPA_Frame);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Ndpa_State_Get(int session, enum LP_Boolean_t *NDPA_Frame);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Nmpdus_Set(int session, unsigned int Number_of_MPDUs_to_be_included_in_packet);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Psdu_Nmpdus_Get(int session, unsigned int *Number_of_MPDUs_to_be_included_in_packet);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Scrambler_Set(int session, unsigned int Scrambler);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Scrambler_Get(int session, unsigned int *Scrambler);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Standard_Set(int session, enum LP_WiFi_Standard_t WiFi_Standard);
LP_DRIVER_API int __cdecl LP_WIFI_Configure_Wave_Standard_Get(int session, enum LP_WiFi_Standard_t *WiFi_Standard);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ccdf_Gaussian_Power(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_refence_Gaussian_CCDF_power_above_average_X_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ccdf_Gaussian_Probability(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_refence_Gaussian_CCDF_Probability_Y_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ccdf_Power(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_CCDF_power_above_average_X_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ccdf_Probability(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Array_of_CCDF_Probability_Y_axis[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ccdf_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Peak_Average(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Peak_Maximum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Peak_Minimum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Peak_Sdeviation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Peak(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Preamble_Average(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Preamble_Maximum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Preamble_Minimum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Preamble_Sdeviation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Preamble(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Average(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Maximum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Minimum(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Scount(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power_Sdeviation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Power(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Hlimit_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Y_Mask[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Hlimit_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *X_Mask[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Instantaneous(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ramp_Off_Instantaneous_Power[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Peak(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ramp_Off_Peak_Power[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Vector[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Off_Trise(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Ramp_On_Power_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Hlimit_Corner(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Y_Mask[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Hlimit_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *X_Mask[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Instantaneous(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ramp_On_Instantaneous_Power[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Peak(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ramp_On_Peak_Power[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Vector[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_On_Trise(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Ramp_Off_Power_Time[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ramp_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_2nd_Lower_Side_Lobe[], float  Peak_1st_Lower_Side_Lobe[], float  Peak_Center[], float  Peak_1st_Higher_Side_Lobe[], float  Peak_2nd_Higher_Side_Lobe[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_2nd_Lower_Side_Lobe[], float  Peak_1st_Lower_Side_Lobe[], float  Peak_Center[], float  Peak_1st_Higher_Side_Lobe[], float  Peak_2nd_Higher_Side_Lobe[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_2nd_Lower_Side_Lobe[], float  Peak_1st_Lower_Side_Lobe[], float  Peak_Center[], float  Peak_1st_Higher_Side_Lobe[], float  Peak_2nd_Higher_Side_Lobe[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_2nd_Lower_Side_Lobe[], float  Peak_1st_Lower_Side_Lobe[], float  Peak_Center[], float  Peak_1st_Higher_Side_Lobe[], float  Peak_2nd_Higher_Side_Lobe[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Peak_2nd_Lower_Side_Lobe[], float  Peak_1st_Lower_Side_Lobe[], float  Peak_Center[], float  Peak_1st_Higher_Side_Lobe[], float  Peak_2nd_Higher_Side_Lobe[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Slobe_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Ofrequency(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Check(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Avg_Spectrum_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Hlimit_Corner(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum_Mask_Corner_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Hlimit(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum_Mask_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Margin_Ofrequency(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum_Mrg_Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Margin(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Obw(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Avg_OBW[], float  Avg_Lower_Frequency_Limit[], float  Avg_Upper_Frequency_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Ofrequency_Corner(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average_Violation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Avg_Mask_Violation[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Average(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Check(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Spectrum_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Hlimit_Corner(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mask_Corner_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Hlimit(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mask_Points[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Margin_Ofrequency(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mrg_Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Margin(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum_Check(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Max_Spectrum_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum_Margin_Ofrequency(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Spectrum_Mrg_Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum_Margin(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Spectrum_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum_Obw(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Max_OBW[], float  Max_Lower_Frequency_Limit[], float  Max_Upper_Frequency_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum_Violation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Max_Mask_Violation[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Maximum(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Obw(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  OBW[], float  Lower_Frequency_Limit[], float  Upper_Frequency_Limit[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Ofrequency_Corner(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offset_Frequencies[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Scount(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum_Violation(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Mask_Violation[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Spectrum(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectrum[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Synchronize_Petime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_End_Time_sec[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Synchronize_Power(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], float  Average_Power[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Synchronize_Pstime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Packet_Start_Time_sec[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Synchronize(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_packets_including_incomplete_packets_found[], int Number_of_complete_packets_found[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Dsss_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average[], float  EVM_Peak[], float  Phase_Error[], float  Frequency_Error[], float  Frequency_Error_Peak[], float  Symbol_Clock_Error[], float  LO_Leakage[], float  Amplitude_Imbalance[], float  Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Data_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Data_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Plcp_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Plcp_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Constellation_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Csuppression_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Carrier_Suppression[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Csuppression_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Carrier_Suppression[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Csuppression_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Carrier_Suppression[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Csuppression_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Carrier_Suppression[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Csuppression(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Carrier_Suppression[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Evmtime_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *WIFI_B_EVM_Vs_Time_Time_Vector[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Evmtime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *WIFI_B_EVM_Vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Eye_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Eye_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Eye_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Eye_Diagram[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Fevtime_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Freq_Error_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Fevtime(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Freq_Error_vs_Time[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Info_Clock(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Locked_Clock[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Info_Drate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  WiFi_Data_Rate[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Info_Modulation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Modulation_Type[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Info_Preamble(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Long_Preamble[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Iqcompensation_Amplitude(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Amplitude_imbalance_compensation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Iqcompensation_Phase(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_imbalance_compensation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Dsss_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average[], float  EVM_Peak[], float  Phase_Error[], float  Frequency_Error[], float  Frequency_Error_Peak[], float  Symbol_Clock_Error[], float  LO_Leakage[], float  Amplitude_Imbalance[], float  Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Dsss_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average[], float  EVM_Peak[], float  Phase_Error[], float  Frequency_Error[], float  Frequency_Error_Peak[], float  Symbol_Clock_Error[], float  LO_Leakage[], float  Amplitude_Imbalance[], float  Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Plcp_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PLCP_Data[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Plcp_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int CRC_Status[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Psdu_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PSDU_Bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Psdu_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int CRC_Status_for_PSDU[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Psdu_Nbytes(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Length_of_PSDU[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Scount(int session, unsigned int segment, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Dsss_Scrambler(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Scrambler_Init[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Dsss_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average[], float  EVM_Peak[], float  Phase_Error[], float  Frequency_Error[], float  Frequency_Error_Peak[], float  Symbol_Clock_Error[], float  LO_Leakage[], float  Amplitude_Imbalance[], float  Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Dsss(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  EVM_Average[], float  EVM_Peak[], float  Phase_Error[], float  Frequency_Error[], float  Frequency_Error_Peak[], float  Symbol_Clock_Error[], float  LO_Leakage[], float  Amplitude_Imbalance[], float  Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Aimbalance_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Amplitude_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Aimbalance_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Amplitude_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Aimbalance_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Amplitude_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Aimbalance_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Amplitude_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Aimbalance_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Amplitude_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Asignals(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Analyzed_Signals[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Average_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Avg_Composite_Error_Vector_Magnitude_Chk[], int Avg_Composite_Phase_Error_Chk[], int Avg_Composite_Frequency_Error_Chk[], int Avg_Composite_Symbol_Clock_Error_Chk[], int Avg_Worst_Case_LO_Leakage_Chk[], int Avg_Worst_Case_Amplitude_Imbalance_Chk[], int Avg_Worst_Case_Phase_Imbalance_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Average_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Composite_Error_Vector_Magnitude_Mrg[], float  Avg_Composite_Phase_Error_Mrg[], float  Avg_Composite_Frequency_Error_Mrg[], float  Avg_Composite_Symbol_Clock_Error_Mrg[], float  Avg_Worst_Case_LO_Leakage_Mrg[], float  Avg_Worst_Case_Amplitude_Imbalance_Mrg[], float  Avg_Worst_Case_Phase_Imbalance_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Composite_Error_Vector_Magnitude[], float  Avg_Composite_Phase_Error[], float  Avg_Composite_Frequency_Error[], float  Avg_Composite_Symbol_Clock_Error[], float  Avg_Worst_Case_LO_Leakage[], float  Avg_Worst_Case_Amplitude_Imbalance[], float  Avg_Worst_Case_Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Channel_All_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Chan_Est_Imag[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Channel_All_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Chan_Est_Real[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Channel_Rmagnitude(int session, unsigned int segment, unsigned int signal, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Chan_Rel_Magn_given_Ana_Sig_and_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Channel_Imaginary(int session, unsigned int segment, unsigned int signal, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Chan_Est_Imag_given_Ana_Sig_and_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Channel_Real(int session, unsigned int segment, unsigned int signal, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Chan_Est_Real_given_Ana_Sig_and_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Composite_Error_Vector_Magnitude_Chk[], int Composite_Phase_Error_Chk[], int Composite_Frequency_Error_Chk[], int Composite_Symbol_Clock_Error_Chk[], int Worst_Case_LO_Leakage_Chk[], int Worst_Case_Amplitude_Imbalance_Chk[], int Worst_Case_Phase_Imbalance_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Data_Ideal_Imaginary(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ideal_Cons_Imag_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Data_Ideal_Real(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ideal_Cons_Real_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Data_Imaginary(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Imag_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Data_Real(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Real_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Pilot_Ideal_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ideal_Cons_Imag_Part[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Pilot_Ideal_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Ideal_Cons_Real_Part[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Pilot_Imaginary(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Imag_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Pilot_Real(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Real_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Imaginary(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Imag_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Constellation_Real(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Constellation_Real_Part_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_EVM_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_EVM_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_EVM_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_EVM_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_EVM_on_Data_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_EVM_on_Data_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_EVM_on_Data_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_EVM_on_Data_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_on_Data_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Composite_EVM_on_Data_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Composite_EVM_on_Data_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Min_Composite_EVM_on_Data_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Composite_EVM_on_Data_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Data(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_EVM_on_Data_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_EVM_on_Pilot_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_EVM_on_Pilot_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_EVM_on_Pilot_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_EVM_on_Pilot_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_on_Pilot_Tones_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_Average(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Avg_Composite_EVM_on_Pilot_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Composite_EVM_on_Pilot_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Min_Composite_EVM_on_Pilot_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Composite_EVM_on_Pilot_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evm_Pilot(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_EVM_on_Pilot_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evmsymbol_Composite(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Composite_EVM_vs_Symbol[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evmsymbol(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_vs_Symbol_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evmtone_Composite(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Composite_EVM_vs_Tone[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Evmtone(int session, unsigned int segment, unsigned int stream, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *EVM_vs_Tone_given_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Ferror_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Frequency_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Ferror_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Frequency_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Ferror_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Frequency_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Ferror_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Frequency_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Ferror_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Frequency_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Fetime_Preamble(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Freq_Err_vs_Time_on_Preamb_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Fetime_Preamble_Time(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Time_Instants_on_Preamble[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Hlimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_Error_Vector_Magnitude_Hi[], float  Composite_Phase_Error_Hi[], float  Composite_Frequency_Error_Hi[], float  Composite_Symbol_Clock_Error_Hi[], float  Worst_Case_LO_Leakage_Hi[], float  Worst_Case_Amplitude_Imbalance_Hi[], float  Worst_Case_Phase_Imbalance_Hi[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Aggregation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Aggregation[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Cbw(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Signal_Bandwidth[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Coding(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Coding_Type[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Coffset(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Channel_Offset[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Crate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Coding_Rate_Index[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Drate(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Data_Rate[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Mcs(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Modulation_and_Coding_Scheme[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Modulation(int session, unsigned int segment, unsigned int stream, unsigned int max_items, int Status_Code[], int Modulation_Index_given_Spat_Str[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Nsignals(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Signals[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Nsstreams(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Spatial_Streams[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Nststreams(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Space_Time_Streams[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Nsymbols_Sig(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Symbols_SIG[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Nsymbols(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Symbols_Analyzed[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Ntones(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Tones[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Sgi(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Guard_Interval[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Info_Sounding(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Sounding[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Iqcompensation_Amplitude(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Amplitude_imbalance_compensation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Iqcompensation_Phase(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_imbalance_compensation[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Llimit(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_Error_Vector_Magnitude_Lo[], float  Composite_Phase_Error_Lo[], float  Composite_Frequency_Error_Lo[], float  Composite_Symbol_Clock_Error_Lo[], float  Worst_Case_LO_Leakage_Lo[], float  Worst_Case_Amplitude_Imbalance_Lo[], float  Worst_Case_Phase_Imbalance_Lo[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_Trelative_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_Trelative_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_Trelative_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_Trelative_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Loleakage_Trelative_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *LO_Leakage_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Lsig_Pcheck(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Legacy_Parity_Check[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_Error_Vector_Magnitude_Mrg[], float  Composite_Phase_Error_Mrg[], float  Composite_Frequency_Error_Mrg[], float  Composite_Symbol_Clock_Error_Mrg[], float  Worst_Case_LO_Leakage_Mrg[], float  Worst_Case_Amplitude_Imbalance_Mrg[], float  Worst_Case_Phase_Imbalance_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Maximum_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Max_Composite_Error_Vector_Magnitude_Chk[], int Max_Composite_Phase_Error_Chk[], int Max_Composite_Frequency_Error_Chk[], int Max_Composite_Symbol_Clock_Error_Chk[], int Max_Worst_Case_LO_Leakage_Chk[], int Max_Worst_Case_Amplitude_Imbalance_Chk[], int Max_Worst_Case_Phase_Imbalance_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Maximum_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Composite_Error_Vector_Magnitude_Mrg[], float  Max_Composite_Phase_Error_Mrg[], float  Max_Composite_Frequency_Error_Mrg[], float  Max_Composite_Symbol_Clock_Error_Mrg[], float  Max_Worst_Case_LO_Leakage_Mrg[], float  Max_Worst_Case_Amplitude_Imbalance_Mrg[], float  Max_Worst_Case_Phase_Imbalance_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Maximum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Max_Composite_Error_Vector_Magnitude[], float  Max_Composite_Phase_Error[], float  Max_Composite_Frequency_Error[], float  Max_Composite_Symbol_Clock_Error[], float  Max_Worst_Case_LO_Leakage[], float  Max_Worst_Case_Amplitude_Imbalance[], float  Max_Worst_Case_Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Minimum_Check(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Min_Composite_Error_Vector_Magnitude_Chk[], int Min_Composite_Phase_Error_Chk[], int Min_Composite_Frequency_Error_Chk[], int Min_Composite_Symbol_Clock_Error_Chk[], int Min_Worst_Case_LO_Leakage_Chk[], int Min_Worst_Case_Amplitude_Imbalance_Chk[], int Min_Worst_Case_Phase_Imbalance_Chk[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Minimum_Margin(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Min_Composite_Error_Vector_Magnitude_Mrg[], float  Min_Composite_Phase_Error_Mrg[], float  Min_Composite_Frequency_Error_Mrg[], float  Min_Composite_Symbol_Clock_Error_Mrg[], float  Min_Worst_Case_LO_Leakage_Mrg[], float  Min_Worst_Case_Amplitude_Imbalance_Mrg[], float  Min_Worst_Case_Phase_Imbalance_Mrg[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Minimum(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Min_Composite_Error_Vector_Magnitude[], float  Min_Composite_Phase_Error[], float  Min_Composite_Frequency_Error[], float  Min_Composite_Symbol_Clock_Error[], float  Min_Worst_Case_LO_Leakage[], float  Min_Worst_Case_Amplitude_Imbalance[], float  Min_Worst_Case_Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Nstf(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_STF_Periods[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Odtone(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Offset_Data_Tones[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Optone(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Offset_Pilot_Tones[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Otone(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Offset_Tones[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Perror_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Phase_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Perror_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Phase_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Perror_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Phase_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Perror_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Phase_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Perror_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pesymbol_Psd_Ofrequency(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Offs_Freqs_for_PSD_of_Phase_Error_vs_Sym[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pesymbol_Psd(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *PSD_of_Phase_Error_vs_Sym_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pesymbol(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_Error_vs_Sym_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pformat(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Format[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pimbalance_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Phase_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pimbalance_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Phase_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pimbalance_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Phase_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pimbalance_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Phase_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Pimbalance_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Phase_Imbalance_vs_Spat_Str[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Power_Average(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Power_vs_Spat_Str_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Power_Maximum(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Power_vs_Spat_Str_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Power_Minimum(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Power_vs_Spat_Str_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Power_Sdeviation(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Power_vs_Spat_Str_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Power(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Power_vs_Spat_Str_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Nrx(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Receive_Antennas[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Ntx(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_Transmit_Antennas[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Phi(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *BF_Phi_angles[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Psi(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *BF_Psi_angles[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Vmatrix_Imaginary(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *BF_Vmatrix_Q_Component[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bfaction_Vmatrix_Real(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *BF_Vmatrix_I_Component[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *PSDU_Bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int PSDU_CRC[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Mpdu_Bits(int session, unsigned int segment, unsigned int mpdu, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *MPDU_Bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Mpdu_Crc(int session, unsigned int segment, unsigned int mpdu, unsigned int max_items, int Status_Code[], int MPDU_CRC[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Mpdu_Nbytes(int session, unsigned int segment, unsigned int mpdu, unsigned int max_items, int Status_Code[], int Number_of_MPDU_Bytes[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Nbytes(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_PSDU_Bytes[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Psdu_Nmpdus(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Number_of_MPDUs[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scerror_All_Average(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Symbol_Clock_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scerror_All_Maximum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Max_Symbol_Clock_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scerror_All_Minimum(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Min_Symbol_Clock_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scerror_All_Sdeviation(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Std_of_Symbol_Clock_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scerror_All(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Symbol_Clock_Error_vs_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scount_Signal(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scount(int session, unsigned int segment, unsigned int stream, unsigned int max_items, int Status_Code[], unsigned int Statistical_Count[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Scrambler(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Scrambler_Initialization_Sequence[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm_Sdeviation(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Std_of_Composite_Error_Vector_Magnitude[], float  Std_of_Composite_Phase_Error[], float  Std_of_Composite_Frequency_Error[], float  Std_of_Composite_Symbol_Clock_Error[], float  Std_of_Worst_Case_LO_Leakage[], float  Std_of_Worst_Case_Amplitude_Imbalance[], float  Std_of_Worst_Case_Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Service_Bits(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], char *Service_Bits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Hlimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectral_Flatness_High_Limits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Llimit(int session, unsigned int segment, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectral_Flatness_Low_Limits[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Average_Check(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Avg_Spectral_Flatness_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Average_Margin_Otone(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Avg_Spectral_Flatness_Mrg_Offset_Tones[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Average_Margin_Value(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectral_Flatness_at_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Average_Margin(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectral_Flatness_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Average(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Avg_Spectral_Flatness_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Check(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Spectral_Flatness_Check[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Margin_Otone(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], int *Spectral_Flatness_Mrg_Offset_Tones[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Margin_Value(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectral_Flatness_at_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness_Margin(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectral_Flatness_Mrg[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sflatness(int session, unsigned int segment, unsigned int signal, unsigned int number_of_slots, unsigned int number_of_points[], int Status_Code[], float *Spectral_Flatness_given_Ana_Sig[], unsigned int actual_size[], unsigned int *actual_slots);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sig_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int SIG_CRC[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Ofdm_Sigb_Crc(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int SIGB_CRC[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Ofdm(int session, unsigned int segment, unsigned int max_items, int Status_Code[], float  Composite_Error_Vector_Magnitude[], float  Composite_Phase_Error[], float  Composite_Frequency_Error[], float  Composite_Symbol_Clock_Error[], float  Worst_Case_LO_Leakage[], float  Worst_Case_Amplitude_Imbalance[], float  Worst_Case_Phase_Imbalance[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Txquality_Pnumber(int session, unsigned int segment, unsigned int signal, unsigned int max_items, int Status_Code[], int Packet_Number[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Fetch_Segment_Type(int session, unsigned int segment, unsigned int max_items, int Status_Code[], int Packet_Type[], unsigned int *actual_items);
LP_DRIVER_API int __cdecl LP_WIFI_Hset_All       (int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_WIFI_Hset_Frequency_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_WIFI_Hset_Frequency_Get(int session, enum LP_Port_t HW_Module, double *Frequency);
LP_DRIVER_API int __cdecl LP_WIFI_Hset_Rlevel_Set(int session, enum LP_Port_t HW_Module);
LP_DRIVER_API int __cdecl LP_WIFI_Hset_Rlevel_Get(int session, int HW_Module, double *Reference_Level);
LP_DRIVER_API int __cdecl LP_WIFI_Mrcl           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_WIFI_Mrst           (int session);
LP_DRIVER_API int __cdecl LP_WIFI_Msav           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_WIFI_Msds           (int session, unsigned int Register_Location);
LP_DRIVER_API int __cdecl LP_WIFI_Reference_Load_Set(int session, const char* Reference_File);
LP_DRIVER_API int __cdecl LP_WIFI_Reference_Load_Get(int session, unsigned int maximum_size, char Reference_File[], unsigned int *actual_size);
LP_DRIVER_API int __cdecl LP_WIFI_Wave_Generate_Mmemory(int session, const char* File_Name, const char* optional_Description_of_Waveform);


#ifdef __cplusplus
}
#endif
